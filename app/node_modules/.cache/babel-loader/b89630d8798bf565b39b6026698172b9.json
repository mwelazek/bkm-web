{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Storage = /*#__PURE__*/function () {\n  function Storage() {\n    _classCallCheck(this, Storage);\n  }\n\n  _createClass(Storage, [{\n    key: \"get\",\n    value:\n    /**\n     * Gets the value at `key`. Returns a promise that will be resolved\n     * with that value (or undefined for missing keys).\n     */\n    function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key) {\n        var value;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                value = sessionStorage[key];\n\n                if (!value) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", JSON.parse(value));\n\n              case 3:\n                return _context.abrupt(\"return\", null);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Sets the `value` on `key` and returns a promise that will be resolved\n     * with the value that was set.\n     */\n\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key, value) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                sessionStorage[key] = JSON.stringify(value);\n                return _context2.abrupt(\"return\", value);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function set(_x2, _x3) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n    /**\n     * Deletes the value at `key`. Returns a promise that will be resolved\n     * with true if the key was deleted or with false if it was not (eg. if\n     * did not exist).\n     */\n\n  }, {\n    key: \"unset\",\n    value: function () {\n      var _unset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(key in sessionStorage)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                delete sessionStorage[key];\n                return _context3.abrupt(\"return\", true);\n\n              case 3:\n                return _context3.abrupt(\"return\", false);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function unset(_x4) {\n        return _unset.apply(this, arguments);\n      }\n\n      return unset;\n    }()\n  }]);\n\n  return Storage;\n}();\n\nexports.default = Storage;","map":null,"metadata":{},"sourceType":"script"}