{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { Label } from './../../atoms/label';\nimport { Spinner } from '../spinner/';\nimport ValidationError from './../../molecules/form/validation-error';\nimport './styles.scss';\n\nvar SafeInputField = /*#__PURE__*/function (_React$Component) {\n  _inherits(SafeInputField, _React$Component);\n\n  var _super = _createSuper(SafeInputField);\n\n  function SafeInputField(props) {\n    var _this;\n\n    _classCallCheck(this, SafeInputField);\n\n    _this = _super.call(this, props);\n\n    _this.renderLabel = function () {\n      if (_this.props.label !== undefined) {\n        var labelText = React.createElement(React.Fragment, null, _this.props.label, _this.props.isRequired && _this.props.requiredLabel && _this.props.showRequiredLabel ? React.createElement(\"em\", null, \" \", _this.props.requiredLabel) : '', _this.props.isRequired && _this.props.requiredLabelHtml && _this.props.showRequiredLabel ? React.createElement(\"span\", {\n          dangerouslySetInnerHTML: _this.createMarkup(_this.props.requiredLabelHtml)\n        }) : '', !_this.props.isRequired && _this.props.optionalLabel && _this.props.showOptionalLabel ? React.createElement(\"em\", null, \" \", _this.props.optionalLabel) : '');\n        return React.createElement(Label, {\n          labelText: labelText,\n          htmlFor: _this.props.inputName,\n          sublabelText: _this.props.subLabel,\n          testId: _this.props.labelTestId,\n          helpButton: _this.props.helpButton\n        });\n      }\n\n      return null;\n    };\n\n    _this.state = {\n      focused: false,\n      isValid: true,\n      value: undefined,\n      validated: false,\n      loading: false,\n      dirtyInput: false\n    };\n    _this.inputFieldRef = React.createRef();\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.notifyChanged = _this.notifyChanged.bind(_assertThisInitialized(_this));\n    _this.notifyValidated = _this.notifyValidated.bind(_assertThisInitialized(_this));\n    _this.onMouseDown = _this.onMouseDown.bind(_assertThisInitialized(_this));\n    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_this));\n    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));\n    _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n    _this.isTypeNumber = _this.isTypeNumber.bind(_assertThisInitialized(_this));\n    _this.validate = _this.validate.bind(_assertThisInitialized(_this));\n    _this.validateNumber = _this.validateNumber.bind(_assertThisInitialized(_this));\n    _this.validateField = _this.validateField.bind(_assertThisInitialized(_this));\n    _this.isValidIfRequired = _this.isValidIfRequired.bind(_assertThisInitialized(_this));\n    _this.isValid = _this.isValid.bind(_assertThisInitialized(_this));\n    _this.renderErrorMessage = _this.renderErrorMessage.bind(_assertThisInitialized(_this));\n    _this.renderLabel = _this.renderLabel.bind(_assertThisInitialized(_this));\n    _this.getInputClasses = _this.getInputClasses.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SafeInputField, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var value = this.props.value;\n      this.setState({\n        value: value\n      }, function () {\n        if (value === '' || value === null || value === undefined) {\n          return;\n        } else {\n          if (!_this2.validate(value)) {\n            _this2.setState({\n              isValid: false,\n              validated: true\n            });\n          } else if (_this2.props.onChangeValidator && !_this2.props.onChangeValidator(value)) {\n            _this2.setState({\n              isValid: false,\n              validated: true\n            });\n          } else if (_this2.props.onBlurValidator) {\n            _this2.props.onBlurValidator(value).then(function (isValid) {\n              _this2.setState({\n                isValid: isValid,\n                validated: true\n              });\n            });\n          }\n        }\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_prevProps, prevState) {\n      if (prevState.isValid !== this.state.isValid) {\n        this.notifyValidated();\n      }\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.props.validateOnExternalUpdate && this.state.value !== nextProps.value) {\n        this.handleChange(nextProps.value);\n      } else {\n        if (!this.state.focused) {\n          this.setState({\n            value: nextProps.value\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(e) {\n      var _this3 = this;\n\n      var value = e.target.value;\n      this.handleChange(value, function (formattedValue) {\n        return _this3.notifyChanged(e, formattedValue);\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(value, notify) {\n      var formattedValue = value;\n\n      if (this.props.onChangeFormatter) {\n        formattedValue = this.props.onChangeFormatter(value);\n      }\n\n      if (formattedValue !== this.state.value) {\n        this.setState({\n          value: formattedValue,\n          dirtyInput: true\n        });\n\n        if (this.inputFieldRef.current) {\n          this.inputFieldRef.current.value = formattedValue;\n        }\n\n        if (!this.validate(formattedValue)) {\n          this.setState({\n            isValid: false\n          });\n        } else if (this.props.onChangeValidator && this.state.validated) {\n          this.setState({\n            isValid: this.props.onChangeValidator(value)\n          });\n        } else {\n          this.setState({\n            isValid: true\n          });\n        }\n\n        if (notify) {\n          notify(formattedValue);\n        }\n\n        if (!formattedValue || this.isValueOverMaxLength(formattedValue)) {\n          this.setState({\n            validated: !formattedValue ? false : true\n          });\n        }\n      }\n    }\n  }, {\n    key: \"notifyChanged\",\n    value: function notifyChanged(e, formattedValue) {\n      if (this.props.onChange) {\n        this.props.onChange(e, this.props.id, formattedValue);\n      }\n    }\n  }, {\n    key: \"notifyValidated\",\n    value: function notifyValidated() {\n      if (this.props.onValidated) {\n        this.props.onValidated(this.state.isValid);\n      }\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown() {\n      if (this.props.type !== 'number') {\n        return;\n      }\n\n      if (this.state.focused) {\n        return;\n      }\n\n      this.focus();\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(e) {\n      this.setState({\n        focused: true\n      });\n\n      if (this.props.onFocus) {\n        this.props.onFocus(e, this.props.id);\n      }\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(e) {\n      var _this4 = this;\n\n      e.persist();\n      var value = e.target.value;\n      this.setState({\n        focused: false\n      });\n      var state = null;\n\n      if (this.state.dirtyInput) {\n        if (!this.validate(value)) {\n          state = {\n            isValid: false,\n            validated: true,\n            dirtyInput: false\n          };\n        } else if (typeof value === 'string' && this.props.minLength && value && value.length < this.props.minLength) {\n          state = {\n            isValid: false,\n            validated: true,\n            dirtyInput: false\n          };\n        } else if (value !== '' && this.props.onChangeValidator && !this.props.onChangeValidator(value)) {\n          state = {\n            isValid: false,\n            validated: true,\n            dirtyInput: false\n          };\n        } else if (value !== '' && this.props.onBlurValidator) {\n          state = {\n            loading: true,\n            onBlurValidationPromise: this.props.onBlurValidator(value)\n          };\n        }\n      }\n\n      if (state) {\n        this.setState(state, function () {\n          if (_this4.props.onBlurValidator && _this4.state.onBlurValidationPromise) {\n            _this4.state.onBlurValidationPromise.then(function (isValid) {\n              _this4.setState({\n                isValid: isValid,\n                validated: true,\n                loading: false,\n                dirtyInput: false,\n                onBlurValidationPromise: undefined\n              });\n            });\n          }\n\n          if (_this4.props.onBlur) {\n            _this4.props.onBlur(e);\n          }\n        });\n      } else {\n        if (this.props.onBlur) {\n          this.props.onBlur(e);\n        }\n      }\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.inputFieldRef.current) this.inputFieldRef.current.focus();\n    }\n  }, {\n    key: \"isTypeNumber\",\n    value: function isTypeNumber() {\n      return this.props.type === 'number' || this.props.type === 'tel';\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      if (this.isTypeNumber() && !this.validateNumber(value)) {\n        return false;\n      }\n\n      if (typeof value === 'string' && !this.state.isValid && this.props.minLength && value && value.length < this.props.minLength) {\n        return false;\n      }\n\n      if (this.isValueOverMaxLength(value)) {\n        return false;\n      }\n\n      if (this.props.pattern && value) {\n        var regexp = new RegExp(this.props.pattern);\n\n        if (!regexp.test(value.toString())) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"isValueOverMaxLength\",\n    value: function isValueOverMaxLength(value) {\n      return typeof value === 'string' && this.props.maxLength && value && value.length > this.props.maxLength;\n    }\n  }, {\n    key: \"validateNumber\",\n    value: function validateNumber(value) {\n      var _this$props = this.props,\n          min = _this$props.min,\n          max = _this$props.max;\n\n      if (!value) {\n        return true;\n      }\n\n      if (min !== null && min !== undefined && value < min) {\n        return false;\n      }\n\n      if (max !== null && max !== undefined && value > max) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField() {\n      var _this5 = this;\n\n      return new Promise(function (resolve) {\n        if (_this5.props.onSubmitValidator) {\n          _this5.setState({\n            isValid: _this5.props.onSubmitValidator(_this5.state.value),\n            validated: true\n          });\n\n          resolve();\n        } else if (!_this5.isValidIfRequired()) {\n          _this5.setState({\n            isValid: false,\n            validated: true\n          });\n\n          resolve();\n        } else if (_this5.state.onBlurValidationPromise) {\n          _this5.state.onBlurValidationPromise.then(function () {\n            resolve();\n          });\n        } else {\n          resolve();\n        }\n      });\n    }\n  }, {\n    key: \"isValidIfRequired\",\n    value: function isValidIfRequired() {\n      if (this.props.isRequired) {\n        return this.state.value !== null && this.state.value !== undefined && this.state.value.toString().trim() !== '';\n      }\n\n      return true;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return this.state.isValid;\n    }\n  }, {\n    key: \"renderErrorMessage\",\n    value: function renderErrorMessage() {\n      if (this.props.isValidationHidden || !this.state.validated) {\n        return null;\n      }\n\n      if (this.props.validationErrorRenderer && !this.state.isValid) {\n        return this.props.validationErrorRenderer;\n      }\n\n      var error;\n\n      if (!this.state.isValid) {\n        if (this.props.isRequired && !this.isValidIfRequired() && this.props.requiredErrorMessage) {\n          error = typeof this.props.requiredErrorMessage === 'string' ? this.props.requiredErrorMessage : this.props.requiredErrorMessage(this.state.value);\n        } else if (this.props.errorMessage) {\n          error = typeof this.props.errorMessage === 'string' ? this.props.errorMessage : this.props.errorMessage(this.state.value);\n        } else {\n          error = 'Ugyldig verdi';\n        }\n\n        if (this.isValueOverMaxLength(this.state.value)) {\n          error = this.props.stringOverMaxLengthError ? this.props.stringOverMaxLengthError : 'Du har skrevet for mange tegn. Gjør teksten kortere.';\n        }\n      }\n\n      if (!error) {\n        return null;\n      }\n\n      return React.createElement(ValidationError, {\n        isValid: this.state.isValid,\n        error: error,\n        testId: this.props.validationTestId\n      });\n    }\n  }, {\n    key: \"createMarkup\",\n    value: function createMarkup(htmlString) {\n      return {\n        __html: htmlString\n      };\n    }\n  }, {\n    key: \"getInputClasses\",\n    value: function getInputClasses() {\n      if (this.props.maxLength) {\n        var max = this.props.maxLength > 40 ? 40 : this.props.maxLength;\n        return \"atom_input--\".concat(max);\n      } else if (this.props.max && (this.props.type === 'number' || this.props.type === 'tel')) {\n        var length = this.props.max.toString().length;\n        return \"atom_input--\".concat(length);\n      } else {\n        return '';\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          disabled = _this$props2.disabled,\n          size = _this$props2.size,\n          blurSpinnerAlignment = _this$props2.blurSpinnerAlignment,\n          keepDefaultSize = _this$props2.keepDefaultSize,\n          isRequired = _this$props2.isRequired,\n          id = _this$props2.id,\n          inputName = _this$props2.inputName,\n          tabIndex = _this$props2.tabIndex,\n          min = _this$props2.min,\n          max = _this$props2.max,\n          minLength = _this$props2.minLength,\n          type = _this$props2.type,\n          wrapperClasses = _this$props2.wrapperClasses,\n          isValidationHidden = _this$props2.isValidationHidden,\n          placeholder = _this$props2.placeholder,\n          onKeyDown = _this$props2.onKeyDown,\n          ariaLabel = _this$props2.ariaLabel,\n          ariaLabelledby = _this$props2.ariaLabelledby,\n          ariaRequired = _this$props2.ariaRequired,\n          inputProps = _this$props2.inputProps,\n          readOnly = _this$props2.readOnly,\n          helpElement = _this$props2.helpElement,\n          autocomplete = _this$props2.autocomplete,\n          inputTestId = _this$props2.inputTestId;\n      var _this$state = this.state,\n          value = _this$state.value,\n          isValid = _this$state.isValid,\n          validated = _this$state.validated,\n          loading = _this$state.loading;\n      var inputValue = typeof value === 'string' ? value : value ? value.toString() : '';\n      var inputClasses = classNames('hn-safe-input', 'atom_input', className, {\n        'safeInputFieldError atom_input--state_validationerror': validated && !isValid,\n        'atom_input--xsmall': size === 'xSmall',\n        'atom_input--small': size === 'small',\n        'atom_input--medium': size === 'medium',\n        'atom_input--large': size === 'large',\n        'atom_input--xlarge': size === 'xLarge',\n        atom_input: size === 'fullSize',\n        'atom_input--loading': loading,\n        'atom_input--spinnerright': blurSpinnerAlignment === 'right',\n        'atom_input--disabled': disabled\n      }, keepDefaultSize ? '' : this.getInputClasses());\n      var classes = classNames('safeInputField', wrapperClasses, {\n        mol_validation: !isValidationHidden,\n        'mol_validation--active': !isValidationHidden && validated && !isValid\n      });\n      var required = false;\n\n      if (isRequired) {\n        required = isRequired;\n      }\n\n      var ariaInvalid = {};\n\n      if (validated) {\n        ariaInvalid['aria-invalid'] = validated && !isValid;\n      }\n\n      return React.createElement(\"div\", {\n        className: classes,\n        id: \"\".concat(id, \"-wrapper\")\n      }, this.renderErrorMessage(), this.renderLabel(), helpElement ? helpElement : null, React.createElement(\"input\", Object.assign({\n        ref: this.inputFieldRef,\n        id: inputName,\n        name: inputName,\n        type: type ? type : 'text',\n        value: inputValue,\n        placeholder: placeholder,\n        className: inputClasses,\n        min: min,\n        max: max,\n        minLength: minLength,\n        autoComplete: autocomplete || 'off',\n        tabIndex: tabIndex,\n        \"data-testid\": inputTestId,\n        onChange: this.onChange,\n        onBlur: this.onBlur,\n        onFocus: this.onFocus,\n        onMouseDown: this.onMouseDown,\n        onKeyDown: onKeyDown,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledby,\n        \"aria-required\": ariaRequired || required,\n        required: required,\n        disabled: disabled,\n        readOnly: readOnly\n      }, inputProps, ariaInvalid)), loading ? React.createElement(Spinner, {\n        circular: true,\n        inline: true,\n        local: true,\n        className: \"atom_input__spinner\"\n      }) : null, this.props.children);\n    }\n  }]);\n\n  return SafeInputField;\n}(React.Component);\n\nexport { SafeInputField as default };\nSafeInputField.hnFormComponent = true;\nSafeInputField.defaultProps = {\n  id: undefined,\n  onBlur: undefined,\n  value: undefined,\n  showRequiredLabel: true,\n  readOnly: false,\n  size: 'medium',\n  blurSpinnerAlignment: 'left',\n  isValidationHidden: false\n};","map":null,"metadata":{},"sourceType":"module"}