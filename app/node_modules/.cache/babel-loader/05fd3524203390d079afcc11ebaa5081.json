{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport moment from 'moment';\nimport classNames from 'classnames';\nimport { getDocumentActiveElement } from '@helsenorge/core-utils/focus-utils';\nimport { getHoursFromTimeString, getMinutesFromTimeString } from '@helsenorge/core-utils/date-utils';\nimport { TIME_SEPARATOR, ERROR_REQUIRED_TIME, ERROR_INVALID_TIME, ERROR_HOURS_AFTER_MAX, ERROR_MINUTES_AFTER_MAX, ERROR_HOURS_BEFORE_MIN, ERROR_MINUTES_BEFORE_MIN } from '../../../constants/datetime';\nimport Reset from '../../icons/Reset';\nimport { FunctionButton } from './../../atoms/buttons/function-button';\nimport SafeInputField from './../../atoms/safe-input-field';\nimport ValidationError from '../form/validation-error';\nimport './styles.scss';\nimport { Sublabel } from '../../atoms/label/sublabel';\n\nvar TimeInput = /*#__PURE__*/function (_React$Component) {\n  _inherits(TimeInput, _React$Component);\n\n  var _super = _createSuper(TimeInput);\n\n  function TimeInput(props) {\n    var _this;\n\n    _classCallCheck(this, TimeInput);\n\n    _this = _super.call(this, props);\n\n    _this.onChildValidated = function () {\n      if (!_this.state.validated) {\n        return;\n      }\n\n      var newValue = _this.areAllFieldsValid() && _this.isTimeValid();\n\n      _this.setState({\n        valid: !!newValue\n      }, function () {\n        _this.notifyValidated();\n\n        _this.updateErrorMessage();\n      });\n    };\n\n    _this.onChangeValidator = function () {\n      return true;\n    };\n\n    _this.handleHoursChange = function (event) {\n      var value = _this.padNumber(event.target.value);\n\n      var minutes = getMinutesFromTimeString(String(_this.state.timeString), TIME_SEPARATOR);\n      var newValue = \"\".concat(value).concat(TIME_SEPARATOR).concat(minutes);\n\n      _this.setState({\n        timeString: newValue\n      }, function () {\n        if (_this.props.onTimeChange) {\n          _this.props.onTimeChange(newValue);\n\n          return;\n        }\n\n        if (_this.state.validated) {\n          _this.validate();\n\n          _this.notifyValidated();\n        }\n      });\n    };\n\n    _this.handleMinutesChange = function (event) {\n      var value = _this.padNumber(event.target.value);\n\n      var hours = getHoursFromTimeString(String(_this.state.timeString), TIME_SEPARATOR);\n      var newValue = \"\".concat(hours).concat(TIME_SEPARATOR).concat(value);\n\n      _this.setState({\n        timeString: newValue\n      }, function () {\n        if (_this.props.onTimeChange) {\n          _this.props.onTimeChange(newValue);\n\n          return;\n        }\n\n        if (_this.state.validated) {\n          _this.validate();\n\n          _this.notifyValidated();\n        }\n      });\n    };\n\n    _this.onBlur = function () {\n      if (_this.wrapperRef && _this.wrapperRef.current) {\n        var wrapperNode = _this.wrapperRef.current;\n        setTimeout(function () {\n          var focusedElement = getDocumentActiveElement(wrapperNode);\n\n          if (!wrapperNode.contains(focusedElement)) {\n            _this.validate();\n\n            if (_this.props.onBlur) _this.props.onBlur(_this.state.timeString);\n          }\n        }, 0);\n      }\n    };\n\n    _this.onBlurTimeValidator = function (time) {\n      if (time === '') {\n        return true;\n      }\n\n      if (time > _this.getMaxHour() || time < _this.getMinHour()) {\n        return false;\n      }\n\n      return true;\n    };\n\n    _this.onBlurMinutesValidator = function (minute) {\n      if (minute === '') {\n        return true;\n      }\n\n      if (minute > _this.getMaxMinute() || minute < _this.getMinMinute()) {\n        return false;\n      }\n\n      return true;\n    };\n\n    _this.updateErrorMessage = function () {\n      var _a, _b;\n\n      var _this$props = _this.props,\n          errorMessage = _this$props.errorMessage,\n          minHour = _this$props.minHour,\n          maxHour = _this$props.maxHour,\n          minMinute = _this$props.minMinute,\n          maxMinute = _this$props.maxMinute,\n          isRequired = _this$props.isRequired,\n          resources = _this$props.resources;\n      var errorString = undefined;\n\n      if (_this.state.valid) {\n        errorString = undefined;\n      } else {\n        var hours = _this.state.timeString ? parseInt(getHoursFromTimeString(String(_this.state.timeString), TIME_SEPARATOR), 10) : undefined;\n        var minutes = _this.state.timeString ? parseInt(getMinutesFromTimeString(String(_this.state.timeString), TIME_SEPARATOR), 10) : undefined;\n\n        if (errorMessage) {\n          errorString = typeof errorMessage === 'string' ? errorMessage : errorMessage(_this.state.timeString);\n        } else if (isRequired && (!_this.state.timeString || _this.state.timeString === ':')) {\n          errorString = ((_a = resources === null || resources === void 0 ? void 0 : resources.errorResources) === null || _a === void 0 ? void 0 : _a.errorRequiredTime) || ERROR_REQUIRED_TIME;\n        } else if (hours && minHour && hours < minHour) {\n          errorString = \"\".concat(ERROR_HOURS_BEFORE_MIN, \": \").concat(minHour, \"t\");\n        } else if (hours && maxHour && hours > maxHour) {\n          errorString = \"\".concat(ERROR_HOURS_AFTER_MAX, \": \").concat(maxHour, \"t\");\n        } else if ((minutes || minutes === 0) && (minMinute || minMinute === 0) && minutes < minMinute) {\n          errorString = \"\".concat(ERROR_MINUTES_BEFORE_MIN, \": \").concat(minMinute, \"min\");\n        } else if ((minutes || minutes === 0) && (maxMinute || maxMinute === 0) && minutes > maxMinute) {\n          errorString = \"\".concat(ERROR_MINUTES_AFTER_MAX, \": \").concat(maxMinute, \"min\");\n        } else {\n          errorString = ((_b = resources === null || resources === void 0 ? void 0 : resources.errorResources) === null || _b === void 0 ? void 0 : _b.errorInvalidTime) || ERROR_INVALID_TIME;\n        }\n      }\n\n      _this.setState({\n        errorString: errorString\n      });\n    };\n\n    _this.renderLegend = function () {\n      var _this$props2 = _this.props,\n          legend = _this$props2.legend,\n          subLabel = _this$props2.subLabel,\n          isRequired = _this$props2.isRequired,\n          requiredLabel = _this$props2.requiredLabel,\n          showRequiredLabel = _this$props2.showRequiredLabel,\n          optionalLabel = _this$props2.optionalLabel,\n          showOptionalLabel = _this$props2.showOptionalLabel,\n          helpButton = _this$props2.helpButton;\n      return React.createElement(\"legend\", null, React.createElement(\"span\", {\n        className: 'mol_timeinput__legend'\n      }, React.createElement(\"span\", {\n        className: 'mol_timeinput__legend__label'\n      }, legend), isRequired && requiredLabel && showRequiredLabel ? React.createElement(\"em\", {\n        className: 'mol_timeinput__legend__sublabel'\n      }, \" \", requiredLabel) : '', !isRequired && optionalLabel && showOptionalLabel ? React.createElement(\"em\", {\n        className: 'mol_timeinput__legend__sublabel'\n      }, \" \", optionalLabel) : '', helpButton, subLabel && React.createElement(Sublabel, {\n        sublabelText: subLabel\n      })));\n    };\n\n    _this.resetFields = function () {\n      _this.setState({\n        timeString: undefined\n      }, function () {\n        if (_this.props.onTimeChange) {\n          _this.props.onTimeChange(undefined);\n        }\n\n        if (_this.props.resetButton && _this.props.resetButton.onReset) {\n          _this.props.resetButton.onReset();\n        }\n      });\n    };\n\n    _this.renderResetButton = function () {\n      if (_this.props.resetButton && _this.props.resetButton.resetButtonText) {\n        return React.createElement(\"div\", {\n          className: \"mol_timeinput__resetbutton\",\n          onBlur: _this.onBlur\n        }, React.createElement(FunctionButton, {\n          svgIcon: React.createElement(Reset, {\n            variant: 'error'\n          }),\n          onClick: _this.resetFields\n        }, _this.props.resetButton.resetButtonText));\n      }\n    };\n\n    _this.renderHelp = function () {\n      if (_this.props.helpElement) {\n        return _this.props.helpElement;\n      }\n    };\n\n    _this.state = {\n      valid: true,\n      validated: false,\n      timeString: _this.getValue(props)\n    };\n    _this.wrapperRef = React.createRef();\n    _this.hoursInputRef = React.createRef();\n    _this.minutesInputRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(TimeInput, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      this.setState({\n        timeString: this.getValue(nextProps)\n      });\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(props) {\n      var value = props.value;\n\n      if (value) {\n        return value;\n      }\n    }\n  }, {\n    key: \"getTimeStringFromDate\",\n    value: function getTimeStringFromDate(date) {\n      var momentDate = moment(date);\n      return \"\".concat(momentDate.hours()).concat(TIME_SEPARATOR).concat(momentDate.minutes());\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField(requiredValidation) {\n      var _this2 = this;\n\n      this.setState({\n        validated: true\n      });\n\n      if (requiredValidation) {\n        return new Promise(function (resolve) {\n          _this2.validateWhenRequired(resolve);\n        });\n      } else {\n        return new Promise(function (resolve) {\n          _this2.validate(resolve);\n        });\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(cb) {\n      var _this3 = this;\n\n      var promises = [];\n\n      if (this.hoursInputRef.current) {\n        promises.push(this.hoursInputRef.current.validateField());\n      }\n\n      if (this.minutesInputRef.current) {\n        promises.push(this.minutesInputRef.current.validateField());\n      }\n\n      Promise.all(promises).then(function () {\n        var newValue = _this3.areAllFieldsValid() && _this3.isTimeValid();\n\n        _this3.setState({\n          valid: !!newValue\n        }, function () {\n          _this3.updateErrorMessage();\n\n          if (cb) cb();\n        });\n      });\n    }\n  }, {\n    key: \"validateWhenRequired\",\n    value: function validateWhenRequired(cb) {\n      var _this4 = this;\n\n      var promises = [];\n\n      if (this.hoursInputRef.current) {\n        promises.push(this.hoursInputRef.current.validateField());\n      }\n\n      if (this.minutesInputRef.current) {\n        promises.push(this.minutesInputRef.current.validateField());\n      }\n\n      Promise.all(promises).then(function () {\n        var newValue = _this4.areAllFieldsValid();\n\n        _this4.setState({\n          valid: !!newValue\n        }, cb);\n      });\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return this.state.valid;\n    }\n  }, {\n    key: \"areAllFieldsValid\",\n    value: function areAllFieldsValid() {\n      return this.hoursInputRef.current && this.hoursInputRef.current.isValid() && this.minutesInputRef.current && this.minutesInputRef.current.isValid();\n    }\n  }, {\n    key: \"isTimeValid\",\n    value: function isTimeValid() {\n      var hoursAsString = getHoursFromTimeString(String(this.state.timeString), TIME_SEPARATOR);\n      var minutesAsString = getMinutesFromTimeString(String(this.state.timeString), TIME_SEPARATOR);\n      var isTimeStringEmpty = !this.state.timeString || this.state.timeString === '';\n\n      if (this.props.isRequired && isTimeStringEmpty) {\n        return false;\n      } else if (hoursAsString === '' || minutesAsString === '') {\n        return true;\n      }\n\n      try {\n        var hours = parseInt(hoursAsString, 10);\n        var minutes = parseInt(minutesAsString, 10);\n        var time = moment(new Date()).hours(hours).minutes(minutes);\n        var minTime = this.getMinTime();\n        var maxTime = this.getMaxTime();\n        return time.isBetween(minTime, maxTime) || time.isSame(minTime) || time.isSame(maxTime);\n      } catch (e) {\n        return false;\n      }\n    }\n  }, {\n    key: \"getMaxTime\",\n    value: function getMaxTime() {\n      return moment(new Date()).hours(this.getMaxHour()).minutes(this.getMaxMinute()).toDate();\n    }\n  }, {\n    key: \"getMinTime\",\n    value: function getMinTime() {\n      return moment(new Date()).hours(this.getMinHour()).minutes(this.getMinMinute()).toDate();\n    }\n  }, {\n    key: \"notifyValidated\",\n    value: function notifyValidated() {\n      if (!this.props.onValidated) {\n        return;\n      }\n\n      this.props.onValidated(this.state.valid);\n    }\n  }, {\n    key: \"getMinHour\",\n    value: function getMinHour() {\n      return this.props.minHour ? this.props.minHour : 0;\n    }\n  }, {\n    key: \"getMaxHour\",\n    value: function getMaxHour() {\n      return this.props.maxHour ? this.props.maxHour : 23;\n    }\n  }, {\n    key: \"getMinMinute\",\n    value: function getMinMinute() {\n      return this.props.minMinute ? this.props.minMinute : 0;\n    }\n  }, {\n    key: \"getMaxMinute\",\n    value: function getMaxMinute() {\n      return this.props.maxMinute ? this.props.maxMinute : 59;\n    }\n  }, {\n    key: \"getErrorString\",\n    value: function getErrorString() {\n      return this.state.errorString;\n    }\n  }, {\n    key: \"padNumber\",\n    value: function padNumber(number) {\n      if (number && number.length < 2 && parseInt(number, 10) < 10) {\n        return '0' + number;\n      }\n\n      return number;\n    }\n  }, {\n    key: \"renderTimeInputfields\",\n    value: function renderTimeInputfields() {\n      var _this$props3 = this.props,\n          id = _this$props3.id,\n          inputClassName = _this$props3.inputClassName,\n          isRequired = _this$props3.isRequired,\n          readOnly = _this$props3.readOnly,\n          resources = _this$props3.resources;\n      var _this$state = this.state,\n          validated = _this$state.validated,\n          timeString = _this$state.timeString;\n      var ariaInvalid = {};\n      if (validated) ariaInvalid['aria-invalid'] = !this.isValid();\n      var hours = this.padNumber(getHoursFromTimeString(String(timeString), TIME_SEPARATOR));\n      var minutes = this.padNumber(getMinutesFromTimeString(String(timeString), TIME_SEPARATOR));\n      return React.createElement(\"div\", {\n        ref: this.wrapperRef,\n        className: \"mol_timeinput__inputs\"\n      }, React.createElement(SafeInputField, Object.assign({\n        ref: this.hoursInputRef,\n        id: \"\".concat(id, \"_hours\"),\n        type: \"number\",\n        value: hours ? hours : undefined,\n        className: inputClassName,\n        ariaLabel: \"Timer\",\n        placeholder: resources === null || resources === void 0 ? void 0 : resources.placeholderHours,\n        maxLength: 2,\n        min: this.getMinHour(),\n        max: this.getMaxHour(),\n        onChange: this.handleHoursChange,\n        onValidated: this.onChildValidated,\n        onChangeValidator: this.onChangeValidator,\n        onBlur: this.onBlur,\n        validationErrorRenderer: React.createElement(\"span\", null),\n        isValidationHidden: true,\n        isRequired: isRequired,\n        readOnly: readOnly,\n        disabled: readOnly\n      }, ariaInvalid)), React.createElement(\"span\", {\n        className: \"mol_timeinput__separator\"\n      }, ':'), React.createElement(SafeInputField, Object.assign({\n        ref: this.minutesInputRef,\n        id: \"\".concat(id, \"_minutes\"),\n        type: \"number\",\n        value: minutes ? minutes : undefined,\n        className: inputClassName,\n        ariaLabel: \"Minutter\",\n        placeholder: resources === null || resources === void 0 ? void 0 : resources.placeholderMinutes,\n        maxLength: 2,\n        min: this.getMinMinute(),\n        max: this.getMaxMinute(),\n        onChange: this.handleMinutesChange,\n        onValidated: this.onChildValidated,\n        onChangeValidator: this.onChangeValidator,\n        onBlur: this.onBlur,\n        validationErrorRenderer: React.createElement(\"span\", null),\n        isValidationHidden: true,\n        isRequired: isRequired,\n        readOnly: readOnly,\n        disabled: readOnly\n      }, ariaInvalid)), this.renderResetButton(), this.props.children);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          valid = _this$state2.valid,\n          errorString = _this$state2.errorString;\n      var _this$props4 = this.props,\n          id = _this$props4.id,\n          legend = _this$props4.legend,\n          className = _this$props4.className,\n          renderFieldset = _this$props4.renderFieldset,\n          isValidationHidden = _this$props4.isValidationHidden;\n      var wrapperClasses = classNames({\n        mol_validation: !isValidationHidden,\n        'mol_validation--active': !isValidationHidden && !valid\n      }, className);\n\n      if (!renderFieldset) {\n        return React.createElement(\"div\", {\n          className: wrapperClasses\n        }, this.renderTimeInputfields());\n      }\n\n      return React.createElement(\"div\", {\n        className: \"mol_timeinput \".concat(wrapperClasses),\n        id: \"\".concat(id, \"-wrapper\")\n      }, !isValidationHidden && !valid && errorString && React.createElement(ValidationError, {\n        isValid: valid,\n        error: errorString\n      }), React.createElement(\"fieldset\", null, legend && this.renderLegend(), this.renderHelp(), this.renderTimeInputfields()));\n    }\n  }]);\n\n  return TimeInput;\n}(React.Component);\n\nexport { TimeInput as default };\nTimeInput.defaultProps = {\n  renderFieldset: true\n};","map":null,"metadata":{},"sourceType":"module"}