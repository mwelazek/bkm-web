{"ast":null,"code":"//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\nvar Token = require('./Token').Token;\n\nvar ConsoleErrorListener = require('./error/ErrorListener').ConsoleErrorListener;\n\nvar ProxyErrorListener = require('./error/ErrorListener').ProxyErrorListener;\n\nfunction Recognizer() {\n  this._listeners = [ConsoleErrorListener.INSTANCE];\n  this._interp = null;\n  this._stateNumber = -1;\n  return this;\n}\n\nRecognizer.tokenTypeMapCache = {};\nRecognizer.ruleIndexMapCache = {};\n\nRecognizer.prototype.checkVersion = function (toolVersion) {\n  var runtimeVersion = \"4.8\";\n\n  if (runtimeVersion !== toolVersion) {\n    console.log(\"ANTLR runtime and generated code versions disagree: \" + runtimeVersion + \"!=\" + toolVersion);\n  }\n};\n\nRecognizer.prototype.addErrorListener = function (listener) {\n  this._listeners.push(listener);\n};\n\nRecognizer.prototype.removeErrorListeners = function () {\n  this._listeners = [];\n};\n\nRecognizer.prototype.getTokenTypeMap = function () {\n  var tokenNames = this.getTokenNames();\n\n  if (tokenNames === null) {\n    throw \"The current recognizer does not provide a list of token names.\";\n  }\n\n  var result = this.tokenTypeMapCache[tokenNames];\n\n  if (result === undefined) {\n    result = tokenNames.reduce(function (o, k, i) {\n      o[k] = i;\n    });\n    result.EOF = Token.EOF;\n    this.tokenTypeMapCache[tokenNames] = result;\n  }\n\n  return result;\n}; // Get a map from rule names to rule indexes.\n//\n// <p>Used for XPath and tree pattern compilation.</p>\n//\n\n\nRecognizer.prototype.getRuleIndexMap = function () {\n  var ruleNames = this.ruleNames;\n\n  if (ruleNames === null) {\n    throw \"The current recognizer does not provide a list of rule names.\";\n  }\n\n  var result = this.ruleIndexMapCache[ruleNames];\n\n  if (result === undefined) {\n    result = ruleNames.reduce(function (o, k, i) {\n      o[k] = i;\n    });\n    this.ruleIndexMapCache[ruleNames] = result;\n  }\n\n  return result;\n};\n\nRecognizer.prototype.getTokenType = function (tokenName) {\n  var ttype = this.getTokenTypeMap()[tokenName];\n\n  if (ttype !== undefined) {\n    return ttype;\n  } else {\n    return Token.INVALID_TYPE;\n  }\n}; // What is the error header, normally line/character position information?//\n\n\nRecognizer.prototype.getErrorHeader = function (e) {\n  var line = e.getOffendingToken().line;\n  var column = e.getOffendingToken().column;\n  return \"line \" + line + \":\" + column;\n}; // How should a token be displayed in an error message? The default\n//  is to display just the text, but during development you might\n//  want to have a lot of information spit out.  Override in that case\n//  to use t.toString() (which, for CommonToken, dumps everything about\n//  the token). This is better than forcing you to override a method in\n//  your token objects because you don't have to go modify your lexer\n//  so that it creates a new Java type.\n//\n// @deprecated This method is not called by the ANTLR 4 Runtime. Specific\n// implementations of {@link ANTLRErrorStrategy} may provide a similar\n// feature when necessary. For example, see\n// {@link DefaultErrorStrategy//getTokenErrorDisplay}.\n//\n\n\nRecognizer.prototype.getTokenErrorDisplay = function (t) {\n  if (t === null) {\n    return \"<no token>\";\n  }\n\n  var s = t.text;\n\n  if (s === null) {\n    if (t.type === Token.EOF) {\n      s = \"<EOF>\";\n    } else {\n      s = \"<\" + t.type + \">\";\n    }\n  }\n\n  s = s.replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\").replace(\"\\t\", \"\\\\t\");\n  return \"'\" + s + \"'\";\n};\n\nRecognizer.prototype.getErrorListenerDispatch = function () {\n  return new ProxyErrorListener(this._listeners);\n}; // subclass needs to override these if there are sempreds or actions\n// that the ATN interp needs to execute\n\n\nRecognizer.prototype.sempred = function (localctx, ruleIndex, actionIndex) {\n  return true;\n};\n\nRecognizer.prototype.precpred = function (localctx, precedence) {\n  return true;\n}; //Indicate that the recognizer has changed internal state that is\n//consistent with the ATN state passed in.  This way we always know\n//where we are in the ATN as the parser goes along. The rule\n//context objects form a stack that lets us see the stack of\n//invoking rules. Combine this and we have complete ATN\n//configuration information.\n\n\nObject.defineProperty(Recognizer.prototype, \"state\", {\n  get: function get() {\n    return this._stateNumber;\n  },\n  set: function set(state) {\n    this._stateNumber = state;\n  }\n});\nexports.Recognizer = Recognizer;","map":null,"metadata":{},"sourceType":"script"}