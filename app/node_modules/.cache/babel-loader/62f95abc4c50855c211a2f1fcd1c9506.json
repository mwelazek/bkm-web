{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.AddEditOrganization = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactHelmet = require(\"react-helmet\");\n\nvar _Form = require(\"./Form\");\n\nvar _reactRouter = require(\"react-router\");\n\nvar _constants = require(\"../../constants\");\n\nvar _notifications = require(\"@opensrp/notifications\");\n\nvar _antd = require(\"antd\");\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _utils = require(\"./utils\");\n\nvar _mls = require(\"../../mls\");\n\nvar _pkgConfig = require(\"@opensrp/pkg-config\");\n\nvar AddEditOrganization = function AddEditOrganization(props) {\n  var _allPractitionerRoles, _organization$data$na, _practitioners$data, _allPractitionerRoles2;\n\n  var fhirBaseUrl = props.fhirBaseURL;\n\n  var _useParams = (0, _reactRouter.useParams)(),\n      orgId = _useParams.id;\n\n  var _useTranslation = (0, _mls.useTranslation)(),\n      t = _useTranslation.t;\n\n  var configuredPractAssignmentStrategy = (0, _pkgConfig.getConfig)('practToOrgAssignmentStrategy');\n  var organization = (0, _reactQuery.useQuery)([_constants.organizationResourceType, orgId], (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee() {\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new _reactUtils.FHIRServiceClass(fhirBaseUrl, _constants.organizationResourceType).read(orgId));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), {\n    enabled: !!orgId\n  });\n  var practitioners = (0, _reactQuery.useQuery)([_constants.practitionerResourceType], function () {\n    return (0, _reactUtils.loadAllResources)(fhirBaseUrl, _constants.practitionerResourceType, {\n      active: true\n    });\n  }, {\n    select: function select(res) {\n      return (0, _reactUtils.getResourcesFromBundle)(res);\n    },\n    onError: function onError() {\n      return (0, _notifications.sendErrorNotification)(t('There was a problem fetching practitioners'));\n    }\n  });\n  var allPractitionerRoles = (0, _reactQuery.useQuery)([_constants.practitionerResourceType, _constants.organizationResourceType, orgId], function () {\n    return (0, _reactUtils.loadAllResources)(fhirBaseUrl, _constants.practitionerRoleResourceType, {\n      active: true\n    });\n  }, {\n    onError: function onError() {\n      return (0, _notifications.sendErrorNotification)(t('There was a problem fetching assigned practitioners'));\n    },\n    select: function select(res) {\n      return (0, _reactUtils.getResourcesFromBundle)(res);\n    },\n    enabled: !!orgId\n  });\n\n  if (organization.isLoading || organization.isFetching || practitioners.isLoading || practitioners.isFetching || allPractitionerRoles.isLoading || allPractitionerRoles.isFetching) {\n    return _react[\"default\"].createElement(_antd.Spin, {\n      size: \"large\",\n      className: \"custom-spinner\"\n    });\n  }\n\n  if (organization.error && !organization.data) {\n    return _react[\"default\"].createElement(_reactUtils.BrokenPage, {\n      errorMessage: organization.error.message\n    });\n  }\n\n  var assignedPractitionerRoles = ((_allPractitionerRoles = allPractitionerRoles.data) !== null && _allPractitionerRoles !== void 0 ? _allPractitionerRoles : []).filter(function (practitionerRole) {\n    var _practitionerRole$org;\n\n    return ((_practitionerRole$org = practitionerRole.organization) === null || _practitionerRole$org === void 0 ? void 0 : _practitionerRole$org.reference) === \"\".concat(_constants.organizationResourceType, \"/\").concat(organization.data.id);\n  });\n  var initialValues = (0, _utils.getOrgFormFields)(organization.data, assignedPractitionerRoles);\n  var pageTitle = organization.data ? t('Edit team | {{teamName}}', {\n    teamName: (_organization$data$na = organization.data.name) !== null && _organization$data$na !== void 0 ? _organization$data$na : ''\n  }) : t('Create team');\n  return _react[\"default\"].createElement(\"section\", {\n    className: \"content-section\"\n  }, _react[\"default\"].createElement(_reactHelmet.Helmet, null, _react[\"default\"].createElement(\"title\", null, pageTitle)), _react[\"default\"].createElement(_reactUtils.PageHeader, {\n    title: pageTitle\n  }), _react[\"default\"].createElement(\"div\", {\n    className: \"bg-white p-5\"\n  }, _react[\"default\"].createElement(_Form.OrganizationForm, {\n    fhirBaseUrl: fhirBaseUrl,\n    initialValues: initialValues,\n    practitioners: (_practitioners$data = practitioners.data) !== null && _practitioners$data !== void 0 ? _practitioners$data : [],\n    existingPractitionerRoles: assignedPractitionerRoles,\n    allPractitionerRoles: (_allPractitionerRoles2 = allPractitionerRoles.data) !== null && _allPractitionerRoles2 !== void 0 ? _allPractitionerRoles2 : [],\n    cancelUrl: _constants.ORGANIZATION_LIST_URL,\n    successUrl: _constants.ORGANIZATION_LIST_URL,\n    configuredPractAssignmentStrategy: configuredPractAssignmentStrategy\n  })));\n};\n\nexports.AddEditOrganization = AddEditOrganization;\nvar _default = AddEditOrganization;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}