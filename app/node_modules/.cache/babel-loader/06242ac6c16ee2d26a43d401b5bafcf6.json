{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nimport omit from \"rc-util/es/omit\";\nimport React, { createRef, forwardRef, useContext } from 'react';\nimport throttleByAnimationFrame from '../_util/throttleByAnimationFrame';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nimport { getFixedBottom, getFixedTop, getTargetRect } from './utils';\nconst TRIGGER_EVENTS = ['resize', 'scroll', 'touchstart', 'touchmove', 'touchend', 'pageshow', 'load'];\n\nfunction getDefaultTarget() {\n  return typeof window !== 'undefined' ? window : null;\n}\n\nvar AffixStatus;\n\n(function (AffixStatus) {\n  AffixStatus[AffixStatus[\"None\"] = 0] = \"None\";\n  AffixStatus[AffixStatus[\"Prepare\"] = 1] = \"Prepare\";\n})(AffixStatus || (AffixStatus = {}));\n\nlet InternalAffix = /*#__PURE__*/function (_React$Component) {\n  _inherits(InternalAffix, _React$Component);\n\n  var _super = _createSuper(InternalAffix);\n\n  function InternalAffix() {\n    var _this;\n\n    _classCallCheck(this, InternalAffix);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      status: AffixStatus.None,\n      lastAffix: false,\n      prevTarget: null\n    };\n    _this.placeholderNodeRef = /*#__PURE__*/createRef();\n    _this.fixedNodeRef = /*#__PURE__*/createRef();\n\n    _this.addListeners = () => {\n      const targetFunc = _this.getTargetFunc();\n\n      const target = targetFunc === null || targetFunc === void 0 ? void 0 : targetFunc();\n      const {\n        prevTarget\n      } = _this.state;\n\n      if (prevTarget !== target) {\n        TRIGGER_EVENTS.forEach(eventName => {\n          prevTarget === null || prevTarget === void 0 ? void 0 : prevTarget.removeEventListener(eventName, _this.lazyUpdatePosition);\n          target === null || target === void 0 ? void 0 : target.addEventListener(eventName, _this.lazyUpdatePosition);\n        });\n\n        _this.updatePosition();\n\n        _this.setState({\n          prevTarget: target\n        });\n      }\n    };\n\n    _this.removeListeners = () => {\n      if (_this.timer) {\n        clearTimeout(_this.timer);\n        _this.timer = null;\n      }\n\n      const {\n        prevTarget\n      } = _this.state;\n\n      const targetFunc = _this.getTargetFunc();\n\n      const newTarget = targetFunc === null || targetFunc === void 0 ? void 0 : targetFunc();\n      TRIGGER_EVENTS.forEach(eventName => {\n        newTarget === null || newTarget === void 0 ? void 0 : newTarget.removeEventListener(eventName, _this.lazyUpdatePosition);\n        prevTarget === null || prevTarget === void 0 ? void 0 : prevTarget.removeEventListener(eventName, _this.lazyUpdatePosition);\n      });\n\n      _this.updatePosition.cancel(); // https://github.com/ant-design/ant-design/issues/22683\n\n\n      _this.lazyUpdatePosition.cancel();\n    };\n\n    _this.getOffsetTop = () => {\n      const {\n        offsetBottom,\n        offsetTop\n      } = _this.props;\n      return offsetBottom === undefined && offsetTop === undefined ? 0 : offsetTop;\n    };\n\n    _this.getOffsetBottom = () => _this.props.offsetBottom; // =================== Measure ===================\n\n\n    _this.measure = () => {\n      const {\n        status,\n        lastAffix\n      } = _this.state;\n      const {\n        onChange\n      } = _this.props;\n\n      const targetFunc = _this.getTargetFunc();\n\n      if (status !== AffixStatus.Prepare || !_this.fixedNodeRef.current || !_this.placeholderNodeRef.current || !targetFunc) {\n        return;\n      }\n\n      const offsetTop = _this.getOffsetTop();\n\n      const offsetBottom = _this.getOffsetBottom();\n\n      const targetNode = targetFunc();\n\n      if (targetNode) {\n        const newState = {\n          status: AffixStatus.None\n        };\n        const placeholderRect = getTargetRect(_this.placeholderNodeRef.current);\n\n        if (placeholderRect.top === 0 && placeholderRect.left === 0 && placeholderRect.width === 0 && placeholderRect.height === 0) {\n          return;\n        }\n\n        const targetRect = getTargetRect(targetNode);\n        const fixedTop = getFixedTop(placeholderRect, targetRect, offsetTop);\n        const fixedBottom = getFixedBottom(placeholderRect, targetRect, offsetBottom);\n\n        if (fixedTop !== undefined) {\n          newState.affixStyle = {\n            position: 'fixed',\n            top: fixedTop,\n            width: placeholderRect.width,\n            height: placeholderRect.height\n          };\n          newState.placeholderStyle = {\n            width: placeholderRect.width,\n            height: placeholderRect.height\n          };\n        } else if (fixedBottom !== undefined) {\n          newState.affixStyle = {\n            position: 'fixed',\n            bottom: fixedBottom,\n            width: placeholderRect.width,\n            height: placeholderRect.height\n          };\n          newState.placeholderStyle = {\n            width: placeholderRect.width,\n            height: placeholderRect.height\n          };\n        }\n\n        newState.lastAffix = !!newState.affixStyle;\n\n        if (onChange && lastAffix !== newState.lastAffix) {\n          onChange(newState.lastAffix);\n        }\n\n        _this.setState(newState);\n      }\n    };\n\n    _this.prepareMeasure = () => {\n      // event param is used before. Keep compatible ts define here.\n      _this.setState({\n        status: AffixStatus.Prepare,\n        affixStyle: undefined,\n        placeholderStyle: undefined\n      }); // Test if `updatePosition` called\n\n\n      if (process.env.NODE_ENV === 'test') {\n        const {\n          onTestUpdatePosition\n        } = _this.props;\n        onTestUpdatePosition === null || onTestUpdatePosition === void 0 ? void 0 : onTestUpdatePosition();\n      }\n    };\n\n    _this.updatePosition = throttleByAnimationFrame(() => {\n      _this.prepareMeasure();\n    });\n    _this.lazyUpdatePosition = throttleByAnimationFrame(() => {\n      const targetFunc = _this.getTargetFunc();\n\n      const {\n        affixStyle\n      } = _this.state; // Check position change before measure to make Safari smooth\n\n      if (targetFunc && affixStyle) {\n        const offsetTop = _this.getOffsetTop();\n\n        const offsetBottom = _this.getOffsetBottom();\n\n        const targetNode = targetFunc();\n\n        if (targetNode && _this.placeholderNodeRef.current) {\n          const targetRect = getTargetRect(targetNode);\n          const placeholderRect = getTargetRect(_this.placeholderNodeRef.current);\n          const fixedTop = getFixedTop(placeholderRect, targetRect, offsetTop);\n          const fixedBottom = getFixedBottom(placeholderRect, targetRect, offsetBottom);\n\n          if (fixedTop !== undefined && affixStyle.top === fixedTop || fixedBottom !== undefined && affixStyle.bottom === fixedBottom) {\n            return;\n          }\n        }\n      } // Directly call prepare measure since it's already throttled.\n\n\n      _this.prepareMeasure();\n    });\n    return _this;\n  }\n\n  _createClass(InternalAffix, [{\n    key: \"getTargetFunc\",\n    value: function getTargetFunc() {\n      const {\n        getTargetContainer\n      } = this.context;\n      const {\n        target\n      } = this.props;\n\n      if (target !== undefined) {\n        return target;\n      }\n\n      return getTargetContainer !== null && getTargetContainer !== void 0 ? getTargetContainer : getDefaultTarget;\n    } // Event handler\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // [Legacy] Wait for parent component ref has its value.\n      // We should use target as directly element instead of function which makes element check hard.\n      this.timer = setTimeout(this.addListeners);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.addListeners();\n\n      if (prevProps.offsetTop !== this.props.offsetTop || prevProps.offsetBottom !== this.props.offsetBottom) {\n        this.updatePosition();\n      }\n\n      this.measure();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removeListeners();\n    } // =================== Render ===================\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      const {\n        affixStyle,\n        placeholderStyle\n      } = this.state;\n      const {\n        affixPrefixCls,\n        rootClassName,\n        children\n      } = this.props;\n      const className = classNames(affixStyle && rootClassName, {\n        [affixPrefixCls]: !!affixStyle\n      });\n      let props = omit(this.props, ['prefixCls', 'offsetTop', 'offsetBottom', 'target', 'onChange', 'affixPrefixCls', 'rootClassName']); // Omit this since `onTestUpdatePosition` only works on test.\n\n      if (process.env.NODE_ENV === 'test') {\n        props = omit(props, ['onTestUpdatePosition']);\n      }\n\n      return /*#__PURE__*/React.createElement(ResizeObserver, {\n        onResize: this.updatePosition\n      }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n        ref: this.placeholderNodeRef\n      }), affixStyle && /*#__PURE__*/React.createElement(\"div\", {\n        style: placeholderStyle,\n        \"aria-hidden\": \"true\"\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        ref: this.fixedNodeRef,\n        style: affixStyle\n      }, /*#__PURE__*/React.createElement(ResizeObserver, {\n        onResize: this.updatePosition\n      }, children))));\n    }\n  }]);\n\n  return InternalAffix;\n}(React.Component);\n\nInternalAffix.contextType = ConfigContext;\nconst Affix = /*#__PURE__*/forwardRef((props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    rootClassName\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const affixPrefixCls = getPrefixCls('affix', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(affixPrefixCls);\n  const AffixProps = Object.assign(Object.assign({}, props), {\n    affixPrefixCls,\n    rootClassName: classNames(rootClassName, hashId)\n  });\n  return wrapSSR( /*#__PURE__*/React.createElement(InternalAffix, Object.assign({}, AffixProps, {\n    ref: ref\n  })));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Affix.displayName = 'Affix';\n}\n\nexport default Affix;","map":null,"metadata":{},"sourceType":"module"}