{"ast":null,"code":"//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n// A tree structure used to record the semantic context in which\n//  an ATN configuration is valid.  It's either a single predicate,\n//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.\n//\n//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of\n//  {@link SemanticContext} within the scope of this outer class.</p>\n//\nvar Set = require('./../Utils').Set;\n\nvar Hash = require('./../Utils').Hash;\n\nfunction SemanticContext() {\n  return this;\n}\n\nSemanticContext.prototype.hashCode = function () {\n  var hash = new Hash();\n  this.updateHashCode(hash);\n  return hash.finish();\n}; // For context independent predicates, we evaluate them without a local\n// context (i.e., null context). That way, we can evaluate them without\n// having to create proper rule-specific context during prediction (as\n// opposed to the parser, which creates them naturally). In a practical\n// sense, this avoids a cast exception from RuleContext to myruleContext.\n//\n// <p>For context dependent predicates, we must pass in a local context so that\n// references such as $arg evaluate properly as _localctx.arg. We only\n// capture context dependent predicates in the context in which we begin\n// prediction, so we passed in the outer context here in case of context\n// dependent predicate evaluation.</p>\n//\n\n\nSemanticContext.prototype.evaluate = function (parser, outerContext) {}; //\n// Evaluate the precedence predicates for the context and reduce the result.\n//\n// @param parser The parser instance.\n// @param outerContext The current parser context object.\n// @return The simplified semantic context after precedence predicates are\n// evaluated, which will be one of the following values.\n// <ul>\n// <li>{@link //NONE}: if the predicate simplifies to {@code true} after\n// precedence predicates are evaluated.</li>\n// <li>{@code null}: if the predicate simplifies to {@code false} after\n// precedence predicates are evaluated.</li>\n// <li>{@code this}: if the semantic context is not changed as a result of\n// precedence predicate evaluation.</li>\n// <li>A non-{@code null} {@link SemanticContext}: the new simplified\n// semantic context after precedence predicates are evaluated.</li>\n// </ul>\n//\n\n\nSemanticContext.prototype.evalPrecedence = function (parser, outerContext) {\n  return this;\n};\n\nSemanticContext.andContext = function (a, b) {\n  if (a === null || a === SemanticContext.NONE) {\n    return b;\n  }\n\n  if (b === null || b === SemanticContext.NONE) {\n    return a;\n  }\n\n  var result = new AND(a, b);\n\n  if (result.opnds.length === 1) {\n    return result.opnds[0];\n  } else {\n    return result;\n  }\n};\n\nSemanticContext.orContext = function (a, b) {\n  if (a === null) {\n    return b;\n  }\n\n  if (b === null) {\n    return a;\n  }\n\n  if (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n    return SemanticContext.NONE;\n  }\n\n  var result = new OR(a, b);\n\n  if (result.opnds.length === 1) {\n    return result.opnds[0];\n  } else {\n    return result;\n  }\n};\n\nfunction Predicate(ruleIndex, predIndex, isCtxDependent) {\n  SemanticContext.call(this);\n  this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;\n  this.predIndex = predIndex === undefined ? -1 : predIndex;\n  this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n\n  return this;\n}\n\nPredicate.prototype = Object.create(SemanticContext.prototype);\nPredicate.prototype.constructor = Predicate; //The default {@link SemanticContext}, which is semantically equivalent to\n//a predicate of the form {@code {true}?}.\n//\n\nSemanticContext.NONE = new Predicate();\n\nPredicate.prototype.evaluate = function (parser, outerContext) {\n  var localctx = this.isCtxDependent ? outerContext : null;\n  return parser.sempred(localctx, this.ruleIndex, this.predIndex);\n};\n\nPredicate.prototype.updateHashCode = function (hash) {\n  hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n};\n\nPredicate.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof Predicate)) {\n    return false;\n  } else {\n    return this.ruleIndex === other.ruleIndex && this.predIndex === other.predIndex && this.isCtxDependent === other.isCtxDependent;\n  }\n};\n\nPredicate.prototype.toString = function () {\n  return \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n};\n\nfunction PrecedencePredicate(precedence) {\n  SemanticContext.call(this);\n  this.precedence = precedence === undefined ? 0 : precedence;\n}\n\nPrecedencePredicate.prototype = Object.create(SemanticContext.prototype);\nPrecedencePredicate.prototype.constructor = PrecedencePredicate;\n\nPrecedencePredicate.prototype.evaluate = function (parser, outerContext) {\n  return parser.precpred(outerContext, this.precedence);\n};\n\nPrecedencePredicate.prototype.evalPrecedence = function (parser, outerContext) {\n  if (parser.precpred(outerContext, this.precedence)) {\n    return SemanticContext.NONE;\n  } else {\n    return null;\n  }\n};\n\nPrecedencePredicate.prototype.compareTo = function (other) {\n  return this.precedence - other.precedence;\n};\n\nPrecedencePredicate.prototype.updateHashCode = function (hash) {\n  hash.update(31);\n};\n\nPrecedencePredicate.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof PrecedencePredicate)) {\n    return false;\n  } else {\n    return this.precedence === other.precedence;\n  }\n};\n\nPrecedencePredicate.prototype.toString = function () {\n  return \"{\" + this.precedence + \">=prec}?\";\n};\n\nPrecedencePredicate.filterPrecedencePredicates = function (set) {\n  var result = [];\n  set.values().map(function (context) {\n    if (context instanceof PrecedencePredicate) {\n      result.push(context);\n    }\n  });\n  return result;\n}; // A semantic context which is true whenever none of the contained contexts\n// is false.\n//\n\n\nfunction AND(a, b) {\n  SemanticContext.call(this);\n  var operands = new Set();\n\n  if (a instanceof AND) {\n    a.opnds.map(function (o) {\n      operands.add(o);\n    });\n  } else {\n    operands.add(a);\n  }\n\n  if (b instanceof AND) {\n    b.opnds.map(function (o) {\n      operands.add(o);\n    });\n  } else {\n    operands.add(b);\n  }\n\n  var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\n  if (precedencePredicates.length > 0) {\n    // interested in the transition with the lowest precedence\n    var reduced = null;\n    precedencePredicates.map(function (p) {\n      if (reduced === null || p.precedence < reduced.precedence) {\n        reduced = p;\n      }\n    });\n    operands.add(reduced);\n  }\n\n  this.opnds = operands.values();\n  return this;\n}\n\nAND.prototype = Object.create(SemanticContext.prototype);\nAND.prototype.constructor = AND;\n\nAND.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof AND)) {\n    return false;\n  } else {\n    return this.opnds === other.opnds;\n  }\n};\n\nAND.prototype.updateHashCode = function (hash) {\n  hash.update(this.opnds, \"AND\");\n}; //\n// {@inheritDoc}\n//\n// <p>\n// The evaluation of predicates by this context is short-circuiting, but\n// unordered.</p>\n//\n\n\nAND.prototype.evaluate = function (parser, outerContext) {\n  for (var i = 0; i < this.opnds.length; i++) {\n    if (!this.opnds[i].evaluate(parser, outerContext)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nAND.prototype.evalPrecedence = function (parser, outerContext) {\n  var differs = false;\n  var operands = [];\n\n  for (var i = 0; i < this.opnds.length; i++) {\n    var context = this.opnds[i];\n    var evaluated = context.evalPrecedence(parser, outerContext);\n    differs |= evaluated !== context;\n\n    if (evaluated === null) {\n      // The AND context is false if any element is false\n      return null;\n    } else if (evaluated !== SemanticContext.NONE) {\n      // Reduce the result by skipping true elements\n      operands.push(evaluated);\n    }\n  }\n\n  if (!differs) {\n    return this;\n  }\n\n  if (operands.length === 0) {\n    // all elements were true, so the AND context is true\n    return SemanticContext.NONE;\n  }\n\n  var result = null;\n  operands.map(function (o) {\n    result = result === null ? o : SemanticContext.andContext(result, o);\n  });\n  return result;\n};\n\nAND.prototype.toString = function () {\n  var s = \"\";\n  this.opnds.map(function (o) {\n    s += \"&& \" + o.toString();\n  });\n  return s.length > 3 ? s.slice(3) : s;\n}; //\n// A semantic context which is true whenever at least one of the contained\n// contexts is true.\n//\n\n\nfunction OR(a, b) {\n  SemanticContext.call(this);\n  var operands = new Set();\n\n  if (a instanceof OR) {\n    a.opnds.map(function (o) {\n      operands.add(o);\n    });\n  } else {\n    operands.add(a);\n  }\n\n  if (b instanceof OR) {\n    b.opnds.map(function (o) {\n      operands.add(o);\n    });\n  } else {\n    operands.add(b);\n  }\n\n  var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\n  if (precedencePredicates.length > 0) {\n    // interested in the transition with the highest precedence\n    var s = precedencePredicates.sort(function (a, b) {\n      return a.compareTo(b);\n    });\n    var reduced = s[s.length - 1];\n    operands.add(reduced);\n  }\n\n  this.opnds = operands.values();\n  return this;\n}\n\nOR.prototype = Object.create(SemanticContext.prototype);\nOR.prototype.constructor = OR;\n\nOR.prototype.constructor = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof OR)) {\n    return false;\n  } else {\n    return this.opnds === other.opnds;\n  }\n};\n\nOR.prototype.updateHashCode = function (hash) {\n  hash.update(this.opnds, \"OR\");\n}; // <p>\n// The evaluation of predicates by this context is short-circuiting, but\n// unordered.</p>\n//\n\n\nOR.prototype.evaluate = function (parser, outerContext) {\n  for (var i = 0; i < this.opnds.length; i++) {\n    if (this.opnds[i].evaluate(parser, outerContext)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nOR.prototype.evalPrecedence = function (parser, outerContext) {\n  var differs = false;\n  var operands = [];\n\n  for (var i = 0; i < this.opnds.length; i++) {\n    var context = this.opnds[i];\n    var evaluated = context.evalPrecedence(parser, outerContext);\n    differs |= evaluated !== context;\n\n    if (evaluated === SemanticContext.NONE) {\n      // The OR context is true if any element is true\n      return SemanticContext.NONE;\n    } else if (evaluated !== null) {\n      // Reduce the result by skipping false elements\n      operands.push(evaluated);\n    }\n  }\n\n  if (!differs) {\n    return this;\n  }\n\n  if (operands.length === 0) {\n    // all elements were false, so the OR context is false\n    return null;\n  }\n\n  var result = null;\n  operands.map(function (o) {\n    return result === null ? o : SemanticContext.orContext(result, o);\n  });\n  return result;\n};\n\nOR.prototype.toString = function () {\n  var s = \"\";\n  this.opnds.map(function (o) {\n    s += \"|| \" + o.toString();\n  });\n  return s.length > 3 ? s.slice(3) : s;\n};\n\nexports.SemanticContext = SemanticContext;\nexports.PrecedencePredicate = PrecedencePredicate;\nexports.Predicate = Predicate;","map":null,"metadata":{},"sourceType":"script"}