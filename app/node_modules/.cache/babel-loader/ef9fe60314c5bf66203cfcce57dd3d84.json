{"ast":null,"code":"import * as React from 'react';\nimport * as ReactDOMServer from 'react-dom/server';\nimport { log } from '@helsenorge/core-utils/logger';\nimport './styles.scss';\n\nconst ValidationSummary = _ref => {\n  let {\n    submitted,\n    components,\n    header\n  } = _ref;\n\n  if (submitted) {\n    const componentsWithErrors = sortComponentsWithErrorsByApperanceInDOM(getComponentsWithErrors(components));\n    const listItems = componentsWithErrors.map(el => {\n      let validationMessage;\n\n      if (el.props.label) {\n        validationMessage = el.props.label;\n      } else if (el.props.legend) {\n        validationMessage = el.props.legend;\n      }\n\n      let elementAsString = validationMessage;\n\n      if (React.isValidElement(validationMessage)) {\n        const element = validationMessage;\n        elementAsString = ReactDOMServer.renderToStaticMarkup(element);\n      }\n\n      const rawText = elementAsString != null ? elementAsString.replace(/<.*?>/g, ' ') : null;\n      validationMessage = React.createElement(\"span\", null, rawText);\n      return React.createElement(\"li\", {\n        key: el.props.id,\n        className: \"mol_validation-summary__listitem\"\n      }, React.createElement(\"a\", {\n        className: \"mol_validation-summary__link\",\n        href: `#${el.props.id}-wrapper`\n      }, validationMessage));\n    });\n\n    if (componentsWithErrors.length) {\n      return React.createElement(\"div\", {\n        className: \"mol_validation-summary\"\n      }, React.createElement(\"h3\", {\n        className: \"mol_validation-summary__header\"\n      }, header), React.createElement(\"ul\", {\n        className: \"mol_validation-summary__list\"\n      }, listItems));\n    }\n  }\n\n  return null;\n};\n\nfunction getComponentsWithErrors(components) {\n  const componentsWithErrors = components.filter(c => {\n    const componentToValidate = c && c.getWrappedInstance ? c.getWrappedInstance() : c;\n\n    if (componentToValidate && componentToValidate.props && componentToValidate.props.isValid && !componentToValidate.props.isValid() || componentToValidate && componentToValidate.isValid && !componentToValidate.isValid()) {\n      return true;\n    }\n  });\n  return componentsWithErrors;\n}\n\nfunction sortComponentsWithErrorsByApperanceInDOM(components) {\n  return components.sort((a, b) => {\n    const el1 = document.getElementById(`${a.props.id}-wrapper`);\n    const el2 = document.getElementById(`${b.props.id}-wrapper`);\n\n    if (!el1 || !el2) {\n      const missingElement = !el1 ? `${a.props.id}-wrapper` : `${b.props.id}-wrapper`;\n      log(`Validation-summary: could not find element with id ${missingElement}`);\n    }\n\n    if (el1 && el2) {\n      const compare = el1.compareDocumentPosition(el2);\n\n      if (compare === 2) {\n        return 1;\n      } else if (compare === 4) {\n        return -1;\n      }\n    }\n\n    return 0;\n  });\n}\n\nexport default ValidationSummary;","map":null,"metadata":{},"sourceType":"module"}