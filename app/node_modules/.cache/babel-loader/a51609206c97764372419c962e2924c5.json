{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar safe_input_field_1 = __importDefault(require(\"@helsenorge/toolkit/components/atoms/safe-input-field\"));\n\nvar validation_1 = __importDefault(require(\"@helsenorge/toolkit/components/molecules/form/validation\"));\n\nvar extension_1 = require(\"../../../util/extension\");\n\nvar index_1 = require(\"../../../util/index\");\n\nvar label_1 = __importDefault(require(\"../label\"));\n\nvar sublabel_1 = __importDefault(require(\"../sublabel\"));\n\nvar textview_1 = __importDefault(require(\"../textview\"));\n\nvar textField = function textField(_a) {\n  var id = _a.id,\n      pdf = _a.pdf,\n      item = _a.item,\n      answer = _a.answer,\n      handleStringChange = _a.handleStringChange,\n      children = _a.children,\n      onRenderMarkdown = _a.onRenderMarkdown,\n      other = __rest(_a, [\"id\", \"pdf\", \"item\", \"answer\", \"handleStringChange\", \"children\", \"onRenderMarkdown\"]);\n\n  if (pdf) {\n    return React.createElement(textview_1.default, {\n      item: item,\n      value: index_1.getPDFStringValue(answer)\n    }, children);\n  }\n\n  var subLabelText = index_1.getSublabelText(item, onRenderMarkdown);\n  return React.createElement(validation_1.default, Object.assign({}, other), React.createElement(safe_input_field_1.default, {\n    type: \"text\",\n    id: index_1.getId(id),\n    inputName: index_1.getId(id),\n    value: index_1.getStringValue(answer),\n    showLabel: false,\n    label: React.createElement(label_1.default, {\n      item: item,\n      onRenderMarkdown: onRenderMarkdown\n    }),\n    subLabel: subLabelText ? React.createElement(sublabel_1.default, {\n      subLabelText: subLabelText\n    }) : undefined,\n    isRequired: index_1.isRequired(item),\n    placeholder: extension_1.getPlaceholder(item),\n    minLength: extension_1.getMinLengthExtensionValue(item),\n    maxLength: index_1.getMaxLength(item),\n    readOnly: index_1.isReadOnly(item),\n    onBlur: handleStringChange,\n    pattern: extension_1.getRegexExtension(item),\n    errorMessage: extension_1.getValidationTextExtension(item),\n    validateOnExternalUpdate: true\n  }));\n};\n\nexports.default = textField;","map":null,"metadata":{},"sourceType":"script"}