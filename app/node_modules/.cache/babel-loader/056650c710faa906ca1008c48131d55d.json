{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport classNames from 'classnames';\nimport RcTreeSelect, { SHOW_ALL, SHOW_CHILD, SHOW_PARENT, TreeNode } from 'rc-tree-select';\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport genPurePanel from '../_util/PurePanel';\nimport { getTransitionDirection, getTransitionName } from '../_util/motion';\nimport { getMergedStatus, getStatusClassNames } from '../_util/statusUtils';\nimport warning from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport DefaultRenderEmpty from '../config-provider/defaultRenderEmpty';\nimport useSize from '../config-provider/hooks/useSize';\nimport { FormItemInputContext } from '../form/context';\nimport useSelectStyle from '../select/style';\nimport useBuiltinPlacements from '../select/useBuiltinPlacements';\nimport useShowArrow from '../select/useShowArrow';\nimport getIcons from '../select/utils/iconUtil';\nimport { useCompactItemContext } from '../space/Compact';\nimport SwitcherIconCom from '../tree/utils/iconUtil';\nimport useStyle from './style';\n\nconst InternalTreeSelect = (_a, ref) => {\n  var _b;\n\n  var {\n    prefixCls: customizePrefixCls,\n    size: customizeSize,\n    disabled: customDisabled,\n    bordered = true,\n    className,\n    rootClassName,\n    treeCheckable,\n    multiple,\n    listHeight = 256,\n    listItemHeight = 26,\n    placement,\n    notFoundContent,\n    switcherIcon,\n    treeLine,\n    getPopupContainer,\n    popupClassName,\n    dropdownClassName,\n    treeIcon = false,\n    transitionName,\n    choiceTransitionName = '',\n    status: customStatus,\n    showArrow,\n    treeExpandAction,\n    builtinPlacements,\n    dropdownMatchSelectWidth,\n    popupMatchSelectWidth\n  } = _a,\n      props = __rest(_a, [\"prefixCls\", \"size\", \"disabled\", \"bordered\", \"className\", \"rootClassName\", \"treeCheckable\", \"multiple\", \"listHeight\", \"listItemHeight\", \"placement\", \"notFoundContent\", \"switcherIcon\", \"treeLine\", \"getPopupContainer\", \"popupClassName\", \"dropdownClassName\", \"treeIcon\", \"transitionName\", \"choiceTransitionName\", \"status\", \"showArrow\", \"treeExpandAction\", \"builtinPlacements\", \"dropdownMatchSelectWidth\", \"popupMatchSelectWidth\"]);\n\n  const {\n    getPopupContainer: getContextPopupContainer,\n    getPrefixCls,\n    renderEmpty,\n    direction,\n    virtual,\n    popupMatchSelectWidth: contextPopupMatchSelectWidth,\n    popupOverflow\n  } = React.useContext(ConfigContext);\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(multiple !== false || !treeCheckable, 'TreeSelect', '`multiple` will always be `true` when `treeCheckable` is true') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'TreeSelect', '`dropdownClassName` is deprecated. Please use `popupClassName` instead.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(dropdownMatchSelectWidth === undefined, 'Select', '`dropdownMatchSelectWidth` is deprecated. Please use `popupMatchSelectWidth` instead.') : void 0;\n  }\n\n  const rootPrefixCls = getPrefixCls();\n  const prefixCls = getPrefixCls('select', customizePrefixCls);\n  const treePrefixCls = getPrefixCls('select-tree', customizePrefixCls);\n  const treeSelectPrefixCls = getPrefixCls('tree-select', customizePrefixCls);\n  const {\n    compactSize,\n    compactItemClassnames\n  } = useCompactItemContext(prefixCls, direction);\n  const [wrapSelectSSR, hashId] = useSelectStyle(prefixCls);\n  const [wrapTreeSelectSSR] = useStyle(treeSelectPrefixCls, treePrefixCls);\n  const mergedDropdownClassName = classNames(popupClassName || dropdownClassName, `${treeSelectPrefixCls}-dropdown`, {\n    [`${treeSelectPrefixCls}-dropdown-rtl`]: direction === 'rtl'\n  }, rootClassName, hashId);\n  const isMultiple = !!(treeCheckable || multiple);\n  const mergedShowArrow = useShowArrow(showArrow);\n  const mergedPopupMatchSelectWidth = (_b = popupMatchSelectWidth !== null && popupMatchSelectWidth !== void 0 ? popupMatchSelectWidth : dropdownMatchSelectWidth) !== null && _b !== void 0 ? _b : contextPopupMatchSelectWidth; // ===================== Form =====================\n\n  const {\n    status: contextStatus,\n    hasFeedback,\n    isFormItemInput,\n    feedbackIcon\n  } = React.useContext(FormItemInputContext);\n  const mergedStatus = getMergedStatus(contextStatus, customStatus); // ===================== Icons =====================\n\n  const {\n    suffixIcon,\n    removeIcon,\n    clearIcon\n  } = getIcons(Object.assign(Object.assign({}, props), {\n    multiple: isMultiple,\n    showArrow: mergedShowArrow,\n    hasFeedback,\n    feedbackIcon,\n    prefixCls\n  })); // ===================== Empty =====================\n\n  let mergedNotFound;\n\n  if (notFoundContent !== undefined) {\n    mergedNotFound = notFoundContent;\n  } else {\n    mergedNotFound = (renderEmpty === null || renderEmpty === void 0 ? void 0 : renderEmpty('Select')) || /*#__PURE__*/React.createElement(DefaultRenderEmpty, {\n      componentName: \"Select\"\n    });\n  } // ==================== Render =====================\n\n\n  const selectProps = omit(props, ['suffixIcon', 'itemIcon', 'removeIcon', 'clearIcon', 'switcherIcon']); // ===================== Placement =====================\n\n  const memoizedPlacement = React.useMemo(() => {\n    if (placement !== undefined) {\n      return placement;\n    }\n\n    return direction === 'rtl' ? 'bottomRight' : 'bottomLeft';\n  }, [placement, direction]);\n  const mergedBuiltinPlacements = useBuiltinPlacements(builtinPlacements, popupOverflow);\n  const mergedSize = useSize(ctx => {\n    var _a;\n\n    return (_a = compactSize !== null && compactSize !== void 0 ? compactSize : customizeSize) !== null && _a !== void 0 ? _a : ctx;\n  }); // ===================== Disabled =====================\n\n  const disabled = React.useContext(DisabledContext);\n  const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;\n  const mergedClassName = classNames(!customizePrefixCls && treeSelectPrefixCls, {\n    [`${prefixCls}-lg`]: mergedSize === 'large',\n    [`${prefixCls}-sm`]: mergedSize === 'small',\n    [`${prefixCls}-rtl`]: direction === 'rtl',\n    [`${prefixCls}-borderless`]: !bordered,\n    [`${prefixCls}-in-form-item`]: isFormItemInput\n  }, getStatusClassNames(prefixCls, mergedStatus, hasFeedback), compactItemClassnames, className, rootClassName, hashId);\n\n  const renderSwitcherIcon = nodeProps => /*#__PURE__*/React.createElement(SwitcherIconCom, {\n    prefixCls: treePrefixCls,\n    switcherIcon: switcherIcon,\n    treeNodeProps: nodeProps,\n    showLine: treeLine\n  });\n\n  const returnNode = /*#__PURE__*/React.createElement(RcTreeSelect, Object.assign({\n    virtual: virtual,\n    disabled: mergedDisabled\n  }, selectProps, {\n    dropdownMatchSelectWidth: mergedPopupMatchSelectWidth,\n    builtinPlacements: mergedBuiltinPlacements,\n    ref: ref,\n    prefixCls: prefixCls,\n    className: mergedClassName,\n    listHeight: listHeight,\n    listItemHeight: listItemHeight,\n    treeCheckable: treeCheckable ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `${prefixCls}-tree-checkbox-inner`\n    }) : treeCheckable,\n    treeLine: !!treeLine,\n    inputIcon: suffixIcon,\n    multiple: isMultiple,\n    placement: memoizedPlacement,\n    removeIcon: removeIcon,\n    clearIcon: clearIcon,\n    switcherIcon: renderSwitcherIcon,\n    showTreeIcon: treeIcon,\n    notFoundContent: mergedNotFound,\n    getPopupContainer: getPopupContainer || getContextPopupContainer,\n    treeMotion: null,\n    dropdownClassName: mergedDropdownClassName,\n    choiceTransitionName: getTransitionName(rootPrefixCls, '', choiceTransitionName),\n    transitionName: getTransitionName(rootPrefixCls, getTransitionDirection(placement), transitionName),\n    showArrow: hasFeedback || mergedShowArrow,\n    treeExpandAction: treeExpandAction\n  }));\n  return wrapSelectSSR(wrapTreeSelectSSR(returnNode));\n};\n\nconst TreeSelectRef = /*#__PURE__*/React.forwardRef(InternalTreeSelect);\nconst TreeSelect = TreeSelectRef; // We don't care debug panel\n\n/* istanbul ignore next */\n\nconst PurePanel = genPurePanel(TreeSelect);\nTreeSelect.TreeNode = TreeNode;\nTreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect.SHOW_CHILD = SHOW_CHILD;\nTreeSelect._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport { TreeNode };\nexport default TreeSelect;","map":null,"metadata":{},"sourceType":"module"}