{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.qrListRouteKey = exports.QuestionnaireResponseList = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar _constants = require(\"../constants\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _antd = require(\"antd\");\n\nvar _fhirResources = require(\"@opensrp/fhir-resources\");\n\nvar _icons = require(\"@ant-design/icons\");\n\nvar _mls = require(\"../mls\");\n\nvar _rbac = require(\"@opensrp/rbac\");\n\nvar qrListRouteKey = 'id';\nexports.qrListRouteKey = qrListRouteKey;\n\nvar getColumns = function getColumns(t) {\n  var columns = [{\n    title: t('Submission Id'),\n    width: '30%',\n    dataIndex: 'id'\n  }, {\n    title: t('Date authored'),\n    dataIndex: 'authoredDateTime',\n    render: function render(value) {\n      return t('{{val, datetime}}', {\n        val: new Date(value)\n      });\n    }\n  }, {\n    title: t('QuestionnaireVersion'),\n    dataIndex: 'questionnaireVersion'\n  }, {\n    title: t('Actions'),\n    render: function render(record) {\n      return _react[\"default\"].createElement(_rbac.RbacCheck, {\n        permissions: ['QuestionnaireResponse.update']\n      }, _react[\"default\"].createElement(_reactRouterDom.Link, {\n        to: \"\".concat(_constants.QUEST_FORM_VIEW_URL, \"/\").concat(record.id, \"/\").concat(_constants.questionnaireResponseResourceType)\n      }, t('Edit')));\n    },\n    width: '20%'\n  }];\n  return columns;\n};\n\nvar QuestionnaireResponseList = function QuestionnaireResponseList(props) {\n  var _data$records;\n\n  var fhirBaseURL = props.fhirBaseURL;\n\n  var _useParams = (0, _reactRouterDom.useParams)(),\n      questId = _useParams.id;\n\n  var _useTranslation = (0, _mls.useTranslation)(),\n      t = _useTranslation.t;\n\n  var history = (0, _reactRouterDom.useHistory)();\n\n  var _useQuery = (0, _reactQuery.useQuery)([_constants.questionnaireResourceType, questId], function () {\n    return new _reactUtils.FHIRServiceClass(fhirBaseURL, _constants.questionnaireResourceType).read(questId);\n  }, {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false\n  }),\n      QuestLoading = _useQuery.isLoading,\n      questData = _useQuery.data,\n      questError = _useQuery.error;\n\n  var extraParams = {\n    questionnaire: questId\n  };\n\n  var _useSimpleTabularView = (0, _reactUtils.useSimpleTabularView)(fhirBaseURL, _constants.questionnaireResponseResourceType, extraParams),\n      tablePaginationProps = _useSimpleTabularView.tablePaginationProps,\n      queryValues = _useSimpleTabularView.queryValues;\n\n  var data = queryValues.data,\n      isFetching = queryValues.isFetching,\n      isLoading = queryValues.isLoading;\n\n  if (QuestLoading) {\n    return _react[\"default\"].createElement(_antd.Spin, {\n      size: \"large\",\n      className: \"custom-spinner\"\n    });\n  }\n\n  if (questError && !questData) {\n    return _react[\"default\"].createElement(_reactUtils.BrokenPage, {\n      errorMessage: t('Problem loading questionnaire')\n    });\n  }\n\n  if (!questData) {\n    return _react[\"default\"].createElement(_reactUtils.Resource404, null);\n  }\n\n  var columns = getColumns(t);\n  var dataSource = ((_data$records = data === null || data === void 0 ? void 0 : data.records) !== null && _data$records !== void 0 ? _data$records : []).map(_fhirResources.parseQuestionnaireResponse);\n  var tableProps = {\n    datasource: dataSource,\n    columns: columns,\n    loading: isFetching || isLoading,\n    pagination: tablePaginationProps\n  };\n  return _react[\"default\"].createElement(\"div\", {\n    className: \"content-section fhir-resource-container\"\n  }, _react[\"default\"].createElement(_fhirResources.Questionnaire, {\n    resource: questData\n  }), \",\", _react[\"default\"].createElement(_antd.Row, {\n    className: \"list-view\"\n  }, _react[\"default\"].createElement(_antd.Col, {\n    className: \"main-content\"\n  }, _react[\"default\"].createElement(_rbac.RbacCheck, {\n    permissions: ['QuestionnaireResponse.create']\n  }, _react[\"default\"].createElement(\"div\", {\n    className: \"main-content__header flex-right\"\n  }, _react[\"default\"].createElement(_antd.Button, {\n    type: \"primary\",\n    onClick: function onClick() {\n      return history.push(\"\".concat(_constants.QUEST_FORM_VIEW_URL, \"/\").concat(questData.id, \"/\").concat(_constants.questionnaireResourceType));\n    }\n  }, _react[\"default\"].createElement(_icons.PlusOutlined, null), t('Fill form')))), _react[\"default\"].createElement(_reactUtils.TableLayout, tableProps))));\n};\n\nexports.QuestionnaireResponseList = QuestionnaireResponseList;","map":null,"metadata":{},"sourceType":"script"}