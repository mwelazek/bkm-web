{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport PrivateRadioGroup from './private-radio-group';\nimport ValidationError from './../../molecules/form/validation-error';\nimport { Sublabel } from '../label/sublabel';\nimport './styles.scss';\nexport class RadioGroup extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.changeSelectedValue = this.changeSelectedValue.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.notifyValidated = this.notifyValidated.bind(this);\n    this.state = {\n      lastFocusedValue: props.selected,\n      valid: true,\n      validated: false\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.validateOnExternalUpdate && nextProps.selected !== this.props.selected && nextProps.selected) {\n      this.changeSelectedValue(nextProps.selected);\n    } else {\n      this.setState({\n        lastFocusedValue: nextProps.selected\n      });\n    }\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    if (prevState.valid !== this.state.valid) {\n      this.notifyValidated();\n    }\n  }\n\n  onChange(e) {\n    const element = document.getElementById(e.target.htmlFor);\n\n    if (element) {\n      e.target = element;\n\n      if (e.target.disabled) {\n        return;\n      }\n\n      this.changeSelectedValue(e.target.value, v => this.props.onChange(v));\n    }\n  }\n\n  onClick(e) {\n    this.changeSelectedValue(e.target.value, v => this.props.onChange(v));\n  }\n\n  changeSelectedValue(value, notify) {\n    if (value === this.state.lastFocusedValue) {\n      return;\n    }\n\n    if (notify) {\n      notify(value);\n    }\n\n    this.setState({\n      lastFocusedValue: value\n    });\n    this.validate(value);\n  }\n\n  validate(value) {\n    return new Promise(resolve => {\n      const validatedCB = () => {\n        resolve();\n      };\n\n      if (this.props.isRequired) {\n        if (this.props.validator) {\n          this.setState({\n            valid: this.props.validator(value)\n          }, validatedCB);\n          return;\n        }\n\n        const empty = value === null || value === undefined || value === '';\n        this.setState({\n          valid: !empty\n        }, validatedCB);\n      } else {\n        this.setState({\n          valid: true\n        }, validatedCB);\n      }\n    });\n  }\n\n  notifyValidated() {\n    if (this.props.onValidated) {\n      this.props.onValidated(this.state.valid);\n    }\n  }\n\n  validateField() {\n    this.setState({\n      validated: true\n    });\n    return this.validate(this.state.lastFocusedValue);\n  }\n\n  isValid() {\n    return this.state.valid;\n  }\n\n  renderErrorMessage() {\n    if (!this.props.getErrorMessage) {\n      return null;\n    }\n\n    const errorMessage = this.state.lastFocusedValue ? this.props.getErrorMessage(this.state.lastFocusedValue) : this.props.getErrorMessage('');\n    return React.createElement(ValidationError, {\n      isValid: this.state.valid,\n      error: errorMessage\n    });\n  }\n\n  renderLegend() {\n    if (!this.props.legend) {\n      return null;\n    }\n\n    return React.createElement(\"legend\", {\n      className: this.props.legendClassName ? this.props.legendClassName : ''\n    }, this.props.legend, this.props.isRequired && this.props.requiredLabel && this.props.showRequiredLabel ? React.createElement(\"em\", null, \" \", this.props.requiredLabel) : '', !this.props.isRequired && this.props.optionalLabel && this.props.showOptionalLabel ? React.createElement(\"em\", null, \" \", this.props.optionalLabel) : '', this.props.helpButton, this.props.subLabel && React.createElement(Sublabel, {\n      sublabelText: this.props.subLabel\n    }));\n  }\n\n  isRadioValid(value) {\n    if (this.props.isRequired && this.state.lastFocusedValue === null) {\n      return false;\n    }\n\n    if (value === this.state.lastFocusedValue && !this.state.valid) {\n      return false;\n    }\n\n    return true;\n  }\n\n  renderHelp() {\n    if (this.props.helpElement) {\n      return this.props.helpElement;\n    }\n  }\n\n  render() {\n    const {\n      id,\n      testId,\n      options,\n      wrapperClassName,\n      fieldsetClassName,\n      labelClassName,\n      selected,\n      isRequired,\n      isStyleBlue,\n      isStyleBoxed,\n      noFieldset,\n      ariaLabelledBy,\n      labelStringFetcher,\n      children\n    } = this.props;\n    const {\n      lastFocusedValue,\n      valid,\n      validated\n    } = this.state;\n    let i = 0;\n    const inputClasses = classNames({\n      'atom_radio__input--boxed': !isStyleBoxed\n    });\n    const inputFields = options.map(e => {\n      const inputId = id + '-hn-' + i++;\n      let label = e.label;\n      const labelClasses = classNames({\n        'atom_radio__label--checked': e.type === selected,\n        'atom_radio__label--boxed': isStyleBoxed\n      }, labelClassName);\n      const checkiconClasses = classNames({\n        'atom_radio__checkicon--lilla': !isStyleBlue,\n        'atom_radio__checkicon--blue': isStyleBlue,\n        'atom_radio__checkicon--boxed': isStyleBoxed,\n        'atom_radio__checkicon--checked': e.type === selected,\n        'atom_radio__checkicon--disabled': e.disabled\n      });\n      const textClasses = classNames({\n        'atom_radio__text--checked': e.type === selected\n      });\n\n      if (labelStringFetcher) {\n        label = labelStringFetcher(label);\n      }\n\n      const ariaInvalid = {};\n\n      if (validated) {\n        ariaInvalid['aria-invalid'] = !this.isRadioValid(e.type);\n      }\n\n      return React.createElement(\"div\", {\n        key: inputId,\n        className: `atom_radio`\n      }, React.createElement(\"input\", Object.assign({\n        id: inputId,\n        onChange: this.onChange,\n        onClick: this.onClick,\n        type: \"radio\",\n        checked: e.type === selected,\n        value: e.type,\n        \"aria-checked\": lastFocusedValue === e.type,\n        \"aria-label\": e.ariaLabel,\n        disabled: e.disabled ? e.disabled : false,\n        required: isRequired,\n        className: `atom_radio__input ${inputClasses}`\n      }, ariaInvalid)), React.createElement(\"label\", {\n        htmlFor: inputId,\n        onClick: this.onChange,\n        role: \"button\",\n        className: `atom_radio__label ${labelClasses}`\n      }, React.createElement(\"span\", {\n        tabIndex: -1,\n        className: `atom_radio__checkicon ${checkiconClasses}`\n      }, React.createElement(\"span\", {\n        tabIndex: -1,\n        className: `atom_radio__checkicon_innercicrcle`\n      })), React.createElement(\"span\", {\n        className: `atom_radio__text ${textClasses}`\n      }, label), e.content), e.hjelpetrigger);\n    });\n    const content = React.createElement(React.Fragment, null, React.createElement(PrivateRadioGroup, {\n      name: id,\n      value: selected,\n      classNameGroup: this.props.classNameGroup\n    }, React.createElement(React.Fragment, null, inputFields)), children);\n    return React.createElement(\"div\", {\n      className: `mol_validation ${!valid ? 'mol_validation--active' : ''} ${wrapperClassName ? wrapperClassName : ''}`,\n      id: `${id}-wrapper`,\n      \"data-testid\": testId\n    }, this.renderErrorMessage(), !noFieldset ? React.createElement(\"fieldset\", {\n      className: fieldsetClassName ? fieldsetClassName : ''\n    }, this.renderLegend(), this.renderHelp(), content) : React.createElement(\"div\", {\n      \"aria-labelledby\": ariaLabelledBy,\n      role: \"radiogroup\"\n    }, content));\n  }\n\n}\nRadioGroup.hnFormComponent = true;","map":null,"metadata":{},"sourceType":"module"}