{"ast":null,"code":"import { useReducer as t, useEffect as e, useRef as r, useState as o, useCallback as n } from \"react\";\n\nfunction s() {\n  return (s = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var r = arguments[e];\n\n      for (var o in r) Object.prototype.hasOwnProperty.call(r, o) && (t[o] = r[o]);\n    }\n\n    return t;\n  }).apply(this, arguments);\n}\n\nconst c = (t, e) => {\n  if (!t.includes(e)) throw new Error(`'${e}' not found. It must be provided in initialState as a property key.`);\n},\n      a = \"production\" !== process.env.NODE_ENV ? Symbol(\"UPDATE_STATE\") : Symbol(),\n      l = (l, u) => {\n  const i = Object.keys(u);\n  let p = u,\n      d = null;\n  const f = {};\n  i.forEach(t => {\n    f[t] = new Set();\n  });\n\n  const E = (t, e) => e.type === a ? e.r ? e.r(t) : e.e : l(t, e),\n        S = (t, e) => {\n    \"production\" !== process.env.NODE_ENV && c(i, t);\n\n    const r = r => {\n      return s({}, r, {\n        [t]: (o = r[t], n = e, \"function\" == typeof n ? n(o) : n)\n      });\n      var o, n;\n    };\n\n    if (d) d({\n      type: a,\n      r\n    });else {\n      p = r(p);\n      const e = p[t];\n      f[t].forEach(t => t(e));\n    }\n  },\n        b = (t, e) => {\n    i.forEach(r => {\n      const o = e[r];\n      t[r] !== o && f[r].forEach(t => t(o));\n    });\n  };\n\n  return {\n    useGlobalStateProvider: () => {\n      const [o, n] = t(E, p);\n      e(() => {\n        if (d) throw new Error(\"Only one global state provider is allowed\");\n        return d = n, n({\n          type: a,\n          e: p\n        }), () => {\n          d = null;\n        };\n      }, []);\n      const s = r(o);\n      b(s.current, o), s.current = o, e(() => {\n        p = o;\n      }, [o]);\n    },\n    useGlobalState: t => {\n      \"production\" !== process.env.NODE_ENV && c(i, t);\n      const [r, s] = o(p[t]);\n      return e(() => (f[t].add(s), s(p[t]), () => {\n        f[t].delete(s);\n      }), [t]), [r, n(e => S(t, e), [t])];\n    },\n    getGlobalState: t => (\"production\" !== process.env.NODE_ENV && c(i, t), p[t]),\n    setGlobalState: S,\n    getState: () => p,\n    setState: t => {\n      if (d) d({\n        type: a,\n        e: t\n      });else {\n        const e = p;\n        p = t, b(e, p);\n      }\n    },\n    dispatch: t => {\n      if (d) d(t);else {\n        const e = p;\n        p = l(p, t), b(e, p);\n      }\n      return t;\n    }\n  };\n},\n      u = t => l((t, e) => t, t),\n      i = function (t) {\n  let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : t(void 0, {\n    type: void 0\n  });\n  let r = arguments.length > 2 ? arguments[2] : undefined;\n  return r ? r(i)(t, e) : l(t, e);\n},\n      p = () => {\n  if (!window.__REDUX_DEVTOOLS_EXTENSION__) return t => t;\n\n  const {\n    before: t,\n    after: e\n  } = (() => {\n    let t, e;\n    return {\n      before: r => (o, n, c) => {\n        if (t = o, e = n, c) return c(r)(o, n);\n        const a = r(o, n);\n        return s({}, a, {\n          useGlobalState: t => {\n            const [e] = a.useGlobalState(t);\n            return [e, () => {\n              throw new Error(\"Update is not allowed when using DevTools\");\n            }];\n          }\n        });\n      },\n      after: r => (o, n, c) => {\n        if (c) return c(r)(o, n);\n        const a = r(t, e);\n        let l = s({}, o(n, {\n          type: \"@@redux/INIT\"\n        }), e);\n        const u = [];\n        return s({}, a, {\n          getState: () => l,\n          dispatch: t => (l = o(l, t), a.setState(l.computedStates[l.currentStateIndex].state), u.forEach(t => t()), t),\n          subscribe: t => (u.push(t), () => {\n            const e = u.indexOf(t);\n            u.splice(e, 1);\n          })\n        });\n      }\n    };\n  })();\n\n  return function () {\n    for (var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++) {\n      t[_key] = arguments[_key];\n    }\n\n    return t.reduce((t, e) => function () {\n      return t(e(...arguments));\n    });\n  }(t, window.__REDUX_DEVTOOLS_EXTENSION__(), e);\n};\n\nexport { u as createGlobalState, i as createStore, p as reduxDevToolsExt };","map":null,"metadata":{},"sourceType":"module"}