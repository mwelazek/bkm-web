{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { LanguageLocales } from '@helsenorge/core-utils/constants/languages';\nimport { CALENDAR_LABEL, CLOSE_DATEPICKER, FOCUS_STARTDATE, CLEAR_DATE, CLEAR_DATES, PICK_MONTH, PICK_MONTH_EN, PICK_YEAR, PICK_YEAR_EN, JUMP_TO_PREVMONTH, JUMP_TO_NEXTMONTH, KEYBOARD_SHORTCUTS, SHOW_KEYBOARD_SHORTCUTS_PANEL, HIDE_KEYBOARD_SHORTCUTS_PANEL, ENTER_KEY, LEFT_ARROW_RIGHT_ARROW, UP_ARROW_DOWN_ARROW, PAGE_UP_PAGE_DOWN, HOME_END, ESCAPE, QUESTION_MARK, OPEN_THIS_PANEL, SELECT_FOCUSED_DATE, MOVE_FOCUS_BY_ONE_DAY, MOVE_FOCUS_BY_ONE_WEEK, MOVE_FOCUS_BY_ONE_MONTH, MOVE_FOCUS_START_END_WEEK, RETURN_FOCUS_TO_INPUT, ERROR_INVALID_DATE, ERROR_INVALID_DATE_RANGE, ERROR_REQUIRED_DATE, ERROR_REQUIRED_DATE_RANGE, ERROR_INVALID_MIN_NIGHTS, ERROR_DATE_BEFORE_MIN, ERROR_DATE_AFTER_MAX } from '../../../constants/datetime';\nimport HeaderNavIcon from './custom-icons/header-nav-icon';\nimport InputIcon from './custom-icons/input-icon';\nimport toolkitstyles from './styles.module.scss';\nexport const DISPLAY_FORMAT = 'L';\nexport const ISO_FORMAT = 'YYYY-MM-DD';\nexport const ISO_MONTH_FORMAT = 'YYYY-MM';\nexport const START_DATE_ID = 'startDate';\nexport const END_DATE_ID = 'endDate';\nexport const HORIZONTAL_ORIENTATION = 'horizontal';\nexport const VERTICAL_ORIENTATION = 'vertical';\nexport const VERTICAL_SCROLLABLE = 'verticalScrollable';\nexport const NAV_POSITION_BOTTOM = 'navPositionBottom';\nexport const NAV_POSITION_TOP = 'navPositionTop';\nexport const ICON_BEFORE_POSITION = 'before';\nexport const ICON_AFTER_POSITION = 'after';\nexport const INFO_POSITION_TOP = 'top';\nexport const INFO_POSITION_BOTTOM = 'bottom';\nexport const INFO_POSITION_BEFORE = 'before';\nexport const INFO_POSITION_AFTER = 'after';\nexport const ANCHOR_LEFT = 'left';\nexport const ANCHOR_RIGHT = 'right';\nexport const OPEN_DOWN = 'down';\nexport const OPEN_UP = 'up';\nexport const DAY_SIZE = 39;\nexport const BLOCKED_MODIFIER = 'blocked';\nexport const WEEKDAYS = [0, 1, 2, 3, 4, 5, 6];\nexport const FANG_WIDTH_PX = 20;\nexport const FANG_HEIGHT_PX = 10;\nexport const DEFAULT_VERTICAL_SPACING = 22;\nexport const MODIFIER_KEY_NAMES = new Set(['Shift', 'Control', 'Alt', 'Meta']);\n\nconst chooseAvailableStartDate = _ref => {\n  let {\n    date\n  } = _ref;\n  return `Velg ${date} som startdato. Den er tilgjengelig.`;\n};\n\nconst chooseAvailableEndDate = _ref2 => {\n  let {\n    date\n  } = _ref2;\n  return `Velg ${date} som sluttdato. Den er tilgjengelig.`;\n};\n\nconst chooseAvailableDate = _ref3 => {\n  let {\n    date\n  } = _ref3;\n  return date;\n};\n\nconst dateIsUnavailable = _ref4 => {\n  let {\n    date\n  } = _ref4;\n  return `Ikke tilgjengelig. ${date}`;\n};\n\nconst dateIsSelected = _ref5 => {\n  let {\n    date\n  } = _ref5;\n  return `Valgt. ${date}`;\n};\n\nconst dateIsSelectedAsStartDate = _ref6 => {\n  let {\n    date\n  } = _ref6;\n  return `Valgt som startdato. ${date}`;\n};\n\nconst dateIsSelectedAsEndDate = _ref7 => {\n  let {\n    date\n  } = _ref7;\n  return `Valgt som sluttdato. ${date}`;\n};\n\nexport const Phrases = {\n  clearDate: CLEAR_DATE,\n  chooseAvailableDate,\n  clearDates: CLEAR_DATES,\n  calendarLabel: CALENDAR_LABEL,\n  closeDatePicker: CLOSE_DATEPICKER,\n  focusStartDate: FOCUS_STARTDATE,\n  jumpToPrevMonth: JUMP_TO_PREVMONTH,\n  jumpToNextMonth: JUMP_TO_NEXTMONTH,\n  keyboardShortcuts: KEYBOARD_SHORTCUTS,\n  showKeyboardShortcutsPanel: SHOW_KEYBOARD_SHORTCUTS_PANEL,\n  hideKeyboardShortcutsPanel: HIDE_KEYBOARD_SHORTCUTS_PANEL,\n  enterKey: ENTER_KEY,\n  leftArrowRightArrow: LEFT_ARROW_RIGHT_ARROW,\n  upArrowDownArrow: UP_ARROW_DOWN_ARROW,\n  pageUpPageDown: PAGE_UP_PAGE_DOWN,\n  homeEnd: HOME_END,\n  escape: ESCAPE,\n  questionMark: QUESTION_MARK,\n  openThisPanel: OPEN_THIS_PANEL,\n  selectFocusedDate: SELECT_FOCUSED_DATE,\n  moveFocusByOneDay: MOVE_FOCUS_BY_ONE_DAY,\n  moveFocusByOneWeek: MOVE_FOCUS_BY_ONE_WEEK,\n  moveFocusByOneMonth: MOVE_FOCUS_BY_ONE_MONTH,\n  moveFocustoStartAndEndOfWeek: MOVE_FOCUS_START_END_WEEK,\n  returnFocusToInput: RETURN_FOCUS_TO_INPUT,\n  chooseAvailableStartDate,\n  chooseAvailableEndDate,\n  dateIsUnavailable,\n  dateIsSelected,\n  dateIsSelectedAsStartDate,\n  dateIsSelectedAsEndDate\n};\nexport const ErrorPhrases = {\n  errorInvalidDate: ERROR_INVALID_DATE,\n  errorInvalidDateRange: ERROR_INVALID_DATE_RANGE,\n  errorRequiredDate: ERROR_REQUIRED_DATE,\n  errorRequiredDateRange: ERROR_REQUIRED_DATE_RANGE,\n  errorInvalidMinimumNights: ERROR_INVALID_MIN_NIGHTS,\n  errorBeforeMinDate: ERROR_DATE_BEFORE_MIN,\n  errorAfterMaxDate: ERROR_DATE_AFTER_MAX\n};\n\nconst isMomentLocaleConfig = locale => {\n  var _a, _b;\n\n  return !!((_b = (_a = locale) === null || _a === void 0 ? void 0 : _a._config) === null || _b === void 0 ? void 0 : _b.abbr);\n};\n\nexport const renderYearsOptions = (min, max) => {\n  const options = [];\n\n  for (let i = min; i <= max; i++) {\n    options.push(React.createElement(\"option\", {\n      value: i\n    }, i));\n  }\n\n  return options;\n};\nexport const renderMonthsPicker = (currentDate, onMonthSelect, locale, minimumDate, maximumDate, onChangeVisibleMonthHandler) => {\n  const localeString = isMomentLocaleConfig(locale) ? locale._config.abbr : LanguageLocales.NORWEGIAN;\n\n  if (minimumDate && maximumDate && moment(minimumDate).isSame(maximumDate, 'month')) {\n    return React.createElement(\"span\", {\n      className: toolkitstyles['datepicker__month-view']\n    }, locale.months(moment(currentDate, 'M')));\n  }\n\n  const options = [];\n\n  for (let i = 0; i <= 11; i++) {\n    options.push(React.createElement(\"option\", {\n      key: i,\n      value: i\n    }, locale.months(moment(i + 1, 'M'))));\n  }\n\n  return React.createElement(\"select\", {\n    className: toolkitstyles['datepicker__month-selector'],\n    value: currentDate.month(),\n    onChange: e => {\n      onMonthSelect(currentDate, e.target.value);\n      onChangeVisibleMonthHandler(moment(currentDate).set('month', parseInt(e.target.value)));\n    },\n    onKeyDown: e => {\n      e.stopPropagation();\n    },\n    \"aria-label\": localeString === LanguageLocales.ENGLISH.toLowerCase() ? PICK_MONTH_EN : PICK_MONTH\n  }, options);\n};\nexport const renderYearsPicker = (currentDate, onYearSelect, locale, minimumDate, maximumDate, onChangeVisibleMonthHandler) => {\n  const localeString = isMomentLocaleConfig(locale) ? locale._config.abbr : LanguageLocales.NORWEGIAN;\n  const minYear = minimumDate ? moment(minimumDate).year() : moment().year() - 100;\n  const maxYear = maximumDate ? moment(maximumDate).year() : moment().year() + 100;\n\n  if (maxYear - minYear <= 0) {\n    return React.createElement(\"span\", {\n      className: toolkitstyles['datepicker__year-view']\n    }, currentDate.year());\n  } else {\n    const yearsOptions = renderYearsOptions(minYear, maxYear);\n    return React.createElement(\"select\", {\n      className: toolkitstyles['datepicker__year-selector'],\n      value: currentDate.year(),\n      onChange: e => {\n        onYearSelect(currentDate, e.target.value);\n        onChangeVisibleMonthHandler(moment(currentDate).set('year', parseInt(e.target.value)));\n      },\n      onKeyDown: e => {\n        e.stopPropagation();\n      },\n      \"aria-label\": localeString === LanguageLocales.ENGLISH.toLowerCase() ? PICK_YEAR_EN : PICK_YEAR\n    }, yearsOptions);\n  }\n};\nexport const renderCalendarIcon = (onClick, className) => {\n  return React.createElement(InputIcon, {\n    className: className,\n    onClick: onClick\n  });\n};\nexport const renderChevronIcon = (direction, className, isDisabled) => {\n  return React.createElement(HeaderNavIcon, {\n    className: className,\n    direction: direction,\n    isDisabled: isDisabled\n  });\n};\nexport const renderMonthHeaderSimplified = (_ref8, locale) => {\n  let {\n    month\n  } = _ref8;\n  return `${locale.months(moment(month))} ${moment(month).year()}`;\n};\nexport const renderMonthHeader = (_ref9, locale, minimumDate, maximumDate, onChangeVisibleMonthHandler) => {\n  let {\n    month,\n    onMonthSelect,\n    onYearSelect\n  } = _ref9;\n  return React.createElement(\"div\", {\n    className: toolkitstyles['datepicker__month-year-selector']\n  }, renderMonthsPicker(month, onMonthSelect, locale, minimumDate, maximumDate, onChangeVisibleMonthHandler), renderYearsPicker(month, onYearSelect, locale, minimumDate, maximumDate, onChangeVisibleMonthHandler));\n};\nexport const notifyValidated = (id, value, isValid, errorString, onValidated, onError) => {\n  onValidated && onValidated(isValid);\n  onError && !isValid && onError(value, errorString, id);\n};\nexport const getCSSClasses = (baseClass, errorClass, hasValidation, hasErrors, className) => {\n  return classNames(baseClass, {\n    mol_validation: hasValidation,\n    'mol_validation--active': hasValidation && hasErrors\n  }, hasErrors ? errorClass : '', className ? className : '');\n};\nexport const getDateNOString = d => {\n  return d ? moment(d).format('DD.MM.YYYY') : '';\n};\nexport const getDefaultVisibleMonth = props => props.singleDateValue || props.startDateValue || props.endDateValue || props.initialDate || props.minimumDate || moment();","map":null,"metadata":{},"sourceType":"module"}