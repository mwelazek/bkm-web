{"ast":null,"code":"import * as React from 'react';\nimport * as ReactDOMServer from 'react-dom/server';\nimport { log } from '@helsenorge/core-utils/logger';\nimport './styles.scss';\n\nvar ValidationSummary = function ValidationSummary(_ref) {\n  var submitted = _ref.submitted,\n      components = _ref.components,\n      header = _ref.header;\n\n  if (submitted) {\n    var componentsWithErrors = sortComponentsWithErrorsByApperanceInDOM(getComponentsWithErrors(components));\n    var listItems = componentsWithErrors.map(function (el) {\n      var validationMessage;\n\n      if (el.props.label) {\n        validationMessage = el.props.label;\n      } else if (el.props.legend) {\n        validationMessage = el.props.legend;\n      }\n\n      var elementAsString = validationMessage;\n\n      if (React.isValidElement(validationMessage)) {\n        var element = validationMessage;\n        elementAsString = ReactDOMServer.renderToStaticMarkup(element);\n      }\n\n      var rawText = elementAsString != null ? elementAsString.replace(/<.*?>/g, ' ') : null;\n      validationMessage = React.createElement(\"span\", null, rawText);\n      return React.createElement(\"li\", {\n        key: el.props.id,\n        className: \"mol_validation-summary__listitem\"\n      }, React.createElement(\"a\", {\n        className: \"mol_validation-summary__link\",\n        href: \"#\".concat(el.props.id, \"-wrapper\")\n      }, validationMessage));\n    });\n\n    if (componentsWithErrors.length) {\n      return React.createElement(\"div\", {\n        className: \"mol_validation-summary\"\n      }, React.createElement(\"h3\", {\n        className: \"mol_validation-summary__header\"\n      }, header), React.createElement(\"ul\", {\n        className: \"mol_validation-summary__list\"\n      }, listItems));\n    }\n  }\n\n  return null;\n};\n\nfunction getComponentsWithErrors(components) {\n  var componentsWithErrors = components.filter(function (c) {\n    var componentToValidate = c && c.getWrappedInstance ? c.getWrappedInstance() : c;\n\n    if (componentToValidate && componentToValidate.props && componentToValidate.props.isValid && !componentToValidate.props.isValid() || componentToValidate && componentToValidate.isValid && !componentToValidate.isValid()) {\n      return true;\n    }\n  });\n  return componentsWithErrors;\n}\n\nfunction sortComponentsWithErrorsByApperanceInDOM(components) {\n  return components.sort(function (a, b) {\n    var el1 = document.getElementById(\"\".concat(a.props.id, \"-wrapper\"));\n    var el2 = document.getElementById(\"\".concat(b.props.id, \"-wrapper\"));\n\n    if (!el1 || !el2) {\n      var missingElement = !el1 ? \"\".concat(a.props.id, \"-wrapper\") : \"\".concat(b.props.id, \"-wrapper\");\n      log(\"Validation-summary: could not find element with id \".concat(missingElement));\n    }\n\n    if (el1 && el2) {\n      var compare = el1.compareDocumentPosition(el2);\n\n      if (compare === 2) {\n        return 1;\n      } else if (compare === 4) {\n        return -1;\n      }\n    }\n\n    return 0;\n  });\n}\n\nexport default ValidationSummary;","map":null,"metadata":{},"sourceType":"module"}