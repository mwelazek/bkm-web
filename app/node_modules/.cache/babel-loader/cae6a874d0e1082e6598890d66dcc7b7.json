{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.userGroupOptionsFilter = exports.submitForm = exports.postPutPractitioner = exports.getUserTypeCode = exports.getUserType = exports.getUserGroupsOptions = exports.getUserAndGroupsPayload = exports.getFormValues = exports.getCompositionOptions = exports.createOrEditPractitioners = exports.compositionUrlFilter = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _connectedReducerRegistry = require(\"@onaio/connected-reducer-registry\");\n\nvar _uuid = require(\"uuid\");\n\nvar _keycloakService = require(\"@opensrp/keycloak-service\");\n\nvar _notifications = require(\"@opensrp/notifications\");\n\nvar _constants = require(\"../../../constants\");\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar _2 = require(\".\");\n\nvar _lodash = require(\"lodash\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2[\"default\"])(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar getUserId = function getUserId(response) {\n  var _response$headers$get;\n\n  var locationStr = (_response$headers$get = response.headers.get('location')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.split('/');\n  var newUUID = locationStr[locationStr.length - 1];\n  return newUUID;\n};\n\nvar createOrEditPractitioners = function () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee(baseURL, payload) {\n    var isEditMode,\n        t,\n        practitionersService,\n        requestType,\n        successMessage,\n        _args = arguments;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            isEditMode = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n            t = _args.length > 3 ? _args[3] : undefined;\n            practitionersService = new _reactUtils.OpenSRPService(_constants.PRACTITIONER, baseURL);\n            requestType = 'create';\n            successMessage = t('Practitioner created successfully');\n\n            if (isEditMode) {\n              requestType = 'update';\n              successMessage = t('Practitioner updated successfully');\n            }\n\n            _context.next = 8;\n            return practitionersService[requestType](payload)[\"catch\"](function (_) {\n              if (isEditMode) {\n                (0, _notifications.sendErrorNotification)(t('There was a problem updating practitioner'));\n              } else {\n                (0, _notifications.sendErrorNotification)(t('There was a problem creating practitioner'));\n              }\n            }).then(function () {\n              return (0, _notifications.sendSuccessNotification)(successMessage);\n            });\n\n          case 8:\n            if (!isEditMode) {\n              _connectedReducerRegistry.history.push(\"\".concat(_constants.URL_USER_CREDENTIALS, \"/\").concat(payload.userId, \"/\").concat(payload.username));\n            }\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function createOrEditPractitioners(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.createOrEditPractitioners = createOrEditPractitioners;\n\nvar createEditKeycloakUser = function () {\n  var _ref2 = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee2(keycloakBaseURL, keycloakUserPayload, isEditMode, updateGroupsAndPractitionerCallback, t) {\n    var serve, _serve;\n\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!isEditMode) {\n              _context2.next = 5;\n              break;\n            }\n\n            serve = new _keycloakService.KeycloakService(\"\".concat(_constants.KEYCLOAK_URL_USERS, \"/\").concat(keycloakUserPayload.id), keycloakBaseURL);\n            return _context2.abrupt(\"return\", serve.update(keycloakUserPayload).then(function () {\n              (0, _notifications.sendSuccessNotification)(t('User edited successfully'));\n              updateGroupsAndPractitionerCallback(keycloakUserPayload.id)[\"catch\"](function () {\n                return (0, _notifications.sendErrorNotification)(t('There was a problem updating groups and practitioners'));\n              });\n            })[\"catch\"](function (error) {\n              throw error;\n            }));\n\n          case 5:\n            _serve = new _keycloakService.KeycloakService(_constants.KEYCLOAK_URL_USERS, keycloakBaseURL);\n            return _context2.abrupt(\"return\", _serve.create(keycloakUserPayload).then(function (res) {\n              (0, _notifications.sendSuccessNotification)(t('User created successfully'));\n              var keycloakUserId = getUserId(res);\n              updateGroupsAndPractitionerCallback(keycloakUserId)[\"catch\"](function () {\n                return (0, _notifications.sendErrorNotification)(t('There was a problem creating group and practitioner'));\n              });\n            })[\"catch\"](function (error) {\n              throw error;\n            }));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function createEditKeycloakUser(_x3, _x4, _x5, _x6, _x7) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar submitForm = function () {\n  var _ref3 = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee4(values, keycloakBaseURL, allUserGroups, previousUserGroupIds, practitionerUpdater, t) {\n    var _getUserAndGroupsPayl, isEditMode, keycloakUser, updateGroupsAndPractitioner;\n\n    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _getUserAndGroupsPayl = getUserAndGroupsPayload(values), isEditMode = _getUserAndGroupsPayl.isEditMode, keycloakUser = _getUserAndGroupsPayl.keycloakUser;\n\n            updateGroupsAndPractitioner = function () {\n              var _ref4 = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee3(keycloakUserId) {\n                var promises;\n                return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        promises = [];\n                        promises.push(practitionerUpdater(values, keycloakUserId, t));\n\n                        if (values.userGroups) {\n                          values.userGroups.forEach(function (groupId) {\n                            var userGroupValue = allUserGroups.find(function (group) {\n                              return group.id === groupId;\n                            });\n                            var serve = new _keycloakService.KeycloakService(\"\".concat(_constants.KEYCLOAK_URL_USERS, \"/\").concat(keycloakUserId).concat(_constants.KEYCLOAK_URL_USER_GROUPS, \"/\").concat(groupId), keycloakBaseURL);\n                            var promise = serve.update(userGroupValue);\n                            promises.push(promise);\n                          });\n                        }\n\n                        if (previousUserGroupIds) {\n                          previousUserGroupIds.forEach(function (groupId) {\n                            var _values$userGroups;\n\n                            if (!((_values$userGroups = values.userGroups) !== null && _values$userGroups !== void 0 && _values$userGroups.includes(groupId))) {\n                              var serve = new _keycloakService.KeycloakService(\"\".concat(_constants.KEYCLOAK_URL_USERS, \"/\").concat(keycloakUserId).concat(_constants.KEYCLOAK_URL_USER_GROUPS, \"/\").concat(groupId), keycloakBaseURL);\n                              var promise = serve[\"delete\"]();\n                              promises.push(promise);\n                            }\n                          });\n                        }\n\n                        _context3.next = 6;\n                        return Promise.allSettled(promises)[\"catch\"](function (error) {\n                          throw error;\n                        }).then(function () {\n                          (0, _notifications.sendSuccessNotification)(t('User Group edited successfully'));\n                        });\n\n                      case 6:\n                        return _context3.abrupt(\"return\", _context3.sent);\n\n                      case 7:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n\n              return function updateGroupsAndPractitioner(_x14) {\n                return _ref4.apply(this, arguments);\n              };\n            }();\n\n            _context4.next = 4;\n            return createEditKeycloakUser(keycloakBaseURL, keycloakUser, isEditMode, updateGroupsAndPractitioner, t)[\"catch\"](function () {\n              if (isEditMode) {\n                (0, _notifications.sendErrorNotification)(t('There was a problem updating the user profile'));\n              } else {\n                (0, _notifications.sendErrorNotification)(t('There was a problem creating the user'));\n              }\n            });\n\n          case 4:\n            if (isEditMode) {\n              _connectedReducerRegistry.history.push(_constants.URL_USER);\n            }\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function submitForm(_x8, _x9, _x10, _x11, _x12, _x13) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexports.submitForm = submitForm;\n\nvar getUserTypeCode = function getUserTypeCode(role) {\n  var _role$code;\n\n  return (_role$code = role.code) === null || _role$code === void 0 ? void 0 : _role$code.flatMap(function (code) {\n    var _code$coding;\n\n    return (_code$coding = code.coding) === null || _code$coding === void 0 ? void 0 : _code$coding.map(function (coding) {\n      return coding.code;\n    });\n  }).find(function (code) {\n    return code === _constants.SUPERVISOR_USER_TYPE_CODE || code === _constants.PRACTITIONER_USER_TYPE_CODE;\n  });\n};\n\nexports.getUserTypeCode = getUserTypeCode;\n\nvar getUserType = function getUserType(userTypeCode) {\n  switch (userTypeCode) {\n    case _constants.PRACTITIONER_USER_TYPE_CODE:\n      return _constants.PRACTITIONER;\n\n    case _constants.SUPERVISOR_USER_TYPE_CODE:\n      return _constants.SUPERVISOR;\n  }\n};\n\nexports.getUserType = getUserType;\n\nvar getFormValues = function getFormValues(keycloakUser, practitioner, userGroups, practitionerRole) {\n  var _keycloakUser$attribu;\n\n  if (!keycloakUser) {\n    return _2.defaultUserFormInitialValues;\n  }\n\n  var id = keycloakUser.id,\n      username = keycloakUser.username,\n      firstName = keycloakUser.firstName,\n      lastName = keycloakUser.lastName,\n      email = keycloakUser.email,\n      enabled = keycloakUser.enabled;\n\n  var _ref5 = (_keycloakUser$attribu = keycloakUser.attributes) !== null && _keycloakUser$attribu !== void 0 ? _keycloakUser$attribu : {},\n      contacts = _ref5.contact,\n      fhirCoreAppId = _ref5.fhir_core_app_id;\n\n  var _ref6 = practitioner !== null && practitioner !== void 0 ? practitioner : {},\n      active = _ref6.active;\n\n  var userType = 'practitioner';\n\n  if (practitionerRole) {\n    var userTypeCode = getUserTypeCode(practitionerRole);\n\n    if (userTypeCode) {\n      userType = getUserType(userTypeCode);\n    }\n  }\n\n  return {\n    id: id,\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    username: username,\n    enabled: enabled,\n    contact: contacts === null || contacts === void 0 ? void 0 : contacts[0],\n    active: active,\n    userType: userType,\n    practitioner: practitioner,\n    userGroups: userGroups === null || userGroups === void 0 ? void 0 : userGroups.map(function (tag) {\n      return tag.id;\n    }),\n    keycloakUser: keycloakUser,\n    practitionerRole: practitionerRole,\n    fhirCoreAppId: fhirCoreAppId === null || fhirCoreAppId === void 0 ? void 0 : fhirCoreAppId[0]\n  };\n};\n\nexports.getFormValues = getFormValues;\n\nvar getUserAndGroupsPayload = function getUserAndGroupsPayload(values) {\n  var _values$keycloakUser, _values$userGroups2;\n\n  var isEditMode = !!values.id;\n  var id = values.id,\n      username = values.username,\n      firstName = values.firstName,\n      lastName = values.lastName,\n      email = values.email,\n      enabled = values.enabled,\n      contact = values.contact,\n      fhirCoreAppId = values.fhirCoreAppId;\n\n  var preUserAttributes = _objectSpread(_objectSpread({}, contact ? {\n    contact: [contact]\n  } : {}), fhirCoreAppId ? {\n    fhir_core_app_id: [fhirCoreAppId]\n  } : {});\n\n  var cleanedAttributes = (0, _lodash.pickBy)(preUserAttributes, function (value) {\n    return value !== undefined && value !== null;\n  });\n\n  var keycloakUser = _objectSpread(_objectSpread(_objectSpread({}, (_values$keycloakUser = values.keycloakUser) !== null && _values$keycloakUser !== void 0 ? _values$keycloakUser : {}), {}, {\n    firstName: firstName,\n    id: isEditMode ? id : '',\n    lastName: lastName,\n    username: username\n  }, email ? {\n    email: email\n  } : {}), {}, {\n    enabled: enabled\n  }, (0, _lodash.some)(cleanedAttributes) ? {\n    attributes: cleanedAttributes\n  } : {});\n\n  return {\n    isEditMode: isEditMode,\n    keycloakUser: keycloakUser,\n    userGroups: (_values$userGroups2 = values.userGroups) !== null && _values$userGroups2 !== void 0 ? _values$userGroups2 : []\n  };\n};\n\nexports.getUserAndGroupsPayload = getUserAndGroupsPayload;\n\nvar getUserGroupsOptions = function getUserGroupsOptions(userGroups) {\n  return userGroups.map(function (userGroup) {\n    return {\n      value: userGroup.id,\n      label: userGroup.name\n    };\n  });\n};\n\nexports.getUserGroupsOptions = getUserGroupsOptions;\n\nvar userGroupOptionsFilter = function userGroupOptionsFilter(inputValue, option) {\n  return !!(option !== null && option !== void 0 && option.label.toLowerCase().includes(inputValue.toLowerCase()));\n};\n\nexports.userGroupOptionsFilter = userGroupOptionsFilter;\n\nvar postPutPractitioner = function postPutPractitioner(baseUrl) {\n  return function (values, userId, t) {\n    var _values$practitioner;\n\n    var id = values.id,\n        username = values.username,\n        firstName = values.firstName,\n        lastName = values.lastName,\n        enabled = values.enabled,\n        active = values.active;\n    var practitionerId = (0, _uuid.v4)();\n    var practitioner = {\n      active: true,\n      identifier: practitionerId,\n      name: \"\".concat(firstName, \" \").concat(lastName),\n      userId: userId,\n      username: username\n    };\n    var practitionerActive = enabled === false ? false : active === undefined ? false : active;\n    var practObj = values.practitioner;\n\n    if (practObj !== null && practObj !== void 0 && practObj.identifier) {\n      practitioner = _objectSpread(_objectSpread({}, practObj), {}, {\n        active: practitionerActive,\n        name: \"\".concat(firstName, \" \").concat(lastName),\n        userId: id,\n        username: username\n      });\n    }\n\n    var practitionerIsEditMode = !!((_values$practitioner = values.practitioner) !== null && _values$practitioner !== void 0 && _values$practitioner.identifier);\n    return createOrEditPractitioners(baseUrl, practitioner, practitionerIsEditMode, t);\n  };\n};\n\nexports.postPutPractitioner = postPutPractitioner;\n\nvar getCompositionOptions = function getCompositionOptions(composition) {\n  var title = composition.title,\n      identifier = composition.identifier;\n  if (!identifier) return;\n  var value = identifier.value;\n  return {\n    label: \"\".concat(title, \"(\").concat(value, \")\"),\n    value: value,\n    ref: composition\n  };\n};\n\nexports.getCompositionOptions = getCompositionOptions;\nvar compositionUrlFilter = {\n  type: \"\".concat(_constants.SNOMED_CODEABLE_SYSTEM, \"|\").concat(_constants.DEVICE_SETTING_CODEABLE_CODE),\n  _elements: 'identifier,title'\n};\nexports.compositionUrlFilter = compositionUrlFilter;","map":null,"metadata":{},"sourceType":"script"}