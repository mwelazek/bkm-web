{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst moment_1 = __importDefault(require(\"moment\"));\n\nconst react_redux_1 = require(\"react-redux\");\n\nconst validation_1 = __importDefault(require(\"@helsenorge/toolkit/components/molecules/form/validation\"));\n\nconst time_input_1 = __importDefault(require(\"@helsenorge/toolkit/components/molecules/time-input\"));\n\nconst date_core_1 = require(\"@helsenorge/toolkit/components/molecules/time-input/date-core\");\n\nconst datetime_1 = __importDefault(require(\"@helsenorge/toolkit/constants/datetime\"));\n\nconst newValue_1 = require(\"../../../actions/newValue\");\n\nconst extensions_1 = __importDefault(require(\"../../../constants/extensions\"));\n\nconst extension_1 = require(\"../../../util/extension\");\n\nconst index_1 = require(\"../../../util/index\");\n\nconst map_props_1 = require(\"../../../util/map-props\");\n\nconst with_common_functions_1 = __importDefault(require(\"../../with-common-functions\"));\n\nconst label_1 = __importDefault(require(\"../label\"));\n\nconst sublabel_1 = __importDefault(require(\"../sublabel\"));\n\nconst textview_1 = __importDefault(require(\"../textview\"));\n\nclass Time extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onTimeChange = this.onTimeChange.bind(this);\n    this.getValue = this.getValue.bind(this);\n  }\n\n  getValue() {\n    const {\n      value,\n      answer\n    } = this.props;\n\n    if (value) {\n      return value;\n    }\n\n    if (answer && answer.valueTime) {\n      return answer.valueTime;\n    }\n\n    if (answer && answer.valueDate) {\n      return this.getTimeStringFromDate(date_core_1.parseDate(String(answer.valueDate)));\n    }\n\n    if (answer && answer.valueDateTime) {\n      return this.getTimeStringFromDate(date_core_1.parseDate(String(answer.valueDateTime)));\n    }\n\n    return '';\n  }\n\n  getPDFValue() {\n    const value = this.getValue();\n\n    if (!value) {\n      let text = '';\n\n      if (this.props.resources && this.props.resources.ikkeBesvart) {\n        text = this.props.resources.ikkeBesvart;\n      }\n\n      return text;\n    }\n\n    return value;\n  }\n\n  getTimeStringFromDate(date) {\n    const momentDate = moment_1.default(date);\n    return `${momentDate.hours()}${datetime_1.default.TIME_SEPARATOR}${momentDate.minutes()}`;\n  }\n\n  getMaxHour() {\n    const maxTime = extension_1.getExtension(extensions_1.default.MAX_VALUE_URL, this.props.item);\n\n    if (!maxTime) {\n      return 23;\n    }\n\n    const maxTimeString = String(maxTime.valueTime);\n    const hoursString = (maxTimeString || '').split(datetime_1.default.TIME_SEPARATOR)[0];\n    return parseInt(hoursString, 10);\n  }\n\n  getMaxMinute() {\n    const maxTime = extension_1.getExtension(extensions_1.default.MAX_VALUE_URL, this.props.item);\n\n    if (!maxTime) {\n      return 59;\n    }\n\n    const maxTimeString = String(maxTime.valueTime);\n    const minuteString = (maxTimeString || '').split(datetime_1.default.TIME_SEPARATOR)[1];\n    return parseInt(minuteString, 10);\n  }\n\n  getMinHour() {\n    const minTime = extension_1.getExtension(extensions_1.default.MIN_VALUE_URL, this.props.item);\n\n    if (!minTime) {\n      return 0;\n    }\n\n    const minTimeString = String(minTime.valueTime);\n    const hoursString = (minTimeString || '').split(datetime_1.default.TIME_SEPARATOR)[0];\n    return parseInt(hoursString, 10);\n  }\n\n  getMinMinute() {\n    const minTime = extension_1.getExtension(extensions_1.default.MIN_VALUE_URL, this.props.item);\n\n    if (!minTime) {\n      return 0;\n    }\n\n    const minTimeString = String(minTime.valueTime);\n    const minuteString = (minTimeString || '').split(datetime_1.default.TIME_SEPARATOR)[1];\n    return parseInt(minuteString, 10);\n  }\n\n  dispatchNewTime(newTime) {\n    var _a;\n\n    const {\n      dispatch,\n      item,\n      path,\n      onAnswerChange\n    } = this.props;\n\n    if (dispatch) {\n      (_a = dispatch(newValue_1.newTimeValueAsync(path, newTime, item))) === null || _a === void 0 ? void 0 : _a.then(newState => onAnswerChange(newState, path, item, {\n        valueTime: newTime\n      }));\n    }\n  }\n\n  onTimeChange() {\n    let newTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    const validTime = this.makeValidTime(newTime);\n    this.dispatchNewTime(validTime);\n\n    if (this.props.promptLoginMessage) {\n      this.props.promptLoginMessage();\n    }\n  }\n\n  makeValidTime(time) {\n    const values = time.split(':');\n    const hours = values[0] || '00';\n    const minutes = values[1] || '00';\n    return this.addSeconds(`${hours.slice(-2)}:${minutes.slice(-2)}`);\n  }\n\n  addSeconds(time) {\n    if (time !== '' && time.split(':').length === 2) {\n      return time += ':00';\n    }\n\n    return time;\n  }\n\n  padNumber(value) {\n    if (value) {\n      const values = value.split(':');\n      let retVal = '';\n\n      for (let i = 0; i < values.length; i++) {\n        let timeString = '';\n\n        if (parseInt(values[i], 10) < 10 && values[i].length === 1) {\n          timeString += '0';\n        }\n\n        timeString += values[i];\n\n        if (i !== values.length - 1) {\n          timeString += ':';\n        }\n\n        retVal += timeString;\n      }\n\n      return retVal;\n    }\n\n    return '';\n  }\n\n  getResetButtonText() {\n    if (this.props.resources && this.props.resources.resetTime) {\n      return this.props.resources.resetTime;\n    }\n\n    return '';\n  }\n\n  shouldComponentUpdate(nextProps) {\n    var _a;\n\n    const responseItemHasChanged = this.props.responseItem !== nextProps.responseItem;\n    const helpItemHasChanged = this.props.isHelpOpen !== nextProps.isHelpOpen;\n    const resourcesHasChanged = JSON.stringify(this.props.resources) !== JSON.stringify(nextProps.resources);\n    const repeats = (_a = this.props.item.repeats) !== null && _a !== void 0 ? _a : false;\n    return responseItemHasChanged || helpItemHasChanged || resourcesHasChanged || repeats;\n  }\n\n  render() {\n    const {\n      pdf,\n      item,\n      renderFieldset,\n      id,\n      onRenderMarkdown\n    } = this.props;\n    const subLabelText = index_1.getSublabelText(this.props.item, this.props.onRenderMarkdown);\n\n    if (pdf || index_1.isReadOnly(this.props.item)) {\n      const value = this.getPDFValue();\n\n      if (renderFieldset) {\n        return React.createElement(textview_1.default, {\n          id: id,\n          item: this.props.item,\n          value: this.padNumber(value),\n          onRenderMarkdown: onRenderMarkdown\n        }, this.props.children);\n      } else if (value) {\n        return React.createElement(\"span\", null, ', kl. ', \" \", this.padNumber(value));\n      }\n\n      return React.createElement(\"span\", null);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"page_skjemautfyller__component page_skjemautfyller__component_time\"\n    }, React.createElement(validation_1.default, Object.assign({}, this.props), React.createElement(time_input_1.default, {\n      id: index_1.getId(id),\n      value: this.getValue(),\n      legend: React.createElement(label_1.default, {\n        item: this.props.item,\n        onRenderMarkdown: this.props.onRenderMarkdown\n      }),\n      subLabel: subLabelText ? React.createElement(sublabel_1.default, {\n        subLabelText: subLabelText\n      }) : undefined,\n      isRequired: index_1.isRequired(item),\n      maxHour: this.getMaxHour(),\n      minHour: this.getMinHour(),\n      maxMinute: this.getMaxMinute(),\n      minMinute: this.getMinMinute(),\n      onBlur: this.onTimeChange,\n      className: this.props.className + ' page_skjemautfyller__input',\n      renderFieldset: this.props.renderFieldset,\n      errorMessage: extension_1.getValidationTextExtension(item),\n      resetButton: {\n        resetButtonText: this.getResetButtonText(),\n        onReset: this.onTimeChange\n      },\n      helpButton: this.props.renderHelpButton(),\n      helpElement: this.props.renderHelpElement()\n    })), this.props.renderDeleteButton('page_skjemautfyller__deletebutton--margin-top'), this.props.repeatButton, this.props.children ? React.createElement(\"div\", {\n      className: \"nested-fieldset nested-fieldset--full-height\"\n    }, this.props.children) : null);\n  }\n\n}\n\nTime.defaultProps = {\n  renderFieldset: true,\n  path: []\n};\nconst withCommonFunctionsComponent = with_common_functions_1.default(Time);\nconst connectedComponent = react_redux_1.connect(map_props_1.mapStateToProps, map_props_1.mapDispatchToProps, map_props_1.mergeProps)(withCommonFunctionsComponent);\nexports.default = connectedComponent;","map":null,"metadata":{},"sourceType":"script"}