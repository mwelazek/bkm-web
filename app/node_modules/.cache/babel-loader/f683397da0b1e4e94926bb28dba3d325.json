{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { getOffsetLeft } from './util';\nimport Star from './Star';\nimport useRefs from './useRefs';\n\nfunction Rate(props, ref) {\n  var _classNames;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-rate' : _props$prefixCls,\n      className = props.className,\n      style = props.style,\n      defaultValue = props.defaultValue,\n      propValue = props.value,\n      _props$count = props.count,\n      count = _props$count === void 0 ? 5 : _props$count,\n      _props$allowHalf = props.allowHalf,\n      allowHalf = _props$allowHalf === void 0 ? false : _props$allowHalf,\n      _props$allowClear = props.allowClear,\n      allowClear = _props$allowClear === void 0 ? true : _props$allowClear,\n      _props$character = props.character,\n      character = _props$character === void 0 ? 'â˜…' : _props$character,\n      characterRender = props.characterRender,\n      disabled = props.disabled,\n      _props$direction = props.direction,\n      direction = _props$direction === void 0 ? 'ltr' : _props$direction,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n      autoFocus = props.autoFocus,\n      onHoverChange = props.onHoverChange,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onKeyDown = props.onKeyDown;\n\n  var _useRefs = useRefs(),\n      _useRefs2 = _slicedToArray(_useRefs, 2),\n      getStarRef = _useRefs2[0],\n      setStarRef = _useRefs2[1];\n\n  var rateRef = React.useRef(null); // ============================ Ref =============================\n\n  var triggerFocus = function triggerFocus() {\n    if (!disabled) {\n      var _rateRef$current;\n\n      (_rateRef$current = rateRef.current) === null || _rateRef$current === void 0 ? void 0 : _rateRef$current.focus();\n    }\n  };\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: triggerFocus,\n      blur: function blur() {\n        if (!disabled) {\n          var _rateRef$current2;\n\n          (_rateRef$current2 = rateRef.current) === null || _rateRef$current2 === void 0 ? void 0 : _rateRef$current2.blur();\n        }\n      }\n    };\n  }); // =========================== Value ============================\n\n  var _useMergedState = useMergedState(defaultValue || 0, {\n    value: propValue\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      value = _useMergedState2[0],\n      setValue = _useMergedState2[1];\n\n  var _useMergedState3 = useMergedState(null),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      cleanedValue = _useMergedState4[0],\n      setCleanedValue = _useMergedState4[1];\n\n  var getStarValue = function getStarValue(index, x) {\n    var reverse = direction === 'rtl';\n    var starValue = index + 1;\n\n    if (allowHalf) {\n      var starEle = findDOMNode(getStarRef(index));\n      var leftDis = getOffsetLeft(starEle);\n      var width = starEle.clientWidth;\n\n      if (reverse && x - leftDis > width / 2) {\n        starValue -= 0.5;\n      } else if (!reverse && x - leftDis < width / 2) {\n        starValue -= 0.5;\n      }\n    }\n\n    return starValue;\n  }; // >>>>> Change\n\n\n  var changeValue = function changeValue(nextValue) {\n    setValue(nextValue);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue);\n  }; // =========================== Focus ============================\n\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var onInternalFocus = function onInternalFocus() {\n    setFocused(true);\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus();\n  };\n\n  var onInternalBlur = function onInternalBlur() {\n    setFocused(false);\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur();\n  }; // =========================== Hover ============================\n\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      hoverValue = _React$useState4[0],\n      setHoverValue = _React$useState4[1];\n\n  var onHover = function onHover(event, index) {\n    var nextHoverValue = getStarValue(index, event.pageX);\n\n    if (nextHoverValue !== cleanedValue) {\n      setHoverValue(nextHoverValue);\n      setCleanedValue(null);\n    }\n\n    onHoverChange === null || onHoverChange === void 0 ? void 0 : onHoverChange(nextHoverValue);\n  };\n\n  var onMouseLeave = function onMouseLeave() {\n    setHoverValue(null);\n    setCleanedValue(null);\n    onHoverChange === null || onHoverChange === void 0 ? void 0 : onHoverChange(undefined);\n  }; // =========================== Click ============================\n\n\n  var onClick = function onClick(event, index) {\n    var newValue = getStarValue(index, event.pageX);\n    var isReset = false;\n\n    if (allowClear) {\n      isReset = newValue === value;\n    }\n\n    onMouseLeave();\n    changeValue(isReset ? 0 : newValue);\n    setCleanedValue(isReset ? newValue : null);\n  }; // ========================== Keyboard ==========================\n\n\n  var onInternalKeyDown = function onInternalKeyDown(event) {\n    var keyCode = event.keyCode;\n    var reverse = direction === 'rtl';\n    var nextValue = value;\n\n    if (keyCode === KeyCode.RIGHT && nextValue < count && !reverse) {\n      if (allowHalf) {\n        nextValue += 0.5;\n      } else {\n        nextValue += 1;\n      }\n\n      changeValue(nextValue);\n      event.preventDefault();\n    } else if (keyCode === KeyCode.LEFT && nextValue > 0 && !reverse) {\n      if (allowHalf) {\n        nextValue -= 0.5;\n      } else {\n        nextValue -= 1;\n      }\n\n      changeValue(nextValue);\n      event.preventDefault();\n    } else if (keyCode === KeyCode.RIGHT && nextValue > 0 && reverse) {\n      if (allowHalf) {\n        nextValue -= 0.5;\n      } else {\n        nextValue -= 1;\n      }\n\n      changeValue(nextValue);\n      event.preventDefault();\n    } else if (keyCode === KeyCode.LEFT && nextValue < count && reverse) {\n      if (allowHalf) {\n        nextValue += 0.5;\n      } else {\n        nextValue += 1;\n      }\n\n      changeValue(nextValue);\n      event.preventDefault();\n    }\n\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n  }; // =========================== Effect ===========================\n\n\n  React.useEffect(function () {\n    if (autoFocus && !disabled) {\n      triggerFocus();\n    }\n  }, []); // =========================== Render ===========================\n  // >>> Star\n\n  var starNodes = new Array(count).fill(0).map(function (_, index) {\n    return /*#__PURE__*/React.createElement(Star, {\n      ref: setStarRef(index),\n      index: index,\n      count: count,\n      disabled: disabled,\n      prefixCls: \"\".concat(prefixCls, \"-star\"),\n      allowHalf: allowHalf,\n      value: hoverValue === null ? value : hoverValue,\n      onClick: onClick,\n      onHover: onHover,\n      key: index,\n      character: character,\n      characterRender: characterRender,\n      focused: focused\n    });\n  }); // >>> Node\n\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames)),\n    style: style,\n    onMouseLeave: disabled ? null : onMouseLeave,\n    tabIndex: disabled ? -1 : tabIndex,\n    onFocus: disabled ? null : onInternalFocus,\n    onBlur: disabled ? null : onInternalBlur,\n    onKeyDown: disabled ? null : onInternalKeyDown,\n    ref: rateRef,\n    role: \"radiogroup\"\n  }, starNodes);\n}\n\nexport default /*#__PURE__*/React.forwardRef(Rate);","map":null,"metadata":{},"sourceType":"module"}