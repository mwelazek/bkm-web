{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst react_redux_1 = require(\"react-redux\");\n\nconst safe_textarea_1 = require(\"@helsenorge/toolkit/components/atoms/safe-textarea\");\n\nconst expandable_section_1 = require(\"@helsenorge/toolkit/components/molecules/expandable-section\");\n\nconst validation_1 = __importDefault(require(\"@helsenorge/toolkit/components/molecules/form/validation\"));\n\nconst debounce_1 = require(\"@helsenorge/core-utils/debounce\");\n\nconst newValue_1 = require(\"../../../actions/newValue\");\n\nconst index_1 = __importDefault(require(\"../../../constants/index\"));\n\nconst itemcontrol_1 = __importDefault(require(\"../../../constants/itemcontrol\"));\n\nconst extension_1 = require(\"../../../util/extension\");\n\nconst index_2 = require(\"../../../util/index\");\n\nconst map_props_1 = require(\"../../../util/map-props\");\n\nconst with_common_functions_1 = __importDefault(require(\"../../with-common-functions\"));\n\nconst sublabel_1 = __importDefault(require(\"../sublabel\"));\n\nconst textview_1 = __importDefault(require(\"../textview\"));\n\nclass Text extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleChange = event => {\n      var _a;\n\n      const {\n        dispatch,\n        promptLoginMessage,\n        path,\n        item,\n        onAnswerChange\n      } = this.props;\n      const value = event.target.value;\n\n      if (dispatch) {\n        (_a = dispatch(newValue_1.newStringValueAsync(this.props.path, value, this.props.item))) === null || _a === void 0 ? void 0 : _a.then(newState => onAnswerChange(newState, path, item, {\n          valueString: value\n        }));\n      }\n\n      if (promptLoginMessage) {\n        promptLoginMessage();\n      }\n    };\n\n    this.debouncedHandleChange = debounce_1.debounce(this.handleChange, 250, false);\n\n    this.validateText = value => {\n      return this.validateWithRegex(value) && index_2.validateText(value, this.props.validateScriptInjection);\n    };\n\n    this.validateWithRegex = value => {\n      const regexAsStr = extension_1.getRegexExtension(this.props.item);\n\n      if (regexAsStr && value) {\n        const regexp = new RegExp(regexAsStr);\n\n        if (!regexp.test(value.toString())) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.getValidationErrorMessage = value => {\n      return index_2.getTextValidationErrorMessage(value, this.props.validateScriptInjection, this.props.item, this.props.resources);\n    };\n\n    this.getRequiredErrorMessage = item => {\n      var _a;\n\n      return index_2.isRequired(item) ? (_a = this.props.resources) === null || _a === void 0 ? void 0 : _a.formRequiredErrorMessage : undefined;\n    };\n  }\n\n  showCounter() {\n    if (index_2.getMaxLength(this.props.item) || extension_1.getMinLengthExtensionValue(this.props.item)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  shouldComponentUpdate(nextProps) {\n    var _a;\n\n    const responseItemHasChanged = this.props.responseItem !== nextProps.responseItem;\n    const helpItemHasChanged = this.props.isHelpOpen !== nextProps.isHelpOpen;\n    const resourcesHasChanged = JSON.stringify(this.props.resources) !== JSON.stringify(nextProps.resources);\n    const repeats = (_a = this.props.item.repeats) !== null && _a !== void 0 ? _a : false;\n    return responseItemHasChanged || helpItemHasChanged || resourcesHasChanged || repeats;\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      id,\n      item,\n      answer,\n      pdf,\n      children,\n      resources,\n      onRenderMarkdown\n    } = _a,\n          other = __rest(_a, [\"id\", \"item\", \"answer\", \"pdf\", \"children\", \"resources\", \"onRenderMarkdown\"]);\n\n    const itemControls = extension_1.getItemControlExtensionValue(item);\n\n    if (itemControls && itemControls.some(itemControl => itemControl.code === itemcontrol_1.default.SIDEBAR)) {\n      return null;\n    }\n\n    if (itemControls && itemControls.some(itemControl => itemControl.code === itemcontrol_1.default.INLINE)) {\n      return React.createElement(\"div\", {\n        id: id,\n        className: \"page_skjemautfyller__component page_skjemautfyller__component_expandabletext\"\n      }, React.createElement(expandable_section_1.ExpandableSection, {\n        label: item.text,\n        inlineButton: true,\n        rightArrow: true\n      }, React.createElement(React.Fragment, null, children)));\n    }\n\n    if (itemControls && itemControls.some(itemControl => itemControl.code === itemcontrol_1.default.HIGHLIGHT)) {\n      return React.createElement(\"div\", {\n        id: id,\n        className: \"page_skjemautfyller__component page_skjemautfyller__component_highlight\",\n        dangerouslySetInnerHTML: {\n          __html: `${index_2.getText(item, onRenderMarkdown)}`\n        }\n      });\n    }\n\n    if (pdf || index_2.isReadOnly(item)) {\n      return React.createElement(textview_1.default, {\n        id: id,\n        item: item,\n        value: index_2.getPDFStringValue(answer),\n        onRenderMarkdown: onRenderMarkdown,\n        textClass: \"page_skjemautfyller__component_readonlytext\"\n      }, this.props.children);\n    }\n\n    const subLabelText = index_2.getSublabelText(item, onRenderMarkdown);\n    return React.createElement(\"div\", {\n      className: \"page_skjemautfyller__component page_skjemautfyller__component_text\"\n    }, React.createElement(validation_1.default, Object.assign({}, other), React.createElement(safe_textarea_1.SafeTextarea, {\n      id: index_2.getId(this.props.id),\n      rows: index_1.default.DEFAULT_TEXTAREA_HEIGHT,\n      value: index_2.getStringValue(answer),\n      isRequired: index_2.isRequired(item),\n      showLabel: true,\n      label: `${index_2.renderPrefix(item)} ${index_2.getText(item, onRenderMarkdown)}`,\n      subLabel: subLabelText ? React.createElement(sublabel_1.default, {\n        subLabelText: subLabelText\n      }) : undefined,\n      placeholder: extension_1.getPlaceholder(item),\n      maxlength: index_2.getMaxLength(item),\n      minlength: extension_1.getMinLengthExtensionValue(item),\n      counter: this.showCounter(),\n      onChange: event => {\n        event.persist();\n        this.debouncedHandleChange(event);\n      },\n      validator: this.validateText,\n      errorMessage: this.getValidationErrorMessage,\n      requiredErrorMessage: this.getRequiredErrorMessage(item),\n      helpButton: this.props.renderHelpButton(),\n      helpElement: this.props.renderHelpElement(),\n      validateOnExternalUpdate: true,\n      stringOverMaxLengthError: resources === null || resources === void 0 ? void 0 : resources.stringOverMaxLengthError,\n      maxLengthText: resources === null || resources === void 0 ? void 0 : resources.maxLengthText\n    })), this.props.renderDeleteButton('page_skjemautfyller__deletebutton--margin-top'), this.props.repeatButton, children ? React.createElement(\"div\", {\n      className: \"nested-fieldset nested-fieldset--full-height\"\n    }, children) : null);\n  }\n\n}\n\nexports.Text = Text;\nconst withCommonFunctionsComponent = with_common_functions_1.default(Text);\nconst connectedComponent = react_redux_1.connect(map_props_1.mapStateToProps, map_props_1.mapDispatchToProps, map_props_1.mergeProps)(withCommonFunctionsComponent);\nexports.default = connectedComponent;","map":null,"metadata":{},"sourceType":"script"}