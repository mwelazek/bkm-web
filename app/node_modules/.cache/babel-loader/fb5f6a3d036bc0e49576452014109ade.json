{"ast":null,"code":"import { ReloadOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\nimport { QRCodeCanvas } from 'qrcode.react';\nimport React, { useContext, useMemo } from 'react';\nimport warning from '../_util/warning';\nimport Button from '../button';\nimport { ConfigContext } from '../config-provider';\nimport { useLocale } from '../locale';\nimport Spin from '../spin';\nimport theme from '../theme';\nimport useStyle from './style/index';\nconst {\n  useToken\n} = theme;\n\nconst QRCode = props => {\n  const {\n    value,\n    icon = '',\n    size = 160,\n    iconSize = 40,\n    color = '#000',\n    errorLevel = 'M',\n    status = 'active',\n    bordered = true,\n    onRefresh,\n    style,\n    className,\n    rootClassName,\n    prefixCls: customizePrefixCls,\n    bgColor = 'transparent'\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = getPrefixCls('qrcode', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const {\n    token\n  } = useToken();\n  const qrCodeProps = useMemo(() => {\n    const imageSettings = {\n      src: icon,\n      x: undefined,\n      y: undefined,\n      height: iconSize,\n      width: iconSize,\n      excavate: true\n    };\n    return {\n      value,\n      size: size - (token.paddingSM + token.lineWidth) * 2,\n      level: errorLevel,\n      bgColor,\n      fgColor: color,\n      imageSettings: icon ? imageSettings : undefined\n    };\n  }, [errorLevel, color, icon, iconSize, size, value, bgColor]);\n  const [locale] = useLocale('QRCode');\n\n  if (!value) {\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'QRCode', 'need to receive `value` props') : void 0;\n    }\n\n    return null;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!(icon && errorLevel === 'L'), 'QRCode', 'ErrorLevel `L` is not recommended to be used with `icon`, for scanning result would be affected by low level.') : void 0;\n  }\n\n  const cls = classNames(prefixCls, className, rootClassName, hashId, {\n    [`${prefixCls}-borderless`]: !bordered\n  });\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    style: Object.assign(Object.assign({}, style), {\n      width: size,\n      height: size,\n      backgroundColor: bgColor\n    }),\n    className: cls\n  }, status !== 'active' && /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-mask`\n  }, status === 'loading' && /*#__PURE__*/React.createElement(Spin, null), status === 'expired' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    className: `${prefixCls}-expired`\n  }, locale === null || locale === void 0 ? void 0 : locale.expired), onRefresh && /*#__PURE__*/React.createElement(Button, {\n    type: \"link\",\n    icon: /*#__PURE__*/React.createElement(ReloadOutlined, null),\n    onClick: onRefresh\n  }, locale === null || locale === void 0 ? void 0 : locale.refresh))), /*#__PURE__*/React.createElement(QRCodeCanvas, Object.assign({}, qrCodeProps))));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  QRCode.displayName = 'QRCode';\n}\n\nexport default QRCode;","map":null,"metadata":{},"sourceType":"module"}