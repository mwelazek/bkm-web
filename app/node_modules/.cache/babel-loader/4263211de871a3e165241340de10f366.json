{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { AnalyticsId } from '@helsenorge/core-utils/adobe-analytics';\nimport Check from '../../../icons/Check';\nimport { Spinner } from '../../spinner';\nexport var SaveButtonSimple = /*#__PURE__*/function (_React$Component) {\n  _inherits(SaveButtonSimple, _React$Component);\n\n  var _super = _createSuper(SaveButtonSimple);\n\n  function SaveButtonSimple(props) {\n    var _this;\n\n    _classCallCheck(this, SaveButtonSimple);\n\n    _this = _super.call(this, props);\n    _this.timer = null;\n\n    _this.onClick = function () {\n      if (_this.props.onClick) {\n        _this.props.onClick();\n      }\n\n      _this.setState({\n        saved: false\n      });\n    };\n\n    _this.setSaved = function () {\n      _this.setState({\n        saved: true\n      });\n\n      if (_this.timer) {\n        clearTimeout(_this.timer);\n      }\n\n      _this.timer = setTimeout(function () {\n        _this.timer = null;\n\n        if (_this.props.updateSaved) {\n          _this.props.updateSaved(false);\n        } else {\n          _this.setState({\n            saved: false\n          });\n        }\n      }, 3000);\n    };\n\n    _this.state = {\n      saved: false,\n      width: 'auto'\n    };\n    _this.buttonRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(SaveButtonSimple, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var buttonwidth = this.buttonRef.current ? this.buttonRef.current.offsetWidth : 0;\n\n      if (buttonwidth < 100) {\n        buttonwidth = 100;\n      }\n\n      this.setState({\n        width: this.props.noWidth ? this.state.width : buttonwidth + 'px'\n      });\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(newProps) {\n      if (newProps.saved && !this.props.saved && !this.state.saved) {\n        this.setSaved();\n      }\n\n      if (!newProps.saved && this.state.saved) {\n        this.setState({\n          saved: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var buttonClasses = classNames('atom_actionbutton atom_actionbutton--primary atom_actionbutton--savebutton', {\n        'atom_actionbutton--saving': this.props.saving,\n        'atom_actionbutton--saved': this.state.saved\n      }, this.props.classNames);\n      var spinner = React.createElement(Spinner, {\n        inline: true,\n        white: true\n      });\n      var text = this.state.saved ? React.createElement(\"span\", {\n        className: \"atom_actionbutton__text atom_actionbutton__text--saved\"\n      }, this.props.savedText, \" \", React.createElement(Check, {\n        color: \"white\"\n      })) : React.createElement(\"span\", {\n        className: \"atom_actionbutton__text\"\n      }, this.props.saveText);\n      return React.createElement(\"button\", {\n        type: \"button\",\n        ref: this.props.forwardedRef ? this.props.forwardedRef : this.buttonRef,\n        className: buttonClasses,\n        onClick: this.onClick,\n        style: {\n          width: this.state.width\n        },\n        \"aria-busy\": this.props.saving,\n        \"aria-live\": \"polite\",\n        disabled: this.props.disabled,\n        \"data-testid\": this.props.testId,\n        \"data-analyticsid\": AnalyticsId.SaveButton\n      }, this.props.saving ? spinner : text);\n    }\n  }]);\n\n  return SaveButtonSimple;\n}(React.Component);\n\nfunction SaveButtonForwardRef(props, ref) {\n  return React.createElement(SaveButtonSimple, Object.assign({}, props, {\n    forwardedRef: ref\n  }));\n}\n\nexport var SaveButton = React.forwardRef(SaveButtonForwardRef);","map":null,"metadata":{},"sourceType":"module"}