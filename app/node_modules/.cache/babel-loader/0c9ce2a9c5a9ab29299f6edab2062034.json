{"ast":null,"code":"import * as React from 'react';\nimport moment from 'moment';\nimport classNames from 'classnames';\nimport { getDocumentActiveElement } from '@helsenorge/core-utils/focus-utils';\nimport { getHoursFromTimeString, getMinutesFromTimeString } from '@helsenorge/core-utils/date-utils';\nimport { TIME_SEPARATOR, ERROR_REQUIRED_TIME, ERROR_INVALID_TIME, ERROR_HOURS_AFTER_MAX, ERROR_MINUTES_AFTER_MAX, ERROR_HOURS_BEFORE_MIN, ERROR_MINUTES_BEFORE_MIN } from '../../../constants/datetime';\nimport Reset from '../../icons/Reset';\nimport { FunctionButton } from './../../atoms/buttons/function-button';\nimport SafeInputField from './../../atoms/safe-input-field';\nimport ValidationError from '../form/validation-error';\nimport './styles.scss';\nimport { Sublabel } from '../../atoms/label/sublabel';\nexport default class TimeInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChildValidated = () => {\n      if (!this.state.validated) {\n        return;\n      }\n\n      const newValue = this.areAllFieldsValid() && this.isTimeValid();\n      this.setState({\n        valid: !!newValue\n      }, () => {\n        this.notifyValidated();\n        this.updateErrorMessage();\n      });\n    };\n\n    this.onChangeValidator = () => {\n      return true;\n    };\n\n    this.handleHoursChange = event => {\n      const value = this.padNumber(event.target.value);\n      const minutes = getMinutesFromTimeString(String(this.state.timeString), TIME_SEPARATOR);\n      const newValue = `${value}${TIME_SEPARATOR}${minutes}`;\n      this.setState({\n        timeString: newValue\n      }, () => {\n        if (this.props.onTimeChange) {\n          this.props.onTimeChange(newValue);\n          return;\n        }\n\n        if (this.state.validated) {\n          this.validate();\n          this.notifyValidated();\n        }\n      });\n    };\n\n    this.handleMinutesChange = event => {\n      const value = this.padNumber(event.target.value);\n      const hours = getHoursFromTimeString(String(this.state.timeString), TIME_SEPARATOR);\n      const newValue = `${hours}${TIME_SEPARATOR}${value}`;\n      this.setState({\n        timeString: newValue\n      }, () => {\n        if (this.props.onTimeChange) {\n          this.props.onTimeChange(newValue);\n          return;\n        }\n\n        if (this.state.validated) {\n          this.validate();\n          this.notifyValidated();\n        }\n      });\n    };\n\n    this.onBlur = () => {\n      if (this.wrapperRef && this.wrapperRef.current) {\n        const wrapperNode = this.wrapperRef.current;\n        setTimeout(() => {\n          const focusedElement = getDocumentActiveElement(wrapperNode);\n\n          if (!wrapperNode.contains(focusedElement)) {\n            this.validate();\n            if (this.props.onBlur) this.props.onBlur(this.state.timeString);\n          }\n        }, 0);\n      }\n    };\n\n    this.onBlurTimeValidator = time => {\n      if (time === '') {\n        return true;\n      }\n\n      if (time > this.getMaxHour() || time < this.getMinHour()) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.onBlurMinutesValidator = minute => {\n      if (minute === '') {\n        return true;\n      }\n\n      if (minute > this.getMaxMinute() || minute < this.getMinMinute()) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.updateErrorMessage = () => {\n      var _a, _b;\n\n      const {\n        errorMessage,\n        minHour,\n        maxHour,\n        minMinute,\n        maxMinute,\n        isRequired,\n        resources\n      } = this.props;\n      let errorString = undefined;\n\n      if (this.state.valid) {\n        errorString = undefined;\n      } else {\n        const hours = this.state.timeString ? parseInt(getHoursFromTimeString(String(this.state.timeString), TIME_SEPARATOR), 10) : undefined;\n        const minutes = this.state.timeString ? parseInt(getMinutesFromTimeString(String(this.state.timeString), TIME_SEPARATOR), 10) : undefined;\n\n        if (errorMessage) {\n          errorString = typeof errorMessage === 'string' ? errorMessage : errorMessage(this.state.timeString);\n        } else if (isRequired && (!this.state.timeString || this.state.timeString === ':')) {\n          errorString = ((_a = resources === null || resources === void 0 ? void 0 : resources.errorResources) === null || _a === void 0 ? void 0 : _a.errorRequiredTime) || ERROR_REQUIRED_TIME;\n        } else if (hours && minHour && hours < minHour) {\n          errorString = `${ERROR_HOURS_BEFORE_MIN}: ${minHour}t`;\n        } else if (hours && maxHour && hours > maxHour) {\n          errorString = `${ERROR_HOURS_AFTER_MAX}: ${maxHour}t`;\n        } else if ((minutes || minutes === 0) && (minMinute || minMinute === 0) && minutes < minMinute) {\n          errorString = `${ERROR_MINUTES_BEFORE_MIN}: ${minMinute}min`;\n        } else if ((minutes || minutes === 0) && (maxMinute || maxMinute === 0) && minutes > maxMinute) {\n          errorString = `${ERROR_MINUTES_AFTER_MAX}: ${maxMinute}min`;\n        } else {\n          errorString = ((_b = resources === null || resources === void 0 ? void 0 : resources.errorResources) === null || _b === void 0 ? void 0 : _b.errorInvalidTime) || ERROR_INVALID_TIME;\n        }\n      }\n\n      this.setState({\n        errorString\n      });\n    };\n\n    this.renderLegend = () => {\n      const {\n        legend,\n        subLabel,\n        isRequired,\n        requiredLabel,\n        showRequiredLabel,\n        optionalLabel,\n        showOptionalLabel,\n        helpButton\n      } = this.props;\n      return React.createElement(\"legend\", null, React.createElement(\"span\", {\n        className: 'mol_timeinput__legend'\n      }, React.createElement(\"span\", {\n        className: 'mol_timeinput__legend__label'\n      }, legend), isRequired && requiredLabel && showRequiredLabel ? React.createElement(\"em\", {\n        className: 'mol_timeinput__legend__sublabel'\n      }, \" \", requiredLabel) : '', !isRequired && optionalLabel && showOptionalLabel ? React.createElement(\"em\", {\n        className: 'mol_timeinput__legend__sublabel'\n      }, \" \", optionalLabel) : '', helpButton, subLabel && React.createElement(Sublabel, {\n        sublabelText: subLabel\n      })));\n    };\n\n    this.resetFields = () => {\n      this.setState({\n        timeString: undefined\n      }, () => {\n        if (this.props.onTimeChange) {\n          this.props.onTimeChange(undefined);\n        }\n\n        if (this.props.resetButton && this.props.resetButton.onReset) {\n          this.props.resetButton.onReset();\n        }\n      });\n    };\n\n    this.renderResetButton = () => {\n      if (this.props.resetButton && this.props.resetButton.resetButtonText) {\n        return React.createElement(\"div\", {\n          className: \"mol_timeinput__resetbutton\",\n          onBlur: this.onBlur\n        }, React.createElement(FunctionButton, {\n          svgIcon: React.createElement(Reset, {\n            variant: 'error'\n          }),\n          onClick: this.resetFields\n        }, this.props.resetButton.resetButtonText));\n      }\n    };\n\n    this.renderHelp = () => {\n      if (this.props.helpElement) {\n        return this.props.helpElement;\n      }\n    };\n\n    this.state = {\n      valid: true,\n      validated: false,\n      timeString: this.getValue(props)\n    };\n    this.wrapperRef = React.createRef();\n    this.hoursInputRef = React.createRef();\n    this.minutesInputRef = React.createRef();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this.setState({\n      timeString: this.getValue(nextProps)\n    });\n  }\n\n  getValue(props) {\n    const {\n      value\n    } = props;\n\n    if (value) {\n      return value;\n    }\n  }\n\n  getTimeStringFromDate(date) {\n    const momentDate = moment(date);\n    return `${momentDate.hours()}${TIME_SEPARATOR}${momentDate.minutes()}`;\n  }\n\n  validateField(requiredValidation) {\n    this.setState({\n      validated: true\n    });\n\n    if (requiredValidation) {\n      return new Promise(resolve => {\n        this.validateWhenRequired(resolve);\n      });\n    } else {\n      return new Promise(resolve => {\n        this.validate(resolve);\n      });\n    }\n  }\n\n  validate(cb) {\n    const promises = [];\n\n    if (this.hoursInputRef.current) {\n      promises.push(this.hoursInputRef.current.validateField());\n    }\n\n    if (this.minutesInputRef.current) {\n      promises.push(this.minutesInputRef.current.validateField());\n    }\n\n    Promise.all(promises).then(() => {\n      const newValue = this.areAllFieldsValid() && this.isTimeValid();\n      this.setState({\n        valid: !!newValue\n      }, () => {\n        this.updateErrorMessage();\n        if (cb) cb();\n      });\n    });\n  }\n\n  validateWhenRequired(cb) {\n    const promises = [];\n\n    if (this.hoursInputRef.current) {\n      promises.push(this.hoursInputRef.current.validateField());\n    }\n\n    if (this.minutesInputRef.current) {\n      promises.push(this.minutesInputRef.current.validateField());\n    }\n\n    Promise.all(promises).then(() => {\n      const newValue = this.areAllFieldsValid();\n      this.setState({\n        valid: !!newValue\n      }, cb);\n    });\n  }\n\n  isValid() {\n    return this.state.valid;\n  }\n\n  areAllFieldsValid() {\n    return this.hoursInputRef.current && this.hoursInputRef.current.isValid() && this.minutesInputRef.current && this.minutesInputRef.current.isValid();\n  }\n\n  isTimeValid() {\n    const hoursAsString = getHoursFromTimeString(String(this.state.timeString), TIME_SEPARATOR);\n    const minutesAsString = getMinutesFromTimeString(String(this.state.timeString), TIME_SEPARATOR);\n    const isTimeStringEmpty = !this.state.timeString || this.state.timeString === '';\n\n    if (this.props.isRequired && isTimeStringEmpty) {\n      return false;\n    } else if (hoursAsString === '' || minutesAsString === '') {\n      return true;\n    }\n\n    try {\n      const hours = parseInt(hoursAsString, 10);\n      const minutes = parseInt(minutesAsString, 10);\n      const time = moment(new Date()).hours(hours).minutes(minutes);\n      const minTime = this.getMinTime();\n      const maxTime = this.getMaxTime();\n      return time.isBetween(minTime, maxTime) || time.isSame(minTime) || time.isSame(maxTime);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  getMaxTime() {\n    return moment(new Date()).hours(this.getMaxHour()).minutes(this.getMaxMinute()).toDate();\n  }\n\n  getMinTime() {\n    return moment(new Date()).hours(this.getMinHour()).minutes(this.getMinMinute()).toDate();\n  }\n\n  notifyValidated() {\n    if (!this.props.onValidated) {\n      return;\n    }\n\n    this.props.onValidated(this.state.valid);\n  }\n\n  getMinHour() {\n    return this.props.minHour ? this.props.minHour : 0;\n  }\n\n  getMaxHour() {\n    return this.props.maxHour ? this.props.maxHour : 23;\n  }\n\n  getMinMinute() {\n    return this.props.minMinute ? this.props.minMinute : 0;\n  }\n\n  getMaxMinute() {\n    return this.props.maxMinute ? this.props.maxMinute : 59;\n  }\n\n  getErrorString() {\n    return this.state.errorString;\n  }\n\n  padNumber(number) {\n    if (number && number.length < 2 && parseInt(number, 10) < 10) {\n      return '0' + number;\n    }\n\n    return number;\n  }\n\n  renderTimeInputfields() {\n    const {\n      id,\n      inputClassName,\n      isRequired,\n      readOnly,\n      resources\n    } = this.props;\n    const {\n      validated,\n      timeString\n    } = this.state;\n    const ariaInvalid = {};\n    if (validated) ariaInvalid['aria-invalid'] = !this.isValid();\n    const hours = this.padNumber(getHoursFromTimeString(String(timeString), TIME_SEPARATOR));\n    const minutes = this.padNumber(getMinutesFromTimeString(String(timeString), TIME_SEPARATOR));\n    return React.createElement(\"div\", {\n      ref: this.wrapperRef,\n      className: \"mol_timeinput__inputs\"\n    }, React.createElement(SafeInputField, Object.assign({\n      ref: this.hoursInputRef,\n      id: `${id}_hours`,\n      type: \"number\",\n      value: hours ? hours : undefined,\n      className: inputClassName,\n      ariaLabel: \"Timer\",\n      placeholder: resources === null || resources === void 0 ? void 0 : resources.placeholderHours,\n      maxLength: 2,\n      min: this.getMinHour(),\n      max: this.getMaxHour(),\n      onChange: this.handleHoursChange,\n      onValidated: this.onChildValidated,\n      onChangeValidator: this.onChangeValidator,\n      onBlur: this.onBlur,\n      validationErrorRenderer: React.createElement(\"span\", null),\n      isValidationHidden: true,\n      isRequired: isRequired,\n      readOnly: readOnly,\n      disabled: readOnly\n    }, ariaInvalid)), React.createElement(\"span\", {\n      className: \"mol_timeinput__separator\"\n    }, ':'), React.createElement(SafeInputField, Object.assign({\n      ref: this.minutesInputRef,\n      id: `${id}_minutes`,\n      type: \"number\",\n      value: minutes ? minutes : undefined,\n      className: inputClassName,\n      ariaLabel: \"Minutter\",\n      placeholder: resources === null || resources === void 0 ? void 0 : resources.placeholderMinutes,\n      maxLength: 2,\n      min: this.getMinMinute(),\n      max: this.getMaxMinute(),\n      onChange: this.handleMinutesChange,\n      onValidated: this.onChildValidated,\n      onChangeValidator: this.onChangeValidator,\n      onBlur: this.onBlur,\n      validationErrorRenderer: React.createElement(\"span\", null),\n      isValidationHidden: true,\n      isRequired: isRequired,\n      readOnly: readOnly,\n      disabled: readOnly\n    }, ariaInvalid)), this.renderResetButton(), this.props.children);\n  }\n\n  render() {\n    const {\n      valid,\n      errorString\n    } = this.state;\n    const {\n      id,\n      legend,\n      className,\n      renderFieldset,\n      isValidationHidden\n    } = this.props;\n    const wrapperClasses = classNames({\n      mol_validation: !isValidationHidden,\n      'mol_validation--active': !isValidationHidden && !valid\n    }, className);\n\n    if (!renderFieldset) {\n      return React.createElement(\"div\", {\n        className: wrapperClasses\n      }, this.renderTimeInputfields());\n    }\n\n    return React.createElement(\"div\", {\n      className: `mol_timeinput ${wrapperClasses}`,\n      id: `${id}-wrapper`\n    }, !isValidationHidden && !valid && errorString && React.createElement(ValidationError, {\n      isValid: valid,\n      error: errorString\n    }), React.createElement(\"fieldset\", null, legend && this.renderLegend(), this.renderHelp(), this.renderTimeInputfields()));\n  }\n\n}\nTimeInput.defaultProps = {\n  renderFieldset: true\n};","map":null,"metadata":{},"sourceType":"module"}