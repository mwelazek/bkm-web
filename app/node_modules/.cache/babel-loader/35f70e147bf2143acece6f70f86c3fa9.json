{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst NotificationPanel_1 = __importDefault(require(\"@helsenorge/designsystem-react/components/NotificationPanel\"));\n\nconst dropzone_1 = __importDefault(require(\"@helsenorge/toolkit/components/atoms/dropzone\"));\n\nconst validation_1 = require(\"@helsenorge/toolkit/components/atoms/dropzone/validation\");\n\nconst validation_2 = __importDefault(require(\"@helsenorge/toolkit/components/molecules/form/validation\"));\n\nconst constants_1 = __importStar(require(\"../../../constants\"));\n\nconst extension_1 = require(\"../../../util/extension\");\n\nconst attachmentHtml = _a => {\n  var {\n    id,\n    onUpload,\n    onDelete,\n    onOpen,\n    uploadButtonText,\n    label,\n    subLabel,\n    resources,\n    isRequired,\n    errorText,\n    uploadedFiles,\n    onRequestAttachmentLink,\n    attachmentErrorMessage,\n    helpButton,\n    helpElement,\n    multiple,\n    maxFiles,\n    attachmentMaxFileSize,\n    attachmentValidTypes,\n    minFiles,\n    item,\n    children\n  } = _a,\n      other = __rest(_a, [\"id\", \"onUpload\", \"onDelete\", \"onOpen\", \"uploadButtonText\", \"label\", \"subLabel\", \"resources\", \"isRequired\", \"errorText\", \"uploadedFiles\", \"onRequestAttachmentLink\", \"attachmentErrorMessage\", \"helpButton\", \"helpElement\", \"multiple\", \"maxFiles\", \"attachmentMaxFileSize\", \"attachmentValidTypes\", \"minFiles\", \"item\", \"children\"]);\n\n  const maxFilesize = attachmentMaxFileSize ? attachmentMaxFileSize : constants_1.default.MAX_FILE_SIZE;\n  const validFileTypes = attachmentValidTypes ? attachmentValidTypes : constants_1.VALID_FILE_TYPES;\n  const deleteText = resources ? resources.deleteAttachmentText : undefined;\n  return React.createElement(\"div\", {\n    className: \"page_skjemautfyller__component page_skjemautfyller__component_attachment\"\n  }, React.createElement(validation_2.default, Object.assign({}, other), React.createElement(dropzone_1.default, {\n    id: id,\n    label: label,\n    subLabel: subLabel,\n    onDrop: onUpload,\n    onDelete: onDelete,\n    onOpenFile: onOpen,\n    uploadButtonText: uploadButtonText,\n    uploadedFiles: uploadedFiles,\n    maxFileSize: maxFilesize,\n    validMimeTypes: validFileTypes,\n    dontShowHardcodedText: !!deleteText,\n    deleteText: deleteText,\n    supportedFileFormatsText: resources ? resources.supportedFileFormats : undefined,\n    errorMessage: file => {\n      return getErrorMessage(validFileTypes, maxFilesize, item, errorText, file, resources);\n    },\n    isRequired: isRequired,\n    wrapperClasses: \"page_skjemautfyller__input\",\n    onRequestLink: onRequestAttachmentLink,\n    helpButton: helpButton,\n    helpElement: helpElement,\n    shouldUploadMultiple: multiple,\n    maxFiles: maxFiles,\n    minFiles: minFiles,\n    chooseFilesText: resources === null || resources === void 0 ? void 0 : resources.chooseFilesText\n  })), attachmentErrorMessage && React.createElement(NotificationPanel_1.default, {\n    variant: \"alert\"\n  }, attachmentErrorMessage), children ? React.createElement(\"div\", {\n    className: \"nested-fieldset nested-fieldset--full-height\"\n  }, children) : null);\n};\n\nfunction getErrorMessage(validFileTypes, maxFileSize, item, genericErrorText, file, resources) {\n  if (file && resources) {\n    if (!validation_1.mimeTypeIsValid(file, validFileTypes)) {\n      return resources.validationFileType;\n    } else if (!validation_1.sizeIsValid(file, maxFileSize)) {\n      return resources.validationFileMax;\n    }\n  }\n\n  const validationText = extension_1.getValidationTextExtension(item);\n\n  if (validationText) {\n    return validationText;\n  }\n\n  if (genericErrorText) {\n    return genericErrorText;\n  }\n\n  return '';\n}\n\nexports.default = attachmentHtml;","map":null,"metadata":{},"sourceType":"script"}