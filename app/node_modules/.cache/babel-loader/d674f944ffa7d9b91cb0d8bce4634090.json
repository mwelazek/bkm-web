{"ast":null,"code":"import _defineProperty from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { debounce } from 'throttle-debounce';\nimport { cloneElement, isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style/index';\nvar SpinSizes = ['small', 'default', 'large']; // Render indicator\n\nvar defaultIndicator = null;\n\nfunction renderIndicator(prefixCls, props) {\n  var indicator = props.indicator;\n  var dotClassName = \"\".concat(prefixCls, \"-dot\"); // should not be render default indicator when indicator value is null\n\n  if (indicator === null) {\n    return null;\n  }\n\n  if (isValidElement(indicator)) {\n    return cloneElement(indicator, {\n      className: classNames(indicator.props.className, dotClassName)\n    });\n  }\n\n  if (isValidElement(defaultIndicator)) {\n    return cloneElement(defaultIndicator, {\n      className: classNames(defaultIndicator.props.className, dotClassName)\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames(dotClassName, \"\".concat(prefixCls, \"-dot-spin\"))\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"\".concat(prefixCls, \"-dot-item\")\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"\".concat(prefixCls, \"-dot-item\")\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"\".concat(prefixCls, \"-dot-item\")\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"\".concat(prefixCls, \"-dot-item\")\n  }));\n}\n\nfunction shouldDelay(spinning, delay) {\n  return !!spinning && !!delay && !isNaN(Number(delay));\n}\n\nvar Spin = function Spin(props) {\n  var _classNames;\n\n  var prefixCls = props.spinPrefixCls,\n      _props$spinning = props.spinning,\n      customSpinning = _props$spinning === void 0 ? true : _props$spinning,\n      _props$delay = props.delay,\n      delay = _props$delay === void 0 ? 0 : _props$delay,\n      className = props.className,\n      rootClassName = props.rootClassName,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'default' : _props$size,\n      tip = props.tip,\n      wrapperClassName = props.wrapperClassName,\n      style = props.style,\n      children = props.children,\n      hashId = props.hashId,\n      restProps = __rest(props, [\"spinPrefixCls\", \"spinning\", \"delay\", \"className\", \"rootClassName\", \"size\", \"tip\", \"wrapperClassName\", \"style\", \"children\", \"hashId\"]);\n\n  var _React$useState = React.useState(function () {\n    return customSpinning && !shouldDelay(customSpinning, delay);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      spinning = _React$useState2[0],\n      setSpinning = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (customSpinning) {\n      var showSpinning = debounce(delay, function () {\n        setSpinning(true);\n      });\n      showSpinning();\n      return function () {\n        var _a;\n\n        (_a = showSpinning === null || showSpinning === void 0 ? void 0 : showSpinning.cancel) === null || _a === void 0 ? void 0 : _a.call(showSpinning);\n      };\n    }\n\n    setSpinning(false);\n  }, [delay, customSpinning]);\n  var isNestedPattern = React.useMemo(function () {\n    return typeof children !== 'undefined';\n  }, [children]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!tip || isNestedPattern, 'Spin', '`tip` only work in nest pattern.') : void 0;\n  }\n\n  var _React$useContext = React.useContext(ConfigContext),\n      direction = _React$useContext.direction;\n\n  var spinClassName = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-sm\"), size === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-lg\"), size === 'large'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-spinning\"), spinning), _defineProperty(_classNames, \"\".concat(prefixCls, \"-show-text\"), !!tip), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames), className, rootClassName, hashId);\n  var containerClassName = classNames(\"\".concat(prefixCls, \"-container\"), _defineProperty({}, \"\".concat(prefixCls, \"-blur\"), spinning)); // fix https://fb.me/react-unknown-prop\n\n  var divProps = omit(restProps, ['indicator', 'prefixCls']);\n  var spinElement = /*#__PURE__*/React.createElement(\"div\", Object.assign({}, divProps, {\n    style: style,\n    className: spinClassName,\n    \"aria-live\": \"polite\",\n    \"aria-busy\": spinning\n  }), renderIndicator(prefixCls, props), tip && isNestedPattern ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-text\")\n  }, tip) : null);\n\n  if (isNestedPattern) {\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, divProps, {\n      className: classNames(\"\".concat(prefixCls, \"-nested-loading\"), wrapperClassName, hashId)\n    }), spinning && /*#__PURE__*/React.createElement(\"div\", {\n      key: \"loading\"\n    }, spinElement), /*#__PURE__*/React.createElement(\"div\", {\n      className: containerClassName,\n      key: \"container\"\n    }, children));\n  }\n\n  return spinElement;\n};\n\nvar SpinFC = function SpinFC(props) {\n  var customizePrefixCls = props.prefixCls;\n\n  var _React$useContext2 = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext2.getPrefixCls;\n\n  var spinPrefixCls = getPrefixCls('spin', customizePrefixCls);\n\n  var _useStyle = useStyle(spinPrefixCls),\n      _useStyle2 = _slicedToArray(_useStyle, 2),\n      wrapSSR = _useStyle2[0],\n      hashId = _useStyle2[1];\n\n  var spinClassProps = Object.assign(Object.assign({}, props), {\n    spinPrefixCls: spinPrefixCls,\n    hashId: hashId\n  });\n  return wrapSSR( /*#__PURE__*/React.createElement(Spin, Object.assign({}, spinClassProps)));\n};\n\nSpinFC.setDefaultIndicator = function (indicator) {\n  defaultIndicator = indicator;\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  SpinFC.displayName = 'Spin';\n}\n\nexport default SpinFC;","map":null,"metadata":{},"sourceType":"module"}