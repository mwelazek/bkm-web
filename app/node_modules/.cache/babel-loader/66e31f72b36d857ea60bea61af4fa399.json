{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst newValue_1 = require(\"../actions/newValue\");\n\nconst itemcontrol_1 = __importDefault(require(\"../constants/itemcontrol\"));\n\nconst choice_1 = require(\"./choice\");\n\nconst skjemautfyller_core_1 = require(\"./skjemautfyller-core\");\n\nclass ItemAndPath {\n  constructor(item, path) {\n    this.item = item;\n    this.path = path;\n  }\n\n}\n\nclass ActionRequester {\n  constructor(questionnaire, questionnaireResponse) {\n    this.actions = [];\n    this.questionnaire = questionnaire;\n    this.questionnaireResponse = questionnaireResponse;\n  }\n\n  addIntegerAnswer(linkId, value) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const itemAndPath = this.getItemAndPath(linkId, index);\n\n    if (itemAndPath) {\n      this.actions.push(newValue_1.newIntegerValue(itemAndPath.path, value, itemAndPath.item));\n    }\n  }\n\n  clearIntegerAnswer(linkId) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.addIntegerAnswer(linkId, Number.NaN, index);\n  }\n\n  addDecimalAnswer(linkId, value) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const itemAndPath = this.getItemAndPath(linkId, index);\n\n    if (itemAndPath) {\n      this.actions.push(newValue_1.newDecimalValue(itemAndPath.path, value, itemAndPath.item));\n    }\n  }\n\n  clearDecimalAnswer(linkId) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.addDecimalAnswer(linkId, Number.NaN, index);\n  }\n\n  addChoiceAnswer(linkId, value) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const itemAndPath = this.getItemAndPath(linkId, index);\n\n    if (itemAndPath) {\n      this.actions.push(newValue_1.newCodingValue(itemAndPath.path, value, itemAndPath.item, this.isCheckbox(itemAndPath.item)));\n    }\n  }\n\n  removeChoiceAnswer(linkId, value) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const itemAndPath = this.getItemAndPath(linkId, index);\n\n    if (itemAndPath && this.isCheckbox(itemAndPath.item)) {\n      this.actions.push(newValue_1.removeCodingValue(itemAndPath.path, value, itemAndPath.item));\n    }\n  }\n\n  addOpenChoiceAnswer(linkId, value) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const itemAndPath = this.getItemAndPath(linkId, index);\n\n    if (itemAndPath) {\n      if (typeof value === 'string') {\n        this.actions.push(newValue_1.newCodingStringValue(itemAndPath.path, value, itemAndPath.item));\n      } else {\n        this.actions.push(newValue_1.newCodingValue(itemAndPath.path, value, itemAndPath.item, this.isCheckbox(itemAndPath.item)));\n      }\n    }\n  }\n\n  removeOpenChoiceAnswer(linkId, value) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const itemAndPath = this.getItemAndPath(linkId, index);\n\n    if (itemAndPath) {\n      if (typeof value === 'string') {\n        this.actions.push(newValue_1.removeCodingStringValue(itemAndPath.path, itemAndPath.item));\n      } else if (this.isCheckbox(itemAndPath.item)) {\n        this.actions.push(newValue_1.removeCodingValue(itemAndPath.path, value, itemAndPath.item));\n      }\n    }\n  }\n\n  addBooleanAnswer(linkId, value) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const itemAndPath = this.getItemAndPath(linkId, index);\n\n    if (itemAndPath) {\n      this.actions.push(newValue_1.newBooleanValue(itemAndPath.path, value, itemAndPath.item));\n    }\n  }\n\n  clearBooleanAnswer(linkId) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.addBooleanAnswer(linkId, false, index);\n  }\n\n  addDateAnswer(linkId, value) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const itemAndPath = this.getItemAndPath(linkId, index);\n\n    if (itemAndPath) {\n      this.actions.push(newValue_1.newDateValue(itemAndPath.path, value, itemAndPath.item));\n    }\n  }\n\n  clearDateAnswer(linkId) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.addDateAnswer(linkId, '', index);\n  }\n\n  addTimeAnswer(linkId, value) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const itemAndPath = this.getItemAndPath(linkId, index);\n\n    if (itemAndPath) {\n      this.actions.push(newValue_1.newTimeValue(itemAndPath.path, value, itemAndPath.item));\n    }\n  }\n\n  clearTimeAnswer(linkId) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.addTimeAnswer(linkId, '', index);\n  }\n\n  addDateTimeAnswer(linkId, value) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const itemAndPath = this.getItemAndPath(linkId, index);\n\n    if (itemAndPath) {\n      this.actions.push(newValue_1.newDateTimeValue(itemAndPath.path, value, itemAndPath.item));\n    }\n  }\n\n  clearDateTimeAnswer(linkId) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.addDateTimeAnswer(linkId, '', index);\n  }\n\n  addQuantityAnswer(linkId, value) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const itemAndPath = this.getItemAndPath(linkId, index);\n\n    if (itemAndPath) {\n      this.actions.push(newValue_1.newQuantityValue(itemAndPath.path, value, itemAndPath.item));\n    }\n  }\n\n  clearQuantityAnswer(linkId) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.addQuantityAnswer(linkId, {}, index);\n  }\n\n  addStringAnswer(linkId, value) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const itemAndPath = this.getItemAndPath(linkId, index);\n\n    if (itemAndPath) {\n      this.actions.push(newValue_1.newStringValue(itemAndPath.path, value, itemAndPath.item));\n    }\n  }\n\n  clearStringAnswer(linkId) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.addStringAnswer(linkId, '', index);\n  }\n\n  getActions() {\n    return this.actions;\n  }\n\n  getItemAndPath(linkId, index) {\n    const item = skjemautfyller_core_1.getQuestionnaireDefinitionItem(linkId, this.questionnaire.item);\n    const itemsAndPaths = skjemautfyller_core_1.getResponseItemAndPathWithLinkId(linkId, this.questionnaireResponse);\n\n    if (!item || itemsAndPaths.length - 1 < index || !itemsAndPaths[index].path) {\n      return;\n    }\n\n    return new ItemAndPath(item, itemsAndPaths[index].path);\n  }\n\n  isCheckbox(item) {\n    return choice_1.getItemControlValue(item) === itemcontrol_1.default.CHECKBOX;\n  }\n\n}\n\nexports.ActionRequester = ActionRequester;","map":null,"metadata":{},"sourceType":"script"}