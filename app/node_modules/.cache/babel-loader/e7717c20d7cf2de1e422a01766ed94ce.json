{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport ReactAutosuggest from 'react-autosuggest';\nimport { Label } from './../../atoms/label';\nimport ValidationError from '../form/validation-error';\nimport autosuggesttheme from './theme.module.scss';\nimport { isEmpty, hasInvalidCharacters } from '@helsenorge/core-utils/string-utils';\n\nvar Autosuggest = /*#__PURE__*/function (_React$Component) {\n  _inherits(Autosuggest, _React$Component);\n\n  var _super = _createSuper(Autosuggest);\n\n  function Autosuggest(props) {\n    var _this;\n\n    _classCallCheck(this, Autosuggest);\n\n    _this = _super.call(this, props);\n\n    _this.renderSuggestion = function (suggestion) {\n      return React.createElement(\"span\", null, suggestion.label, suggestion.optionalLabel && React.createElement(\"em\", null, \" \", suggestion.optionalLabel));\n    };\n\n    _this.getSuggestionValue = function (suggestion) {\n      return suggestion.label ? suggestion.label : '';\n    };\n\n    _this.onChange = function (e, params) {\n      var incomingValue = params.newValue;\n\n      if (!_this.props.noValidation && !_this.validate(incomingValue)) {\n        _this.setState({\n          isValid: false\n        });\n      } else {\n        _this.setState({\n          isValid: true\n        });\n      }\n\n      _this.props.onChange(e, params);\n    };\n\n    _this.onBlur = function (e, params) {\n      if (!_this.props.noValidation) {\n        _this.setState({\n          validated: true\n        });\n      }\n\n      if (_this.props.onBlur) _this.props.onBlur(e, params);\n    };\n\n    _this.onKeyDown = function (e) {\n      if (e.keyCode === 13) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n\n      if (_this.props.onKeyDown) _this.props.onKeyDown(e);\n    };\n\n    _this.isValid = function () {\n      return _this.state.isValid;\n    };\n\n    _this.validate = function (incomingValue) {\n      var _this$props = _this.props,\n          isRequired = _this$props.isRequired,\n          minLength = _this$props.minLength,\n          maxLength = _this$props.maxLength,\n          noCharacterValidation = _this$props.noCharacterValidation;\n\n      if (isRequired && isEmpty(incomingValue)) {\n        return false;\n      }\n\n      if (!isRequired && isEmpty(incomingValue)) {\n        return true;\n      }\n\n      if (!noCharacterValidation) {\n        var valueLength = incomingValue.length;\n\n        if (!isEmpty(incomingValue) && hasInvalidCharacters(incomingValue)) {\n          return false;\n        }\n\n        if (!isEmpty(incomingValue) && minLength && valueLength < minLength) {\n          return false;\n        }\n\n        if (!isEmpty(incomingValue) && maxLength && valueLength > maxLength) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    _this.validateField = function () {\n      var _this$props2 = _this.props,\n          value = _this$props2.value,\n          onSubmitValidator = _this$props2.onSubmitValidator;\n      return new Promise(function (resolve) {\n        if (onSubmitValidator) {\n          var isValid = onSubmitValidator() && _this.validate(value);\n\n          _this.setState({\n            isValid: isValid,\n            validated: true\n          });\n\n          resolve();\n        } else if (!_this.validate(value)) {\n          _this.setState({\n            isValid: false,\n            validated: true\n          });\n\n          resolve();\n        } else {\n          resolve();\n        }\n      });\n    };\n\n    _this.renderErrorMessage = function () {\n      var _this$props3 = _this.props,\n          noValidation = _this$props3.noValidation,\n          errorMessage = _this$props3.errorMessage;\n      var _this$state = _this.state,\n          isValid = _this$state.isValid,\n          validated = _this$state.validated;\n\n      if (!noValidation && validated && errorMessage) {\n        return React.createElement(ValidationError, {\n          isValid: isValid,\n          error: errorMessage\n        });\n      }\n    };\n\n    _this.autosuggestRef = React.createRef();\n    _this.state = {\n      isValid: true,\n      validated: false\n    };\n    return _this;\n  }\n\n  _createClass(Autosuggest, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          id = _this$props4.id,\n          value = _this$props4.value,\n          suggestions = _this$props4.suggestions,\n          className = _this$props4.className,\n          label = _this$props4.label,\n          subLabel = _this$props4.subLabel,\n          placeholder = _this$props4.placeholder,\n          type = _this$props4.type,\n          noValidation = _this$props4.noValidation,\n          isRequired = _this$props4.isRequired,\n          ariaLabel = _this$props4.ariaLabel,\n          helpButton = _this$props4.helpButton,\n          helpElement = _this$props4.helpElement,\n          onSuggestionSelected = _this$props4.onSuggestionSelected,\n          onSuggestionsFetchRequested = _this$props4.onSuggestionsFetchRequested,\n          onSuggestionsClearRequested = _this$props4.onSuggestionsClearRequested,\n          renderSuggestion = _this$props4.renderSuggestion,\n          focusInputOnSuggestionClick = _this$props4.focusInputOnSuggestionClick;\n      var _this$state2 = this.state,\n          validated = _this$state2.validated,\n          isValid = _this$state2.isValid;\n      var inputProps = {\n        id: id,\n        value: value,\n        placeholder: placeholder,\n        type: type,\n        'aria-label': ariaLabel,\n        required: isRequired,\n        maxLength: this.props.maxLength,\n        minLength: this.props.minLength,\n        onChange: this.onChange,\n        onKeyDown: this.onKeyDown,\n        onBlur: this.onBlur\n      };\n      var wrapperClasses = classNames(className, {\n        mol_validation: !noValidation,\n        'mol_validation--active': !noValidation && validated && !isValid\n      });\n      return React.createElement(\"div\", {\n        className: wrapperClasses,\n        id: \"\".concat(id, \"-wrapper\")\n      }, this.renderErrorMessage(), label && React.createElement(Label, {\n        labelText: label,\n        htmlFor: id,\n        sublabelText: subLabel,\n        helpButton: helpButton\n      }), helpElement ? helpElement : null, React.createElement(ReactAutosuggest, {\n        ref: this.autosuggestRef,\n        theme: autosuggesttheme,\n        suggestions: suggestions,\n        inputProps: inputProps,\n        onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: onSuggestionsClearRequested,\n        onSuggestionSelected: onSuggestionSelected,\n        getSuggestionValue: this.getSuggestionValue,\n        renderSuggestion: renderSuggestion ? renderSuggestion : this.renderSuggestion,\n        focusInputOnSuggestionClick: focusInputOnSuggestionClick || false\n      }));\n    }\n  }]);\n\n  return Autosuggest;\n}(React.Component);\n\nexport { Autosuggest as default };","map":null,"metadata":{},"sourceType":"module"}