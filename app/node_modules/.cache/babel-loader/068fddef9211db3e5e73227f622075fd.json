{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getColumns = exports.QuestionnaireList = exports.NamesColumnCustomRenderLink = exports.NamesColumnCustomRender = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar _constants = require(\"../constants\");\n\nvar _antd = require(\"antd\");\n\nvar _icons = require(\"@ant-design/icons\");\n\nvar _reactHelmet = require(\"react-helmet\");\n\nvar _fhirResources = require(\"@opensrp/fhir-resources\");\n\nvar _mls = require(\"../mls\");\n\nrequire(\"./index.css\");\n\nvar _rbac = require(\"@opensrp/rbac\");\n\nvar NamesColumnCustomRenderLink = function NamesColumnCustomRenderLink(record) {\n  var _ref, _record$title;\n\n  return _react[\"default\"].createElement(_react[\"default\"].Fragment, null, _react[\"default\"].createElement(_reactRouterDom.Link, {\n    to: \"\".concat(_constants.QUEST_FORM_VIEW_URL, \"/\").concat(record.id, \"/\").concat(_constants.questionnaireResourceType)\n  }, (_ref = (_record$title = record.title) !== null && _record$title !== void 0 ? _record$title : record.id) !== null && _ref !== void 0 ? _ref : ''));\n};\n\nexports.NamesColumnCustomRenderLink = NamesColumnCustomRenderLink;\n\nvar NamesColumnCustomRender = function NamesColumnCustomRender(record) {\n  var _ref2, _record$title2;\n\n  return _react[\"default\"].createElement(_react[\"default\"].Fragment, null, (_ref2 = (_record$title2 = record.title) !== null && _record$title2 !== void 0 ? _record$title2 : record.id) !== null && _ref2 !== void 0 ? _ref2 : '');\n};\n\nexports.NamesColumnCustomRender = NamesColumnCustomRender;\n\nvar getColumns = function getColumns(t, userRole) {\n  var columns = [{\n    title: t('Name/Id'),\n    render: userRole.hasPermissions('QuestionnaireResponse.create') ? NamesColumnCustomRenderLink : NamesColumnCustomRender,\n    width: '20%'\n  }, {\n    title: t('Status'),\n    dataIndex: 'status'\n  }, {\n    title: t('Publisher'),\n    dataIndex: 'publisher'\n  }, {\n    title: t('Version'),\n    dataIndex: 'version'\n  }, {\n    title: t('date'),\n    dataIndex: 'date',\n    render: function render(value) {\n      return t('{{val, datetime}}', {\n        val: new Date(value)\n      });\n    }\n  }, {\n    title: t('Actions'),\n    render: function render(record) {\n      return _react[\"default\"].createElement(_rbac.RbacCheck, {\n        permissions: ['QuestionnaireResponse.read']\n      }, _react[\"default\"].createElement(_reactRouterDom.Link, {\n        to: \"\".concat(_constants.QUEST_RESPONSE_VIEW_URL, \"/\").concat(record.id)\n      }, t('View Questionnaire Responses')));\n    },\n    width: '20%'\n  }];\n  return columns;\n};\n\nexports.getColumns = getColumns;\n\nvar getSearchParams = function getSearchParams(search) {\n  if (search) {\n    return (0, _defineProperty2[\"default\"])({}, \"title:contains\", \"\".concat(search, \",name:contains=\").concat(search));\n  }\n\n  return {};\n};\n\nvar QuestionnaireList = function QuestionnaireList(props) {\n  var _data$records;\n\n  var fhirBaseURL = props.fhirBaseURL;\n\n  var _useTranslation = (0, _mls.useTranslation)(),\n      t = _useTranslation.t;\n\n  var _useSimpleTabularView = (0, _reactUtils.useSimpleTabularView)(fhirBaseURL, _constants.questionnaireResourceType, getSearchParams),\n      searchFormProps = _useSimpleTabularView.searchFormProps,\n      tablePaginationProps = _useSimpleTabularView.tablePaginationProps,\n      queryValues = _useSimpleTabularView.queryValues;\n\n  var userRole = (0, _rbac.useUserRole)();\n  var data = queryValues.data,\n      isFetching = queryValues.isFetching,\n      isLoading = queryValues.isLoading,\n      error = queryValues.error;\n  var columns = getColumns(t, userRole);\n  var dataSource = ((_data$records = data === null || data === void 0 ? void 0 : data.records) !== null && _data$records !== void 0 ? _data$records : []).map(_fhirResources.parseQuestionnaire);\n  var tableProps = {\n    datasource: dataSource,\n    columns: columns,\n    loading: isFetching || isLoading,\n    pagination: tablePaginationProps\n  };\n\n  if (error && !data) {\n    return _react[\"default\"].createElement(_reactUtils.BrokenPage, {\n      errorMessage: error.message\n    });\n  }\n\n  var pageTitle = t('Questionnaire list view');\n  return _react[\"default\"].createElement(\"div\", {\n    className: \"content-section fhir-resource-container\"\n  }, _react[\"default\"].createElement(_reactHelmet.Helmet, null, _react[\"default\"].createElement(\"title\", null, pageTitle)), _react[\"default\"].createElement(_reactUtils.PageHeader, {\n    title: pageTitle\n  }), _react[\"default\"].createElement(_antd.Row, {\n    className: \"list-view\"\n  }, _react[\"default\"].createElement(_antd.Col, {\n    className: \"main-content\"\n  }, _react[\"default\"].createElement(\"div\", {\n    className: \"main-content__header\"\n  }, _react[\"default\"].createElement(_reactUtils.SearchForm, (0, _extends2[\"default\"])({}, searchFormProps, {\n    \"data-testid\": \"search-form\"\n  })), _react[\"default\"].createElement(_rbac.RbacCheck, {\n    permissions: ['QuestionnaireResponse.create']\n  }, _react[\"default\"].createElement(_antd.Button, {\n    type: \"primary\",\n    disabled: true\n  }, _react[\"default\"].createElement(_icons.PlusOutlined, null), t('Create questionnaire')))), _react[\"default\"].createElement(_reactUtils.TableLayout, tableProps))));\n};\n\nexports.QuestionnaireList = QuestionnaireList;","map":null,"metadata":{},"sourceType":"script"}