{"ast":null,"code":"var _jsxFileName = \"/home/teboho/opensrp-fhir-web-source/fhir-web/app/src/components/page/CustomCallback/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { ConnectedAPICallback } from '@onaio/gatekeeper';\nimport { getUser } from '@onaio/session-reducer';\nimport { trimStart } from 'lodash';\nimport querystring from 'querystring';\nimport React from 'react';\nimport { Redirect, withRouter } from 'react-router';\nimport { EXPRESS_OAUTH_GET_STATE_URL } from '../../../configs/env';\nimport { URL_EXPRESS_LOGIN, URL_HOME, URL_LOGOUT } from '../../../constants';\nimport { store } from '@opensrp/store';\nimport { Spin } from 'antd';\nimport { sendSuccessNotification } from '@opensrp/notifications';\nimport { useTranslation } from '../../../mls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/**\n * antd notification popup.\n *\n * @param {user} user details object\n */\nexport const openNotification = (user, t) => {\n  sendSuccessNotification(`Welcome back, ${user.username}`);\n};\n/** checks if the value of next in searchParam is blacklisted\n *\n * @param {RouteComponentProps} props - the props should contain the routing state.\n * @returns {boolean} return the response\n */\n\nexport const nextIsValid = props => {\n  let response = true;\n  const indirectionURLs = [URL_LOGOUT];\n  /** we should probably sieve some routes from being passed on.\n   * For instance we don't need to redirect to logout since we are already in\n   * the Unsuccessful Login component, meaning we are already logged out.\n   */\n\n  const stringifiedUrls = indirectionURLs.map(url => querystring.stringify({\n    next: url\n  }));\n\n  for (const url of stringifiedUrls) {\n    if (props.location.search.includes(url)) {\n      response = false;\n      break;\n    }\n  }\n\n  return response;\n};\nexport const BaseSuccessfulLoginComponent = props => {\n  _s();\n\n  let pathToRedirectTo = URL_HOME;\n  const {\n    t\n  } = useTranslation();\n\n  if (nextIsValid(props)) {\n    const searchString = trimStart(props.location.search, '?');\n    const searchParams = querystring.parse(searchString);\n    const nextPath = searchParams.next;\n\n    if (nextPath) {\n      pathToRedirectTo = nextPath;\n    }\n\n    if (nextPath === '/') {\n      const user = getUser(store.getState());\n      openNotification(user, t);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: pathToRedirectTo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n\n_s(BaseSuccessfulLoginComponent, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = BaseSuccessfulLoginComponent;\nexport const SuccessfulLoginComponent = withRouter(BaseSuccessfulLoginComponent);\n_c2 = SuccessfulLoginComponent;\n\nconst BaseUnsuccessfulLogin = props => {\n  let redirectTo = `${URL_EXPRESS_LOGIN}${props.location.search}`;\n\n  if (!nextIsValid(props)) {\n    redirectTo = URL_EXPRESS_LOGIN;\n  }\n\n  window.location.href = redirectTo;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_c3 = BaseUnsuccessfulLogin;\nexport const UnSuccessfulLogin = withRouter(BaseUnsuccessfulLogin);\n_c4 = UnSuccessfulLogin;\n\nconst CustomConnectedAPICallBack = props => {\n  const unifiedProps = {\n    LoadingComponent: () => /*#__PURE__*/_jsxDEV(Spin, {\n      size: \"large\",\n      className: \"custom-spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 29\n    }, this),\n    UnSuccessfulLoginComponent: UnSuccessfulLogin,\n    SuccessfulLoginComponent: SuccessfulLoginComponent,\n    apiURL: EXPRESS_OAUTH_GET_STATE_URL,\n    ...props // ts bug - default props not working, ts asking for default props to be repassed https://github.com/microsoft/TypeScript/issues/31247\n\n  };\n  return /*#__PURE__*/_jsxDEV(ConnectedAPICallback, { ...unifiedProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n};\n\n_c5 = CustomConnectedAPICallBack;\nexport default CustomConnectedAPICallBack;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"BaseSuccessfulLoginComponent\");\n$RefreshReg$(_c2, \"SuccessfulLoginComponent\");\n$RefreshReg$(_c3, \"BaseUnsuccessfulLogin\");\n$RefreshReg$(_c4, \"UnSuccessfulLogin\");\n$RefreshReg$(_c5, \"CustomConnectedAPICallBack\");","map":{"version":3,"sources":["/home/teboho/opensrp-fhir-web-source/fhir-web/app/src/components/page/CustomCallback/index.tsx"],"names":["ConnectedAPICallback","getUser","trimStart","querystring","React","Redirect","withRouter","EXPRESS_OAUTH_GET_STATE_URL","URL_EXPRESS_LOGIN","URL_HOME","URL_LOGOUT","store","Spin","sendSuccessNotification","useTranslation","openNotification","user","t","username","nextIsValid","props","response","indirectionURLs","stringifiedUrls","map","url","stringify","next","location","search","includes","BaseSuccessfulLoginComponent","pathToRedirectTo","searchString","searchParams","parse","nextPath","getState","SuccessfulLoginComponent","BaseUnsuccessfulLogin","redirectTo","window","href","UnSuccessfulLogin","CustomConnectedAPICallBack","unifiedProps","LoadingComponent","UnSuccessfulLoginComponent","apiURL"],"mappings":"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","sourcesContent":["import { ConnectedAPICallback, RouteParams, APICallbackProps } from '@onaio/gatekeeper';\nimport { getUser, User } from '@onaio/session-reducer';\nimport { trimStart } from 'lodash';\nimport querystring from 'querystring';\nimport React from 'react';\nimport { Redirect, RouteComponentProps, withRouter } from 'react-router';\nimport { EXPRESS_OAUTH_GET_STATE_URL } from '../../../configs/env';\nimport { URL_EXPRESS_LOGIN, URL_HOME, URL_LOGOUT } from '../../../constants';\nimport { store } from '@opensrp/store';\nimport { Spin } from 'antd';\nimport { sendSuccessNotification } from '@opensrp/notifications';\nimport { useTranslation } from '../../../mls';\nimport type { TFunction } from '@opensrp/i18n';\n/**\n * antd notification popup.\n *\n * @param {user} user details object\n */\nexport const openNotification = (user: User, t: TFunction): void => {\n  sendSuccessNotification(`Welcome back, ${user.username}`);\n};\n\n/** checks if the value of next in searchParam is blacklisted\n *\n * @param {RouteComponentProps} props - the props should contain the routing state.\n * @returns {boolean} return the response\n */\nexport const nextIsValid = (props: RouteComponentProps): boolean => {\n  let response = true;\n  const indirectionURLs = [URL_LOGOUT];\n  /** we should probably sieve some routes from being passed on.\n   * For instance we don't need to redirect to logout since we are already in\n   * the Unsuccessful Login component, meaning we are already logged out.\n   */\n  const stringifiedUrls = indirectionURLs.map((url) => querystring.stringify({ next: url }));\n  for (const url of stringifiedUrls) {\n    if (props.location.search.includes(url)) {\n      response = false;\n      break;\n    }\n  }\n  return response;\n};\n\nexport const BaseSuccessfulLoginComponent: React.FC<RouteComponentProps> = (\n  props: RouteComponentProps\n) => {\n  let pathToRedirectTo = URL_HOME;\n  const { t } = useTranslation();\n\n  if (nextIsValid(props)) {\n    const searchString = trimStart(props.location.search, '?');\n    const searchParams = querystring.parse(searchString);\n    const nextPath = searchParams.next as string | undefined;\n\n    if (nextPath) {\n      pathToRedirectTo = nextPath;\n    }\n    if (nextPath === '/') {\n      const user = getUser(store.getState());\n      openNotification(user, t);\n    }\n  }\n  return <Redirect to={pathToRedirectTo} />;\n};\n\nexport const SuccessfulLoginComponent = withRouter(BaseSuccessfulLoginComponent);\n\nconst BaseUnsuccessfulLogin: React.FC<RouteComponentProps> = (props: RouteComponentProps) => {\n  let redirectTo = `${URL_EXPRESS_LOGIN}${props.location.search}`;\n  if (!nextIsValid(props)) {\n    redirectTo = URL_EXPRESS_LOGIN;\n  }\n\n  window.location.href = redirectTo;\n  return <></>;\n};\n\nexport const UnSuccessfulLogin = withRouter(BaseUnsuccessfulLogin);\n\nconst CustomConnectedAPICallBack: React.FC<RouteComponentProps<RouteParams>> = (props) => {\n  const unifiedProps = {\n    LoadingComponent: () => <Spin size=\"large\" className=\"custom-spinner\" />,\n    UnSuccessfulLoginComponent: UnSuccessfulLogin,\n    SuccessfulLoginComponent: SuccessfulLoginComponent,\n    apiURL: EXPRESS_OAUTH_GET_STATE_URL,\n    ...props,\n    // ts bug - default props not working, ts asking for default props to be repassed https://github.com/microsoft/TypeScript/issues/31247\n  } as unknown as APICallbackProps<RouteParams>;\n  return <ConnectedAPICallback {...unifiedProps} />;\n};\n\nexport default CustomConnectedAPICallBack;\n"]},"metadata":{},"sourceType":"module"}