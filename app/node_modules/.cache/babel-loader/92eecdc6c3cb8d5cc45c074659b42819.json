{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport * as uuid from 'uuid';\nimport { theme } from '@helsenorge/designsystem-react';\nimport designsystemtypography from '@helsenorge/designsystem-react/scss/typography.module.scss';\nimport Close from '../../icons/Close';\nimport AlertInfo from '../../icons/AlertInfo';\nimport AlertWarning from '../../icons/AlertWarning';\nimport AlertError from '../../icons/AlertError';\nimport AlertSuccess from '../../icons/AlertSuccess';\nimport { FunctionButton } from '../buttons/function-button';\nimport Description from './description';\nimport './styles.scss';\nvar assistiveDelay = 300;\n\nvar MessageBox = /*#__PURE__*/function (_React$Component) {\n  _inherits(MessageBox, _React$Component);\n\n  var _super = _createSuper(MessageBox);\n\n  function MessageBox(props) {\n    var _this;\n\n    _classCallCheck(this, MessageBox);\n\n    _this = _super.call(this, props);\n\n    _this.onExpanderClick = function (e) {\n      e.preventDefault();\n      var expanded = _this.state.expanded;\n\n      _this.setState({\n        expanded: !expanded\n      });\n    };\n\n    var hiddenAssistive = _this.props.type === 'error' || _this.isClientServiceError();\n\n    if (hiddenAssistive) {\n      _this.hideForAssistive();\n    }\n\n    _this.messageBoxTitle = React.createRef();\n    _this.state = {\n      expanded: false,\n      hiddenAssistive: hiddenAssistive,\n      headerId: uuid.v4(),\n      type: null\n    };\n    return _this;\n  }\n\n  _createClass(MessageBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.focus && this.messageBoxTitle.current) {\n        this.messageBoxTitle.current.focus();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.type !== 'error' && this.state.type === 'error') {\n        this.hideForAssistive();\n      }\n    }\n  }, {\n    key: \"setupClientServiceFault\",\n    value: function setupClientServiceFault(title, description) {\n      if (title && description) {\n        return null;\n      }\n\n      var fault = {\n        Title: '',\n        Body: ''\n      };\n      var clientFault = this.props.clientServiceFault;\n\n      if (clientFault) {\n        if (clientFault.ErrorMessage) {\n          fault = clientFault.ErrorMessage;\n        } else if (clientFault.WarningMessage) {\n          fault = clientFault.WarningMessage;\n        } else if (clientFault.InformationMessage) {\n          fault = clientFault.InformationMessage;\n        }\n      }\n\n      return fault;\n    }\n  }, {\n    key: \"hideForAssistive\",\n    value: function hideForAssistive() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.setState({\n          hiddenAssistive: false\n        });\n      }, assistiveDelay);\n    }\n  }, {\n    key: \"isMessageBoxTypePropsSet\",\n    value: function isMessageBoxTypePropsSet() {\n      return this.props.type === 'info' || this.props.type === 'alert' || this.props.type === 'error';\n    }\n  }, {\n    key: \"isClientServiceError\",\n    value: function isClientServiceError() {\n      if (this.isMessageBoxTypePropsSet()) {\n        return false;\n      }\n\n      if (!this.props.clientServiceFault) {\n        return false;\n      }\n\n      if (this.props.clientServiceFault.ErrorMessage) {\n        return true;\n      }\n\n      return !(!this.props.clientServiceFault || !this.props.clientServiceFault.ErrorMessage);\n    }\n  }, {\n    key: \"isClientServiceWarn\",\n    value: function isClientServiceWarn() {\n      if (this.isMessageBoxTypePropsSet()) {\n        return false;\n      }\n\n      if (!this.props.clientServiceFault) {\n        return false;\n      }\n\n      if (this.props.clientServiceFault.WarningMessage) {\n        return true;\n      }\n\n      return !(!this.props.clientServiceFault || !this.props.clientServiceFault.WarningMessage);\n    }\n  }, {\n    key: \"isClientServiceInfo\",\n    value: function isClientServiceInfo() {\n      if (this.isMessageBoxTypePropsSet()) {\n        return false;\n      }\n\n      if (!this.props.clientServiceFault) {\n        return false;\n      }\n\n      if (this.props.clientServiceFault.InformationMessage) {\n        return true;\n      }\n\n      return !(!this.props.clientServiceFault || !this.props.clientServiceFault.InformationMessage);\n    }\n  }, {\n    key: \"insertHelsenorgeUrl\",\n    value: function insertHelsenorgeUrl(tekst) {\n      return tekst;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isInfo = this.props.type === 'info' || this.isClientServiceInfo();\n      var isAlert = this.props.type === 'alert' || this.isClientServiceWarn();\n      var isError = this.props.type === 'error' || this.isClientServiceError();\n      var isSuccess = this.props.type === 'success';\n      var isThirdParty = this.props.type === 'thirdparty';\n      var tabIndex = this.props.noTabIndex ? undefined : -1;\n      var title;\n\n      if (!!this.props.title) {\n        title = React.createElement(\"strong\", {\n          className: \"atom_messagebox__heading\",\n          id: this.props.hasUniqueId ? this.state.headerId : undefined,\n          tabIndex: this.props.focus ? 0 : tabIndex,\n          ref: this.messageBoxTitle,\n          dangerouslySetInnerHTML: {\n            __html: this.insertHelsenorgeUrl(this.props.title)\n          }\n        });\n      }\n\n      var description;\n\n      if (!!this.props.description) {\n        description = React.createElement(Description, {\n          description: this.props.description,\n          isThirdParty: isThirdParty,\n          maxlength: this.props.maxlength,\n          expanded: this.state.expanded,\n          readMoreButtonText: this.props.readMoreButtonText,\n          onExpanderClick: this.onExpanderClick\n        });\n      }\n\n      var plea;\n\n      if (!!this.props.plea) {\n        plea = React.createElement(\"p\", null, React.createElement(\"strong\", null, this.props.plea));\n      }\n\n      var timestamp;\n\n      if (!!this.props.timestamp) {\n        timestamp = React.createElement(\"p\", {\n          className: \"errortimestamp\"\n        }, this.props.timestamp);\n      }\n\n      if (this.props.clientServiceFault) {\n        var fault = this.setupClientServiceFault(title, description);\n\n        if (fault && !title) {\n          var _tabIndex = this.props.noTabIndex ? undefined : -1;\n\n          title = React.createElement(\"strong\", {\n            className: \"atom_messagebox__heading\",\n            id: this.props.hasUniqueId ? this.state.headerId : undefined,\n            tabIndex: this.props.focus ? 0 : _tabIndex,\n            ref: this.messageBoxTitle,\n            dangerouslySetInnerHTML: {\n              __html: fault.Title\n            }\n          });\n        }\n\n        if (fault && !this.props.description) {\n          description = React.createElement(\"p\", {\n            className: \"atom_messagebox__description \".concat(designsystemtypography['anchorlink-wrapper']),\n            dangerouslySetInnerHTML: {\n              __html: fault.Body\n            }\n          });\n        }\n      }\n\n      var closeButton;\n\n      if (this.props.onClose) {\n        closeButton = React.createElement(FunctionButton, {\n          secondary: true,\n          className: \"atom_functionbutton--close\",\n          svgIcon: React.createElement(Close, null),\n          onClick: this.props.onClose,\n          ariaLabel: \"Lukk\"\n        });\n      }\n\n      var svgIcon = React.createElement(AlertInfo, {\n        color: theme.palette.kiwi900,\n        className: \"atom_messagebox__icon\"\n      });\n\n      if (isError) {\n        svgIcon = React.createElement(AlertError, {\n          color: theme.palette.cherry600,\n          className: \"atom_messagebox__icon\"\n        });\n      } else if (isSuccess) {\n        svgIcon = React.createElement(AlertSuccess, {\n          className: \"atom_messagebox__icon\"\n        });\n      } else if (isAlert) {\n        svgIcon = React.createElement(AlertWarning, {\n          className: \"atom_messagebox__icon\"\n        });\n      }\n\n      var classes = classNames({\n        lvl1: !!description,\n        lvl2: !description,\n        error: isError,\n        alert: isAlert,\n        info: isInfo,\n        success: isSuccess,\n        thirdparty: isThirdParty,\n        'with-expander': isThirdParty && this.props.maxlength !== undefined && this.props.maxlength > 0,\n        'has-full-bleed': this.props.fullBleed,\n        'has-close-button': !!this.props.onClose\n      }, this.props.className);\n      var assistive = {};\n\n      if (this.props.role) {\n        assistive.role = this.props.role;\n      } else if (isError) {\n        assistive.role = 'alert';\n        assistive['aria-atomic'] = 'true';\n      }\n\n      var messageboxContent = this.props.messageboxContent;\n      var hiddenAssistive = this.state.hiddenAssistive ? null : React.createElement(\"span\", null);\n      var contentClasses = classNames({\n        content: true,\n        'content--full-bleed': this.props.fullBleed,\n        open: this.state.expanded\n      });\n      var content = React.createElement(\"div\", null, title, description, plea, timestamp, messageboxContent, closeButton, hiddenAssistive);\n      return React.createElement(\"div\", Object.assign({\n        id: this.props.id,\n        className: \"atom_messagebox \".concat(classes),\n        \"data-testid\": this.props.testId\n      }, assistive), React.createElement(\"div\", {\n        className: \"content-wrapper\"\n      }, !this.props.fullBleed && svgIcon, React.createElement(\"div\", {\n        className: contentClasses,\n        role: \"region\"\n      }, this.props.fullBleed && svgIcon, content)), this.props.children ? React.createElement(\"div\", {\n        className: \"children-wrapper\"\n      }, this.props.children) : false);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var type = nextProps.type;\n\n      if (type === 'error' && type !== prevState.type) {\n        return Object.assign(Object.assign({}, prevState), {\n          type: type,\n          hiddenAssistive: true\n        });\n      } else {\n        return Object.assign(Object.assign({}, prevState), {\n          type: type\n        });\n      }\n    }\n  }]);\n\n  return MessageBox;\n}(React.Component);\n\nexport { MessageBox as default };","map":null,"metadata":{},"sourceType":"module"}