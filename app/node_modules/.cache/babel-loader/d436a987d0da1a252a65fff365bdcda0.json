{"ast":null,"code":"// Generated from FHIRPath.g4 by ANTLR 4.7.1\n// jshint ignore: start\nvar antlr4 = require('../antlr4-index'); // This class defines a complete listener for a parse tree produced by FHIRPathParser.\n\n\nfunction FHIRPathListener() {\n  antlr4.tree.ParseTreeListener.call(this);\n  return this;\n}\n\nFHIRPathListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);\nFHIRPathListener.prototype.constructor = FHIRPathListener; // Enter a parse tree produced by FHIRPathParser#entireExpression.\n\nFHIRPathListener.prototype.enterEntireExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#entireExpression.\n\n\nFHIRPathListener.prototype.exitEntireExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#indexerExpression.\n\n\nFHIRPathListener.prototype.enterIndexerExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#indexerExpression.\n\n\nFHIRPathListener.prototype.exitIndexerExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#polarityExpression.\n\n\nFHIRPathListener.prototype.enterPolarityExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#polarityExpression.\n\n\nFHIRPathListener.prototype.exitPolarityExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#additiveExpression.\n\n\nFHIRPathListener.prototype.enterAdditiveExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#additiveExpression.\n\n\nFHIRPathListener.prototype.exitAdditiveExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#multiplicativeExpression.\n\n\nFHIRPathListener.prototype.enterMultiplicativeExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#multiplicativeExpression.\n\n\nFHIRPathListener.prototype.exitMultiplicativeExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#unionExpression.\n\n\nFHIRPathListener.prototype.enterUnionExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#unionExpression.\n\n\nFHIRPathListener.prototype.exitUnionExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#orExpression.\n\n\nFHIRPathListener.prototype.enterOrExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#orExpression.\n\n\nFHIRPathListener.prototype.exitOrExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#andExpression.\n\n\nFHIRPathListener.prototype.enterAndExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#andExpression.\n\n\nFHIRPathListener.prototype.exitAndExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#membershipExpression.\n\n\nFHIRPathListener.prototype.enterMembershipExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#membershipExpression.\n\n\nFHIRPathListener.prototype.exitMembershipExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#inequalityExpression.\n\n\nFHIRPathListener.prototype.enterInequalityExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#inequalityExpression.\n\n\nFHIRPathListener.prototype.exitInequalityExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#invocationExpression.\n\n\nFHIRPathListener.prototype.enterInvocationExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#invocationExpression.\n\n\nFHIRPathListener.prototype.exitInvocationExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#equalityExpression.\n\n\nFHIRPathListener.prototype.enterEqualityExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#equalityExpression.\n\n\nFHIRPathListener.prototype.exitEqualityExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#impliesExpression.\n\n\nFHIRPathListener.prototype.enterImpliesExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#impliesExpression.\n\n\nFHIRPathListener.prototype.exitImpliesExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#termExpression.\n\n\nFHIRPathListener.prototype.enterTermExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#termExpression.\n\n\nFHIRPathListener.prototype.exitTermExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#typeExpression.\n\n\nFHIRPathListener.prototype.enterTypeExpression = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#typeExpression.\n\n\nFHIRPathListener.prototype.exitTypeExpression = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#invocationTerm.\n\n\nFHIRPathListener.prototype.enterInvocationTerm = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#invocationTerm.\n\n\nFHIRPathListener.prototype.exitInvocationTerm = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#literalTerm.\n\n\nFHIRPathListener.prototype.enterLiteralTerm = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#literalTerm.\n\n\nFHIRPathListener.prototype.exitLiteralTerm = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#externalConstantTerm.\n\n\nFHIRPathListener.prototype.enterExternalConstantTerm = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#externalConstantTerm.\n\n\nFHIRPathListener.prototype.exitExternalConstantTerm = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#parenthesizedTerm.\n\n\nFHIRPathListener.prototype.enterParenthesizedTerm = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#parenthesizedTerm.\n\n\nFHIRPathListener.prototype.exitParenthesizedTerm = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#nullLiteral.\n\n\nFHIRPathListener.prototype.enterNullLiteral = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#nullLiteral.\n\n\nFHIRPathListener.prototype.exitNullLiteral = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#booleanLiteral.\n\n\nFHIRPathListener.prototype.enterBooleanLiteral = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#booleanLiteral.\n\n\nFHIRPathListener.prototype.exitBooleanLiteral = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#stringLiteral.\n\n\nFHIRPathListener.prototype.enterStringLiteral = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#stringLiteral.\n\n\nFHIRPathListener.prototype.exitStringLiteral = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#numberLiteral.\n\n\nFHIRPathListener.prototype.enterNumberLiteral = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#numberLiteral.\n\n\nFHIRPathListener.prototype.exitNumberLiteral = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#dateTimeLiteral.\n\n\nFHIRPathListener.prototype.enterDateTimeLiteral = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#dateTimeLiteral.\n\n\nFHIRPathListener.prototype.exitDateTimeLiteral = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#timeLiteral.\n\n\nFHIRPathListener.prototype.enterTimeLiteral = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#timeLiteral.\n\n\nFHIRPathListener.prototype.exitTimeLiteral = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#quantityLiteral.\n\n\nFHIRPathListener.prototype.enterQuantityLiteral = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#quantityLiteral.\n\n\nFHIRPathListener.prototype.exitQuantityLiteral = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#externalConstant.\n\n\nFHIRPathListener.prototype.enterExternalConstant = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#externalConstant.\n\n\nFHIRPathListener.prototype.exitExternalConstant = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#memberInvocation.\n\n\nFHIRPathListener.prototype.enterMemberInvocation = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#memberInvocation.\n\n\nFHIRPathListener.prototype.exitMemberInvocation = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#functionInvocation.\n\n\nFHIRPathListener.prototype.enterFunctionInvocation = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#functionInvocation.\n\n\nFHIRPathListener.prototype.exitFunctionInvocation = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#thisInvocation.\n\n\nFHIRPathListener.prototype.enterThisInvocation = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#thisInvocation.\n\n\nFHIRPathListener.prototype.exitThisInvocation = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#indexInvocation.\n\n\nFHIRPathListener.prototype.enterIndexInvocation = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#indexInvocation.\n\n\nFHIRPathListener.prototype.exitIndexInvocation = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#totalInvocation.\n\n\nFHIRPathListener.prototype.enterTotalInvocation = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#totalInvocation.\n\n\nFHIRPathListener.prototype.exitTotalInvocation = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#functn.\n\n\nFHIRPathListener.prototype.enterFunctn = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#functn.\n\n\nFHIRPathListener.prototype.exitFunctn = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#paramList.\n\n\nFHIRPathListener.prototype.enterParamList = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#paramList.\n\n\nFHIRPathListener.prototype.exitParamList = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#quantity.\n\n\nFHIRPathListener.prototype.enterQuantity = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#quantity.\n\n\nFHIRPathListener.prototype.exitQuantity = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#unit.\n\n\nFHIRPathListener.prototype.enterUnit = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#unit.\n\n\nFHIRPathListener.prototype.exitUnit = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#dateTimePrecision.\n\n\nFHIRPathListener.prototype.enterDateTimePrecision = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#dateTimePrecision.\n\n\nFHIRPathListener.prototype.exitDateTimePrecision = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#pluralDateTimePrecision.\n\n\nFHIRPathListener.prototype.enterPluralDateTimePrecision = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#pluralDateTimePrecision.\n\n\nFHIRPathListener.prototype.exitPluralDateTimePrecision = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#typeSpecifier.\n\n\nFHIRPathListener.prototype.enterTypeSpecifier = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#typeSpecifier.\n\n\nFHIRPathListener.prototype.exitTypeSpecifier = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#qualifiedIdentifier.\n\n\nFHIRPathListener.prototype.enterQualifiedIdentifier = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#qualifiedIdentifier.\n\n\nFHIRPathListener.prototype.exitQualifiedIdentifier = function (ctx) {}; // Enter a parse tree produced by FHIRPathParser#identifier.\n\n\nFHIRPathListener.prototype.enterIdentifier = function (ctx) {}; // Exit a parse tree produced by FHIRPathParser#identifier.\n\n\nFHIRPathListener.prototype.exitIdentifier = function (ctx) {};\n\nexports.FHIRPathListener = FHIRPathListener;","map":null,"metadata":{},"sourceType":"script"}