{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport { FunctionButton } from '../buttons/function-button';\nimport { ConfirmBox } from '../../molecules/confirmbox';\nimport Delete from '../../icons/Delete';\nimport FormatJPG from '../../icons/FormatJPG';\nimport FormatPNG from '../../icons/FormatPNG';\nimport FormatPDF from '../../icons/FormatPDF';\nimport FormatWORD from '../../icons/FormatWORD';\nimport FormatRTF from '../../icons/FormatRTF';\nimport FormatXML from '../../icons/FormatXML';\nimport FormatAny from '../../icons/FormatAny';\nimport styles from './toolkitstyles.module.scss';\nexport var Type;\n\n(function (Type) {\n  Type[\"verified\"] = \"verified\";\n  Type[\"rejected\"] = \"rejected\";\n})(Type || (Type = {}));\n\nconst fileType = (fileName, className) => {\n  if (fileName) {\n    const filetype = fileName.split('.')[1];\n    const props = {\n      className: className,\n      size: 'large'\n    };\n\n    switch (filetype) {\n      case 'doc':\n        return React.createElement(FormatWORD, Object.assign({}, props));\n\n      case 'jpg':\n      case 'jpeg':\n        return React.createElement(FormatJPG, Object.assign({}, props));\n\n      case 'pdf':\n        return React.createElement(FormatPDF, Object.assign({}, props));\n\n      case 'png':\n        return React.createElement(FormatPNG, Object.assign({}, props));\n\n      case 'rtf':\n        return React.createElement(FormatRTF, Object.assign({}, props));\n\n      case 'xml':\n        return React.createElement(FormatXML, Object.assign({}, props));\n\n      default:\n        return React.createElement(FormatAny, Object.assign({}, props));\n    }\n  } else return '';\n};\n\nexport default class FileElement extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setConfirmDelete = () => {\n      this.setState({\n        showDeleteLightbox: true\n      });\n    };\n\n    this.onDeleteLightboxClose = () => {\n      this.setState({\n        showDeleteLightbox: false\n      });\n    };\n\n    this.renderConfirmDelete = () => {\n      return this.state.showDeleteLightbox && React.createElement(ConfirmBox, {\n        wrapperClassName: this.props.confirmDeleteClassName,\n        onClose: this.onDeleteLightboxClose,\n        noCloseButton: false,\n        closeText: this.props.cancelText,\n        confirmText: this.props.confirmText,\n        onConfirm: this.deleteFile,\n        onCancel: this.onDeleteLightboxClose\n      }, React.createElement(\"h4\", null, this.props.verifyDeleteText));\n    };\n\n    this.state = {\n      showDeleteLightbox: false\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.renderDeleteButton = this.renderDeleteButton.bind(this);\n    this.deleteFile = this.deleteFile.bind(this);\n  }\n\n  handleClick(event) {\n    const {\n      fileId,\n      onOpenFile\n    } = this.props;\n\n    if (onOpenFile && fileId) {\n      onOpenFile(fileId);\n    }\n\n    if (event) {\n      event.preventDefault();\n    }\n  }\n\n  deleteFile() {\n    if (this.props.deleteFile) {\n      return this.props.deleteFile(this.props.fileId ? this.props.fileId : '');\n    }\n  }\n\n  renderDeleteButton() {\n    const {\n      shouldRenderDeleteButton,\n      loading,\n      dontShowHardcodedText,\n      deleteText,\n      confirmDelete\n    } = this.props;\n\n    if (shouldRenderDeleteButton && !loading) {\n      return React.createElement(FunctionButton, {\n        svgIcon: React.createElement(Delete, {\n          variant: 'error'\n        }),\n        className: classNames(styles.dropzone__deleteButton, {\n          [`${this.props.customClass}__button`]: this.props.customClass\n        }),\n        onClick: confirmDelete ? this.setConfirmDelete : this.deleteFile\n      }, React.createElement(React.Fragment, null, deleteText, !dontShowHardcodedText && 'Slett'));\n    }\n  }\n\n  renderFile() {\n    const {\n      loading,\n      fileId,\n      fileName,\n      onRequestLink\n    } = this.props;\n\n    if (!loading) {\n      const attachmentLink = onRequestLink && fileId ? onRequestLink(fileId) : '';\n\n      if (attachmentLink) {\n        return React.createElement(\"a\", {\n          href: attachmentLink,\n          className: classNames({\n            [`${this.props.customClass}__link`]: this.props.customClass\n          }),\n          onClick: this.handleClick\n        }, fileName);\n      }\n\n      return fileName;\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"li\", {\n      className: classNames({\n        [styles['dropzone__files__file']]: !this.props.customClass,\n        [`${this.props.customClass}`]: this.props.customClass,\n        [`${this.props.customClass}--${this.props.type}`]: this.props.customClass\n      })\n    }, fileType(this.props.fileName, classNames({\n      [`${this.props.customClass}__svgicon`]: this.props.customClass\n    })), this.renderFile(), this.renderDeleteButton()), this.props.confirmDelete && this.renderConfirmDelete());\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}