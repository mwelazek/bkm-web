{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport PrivateRadioGroup from './private-radio-group';\nimport ValidationError from './../../molecules/form/validation-error';\nimport { Sublabel } from '../label/sublabel';\nimport './styles.scss';\nexport var RadioGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(RadioGroup, _React$Component);\n\n  var _super = _createSuper(RadioGroup);\n\n  function RadioGroup(props, context) {\n    var _this;\n\n    _classCallCheck(this, RadioGroup);\n\n    _this = _super.call(this, props, context);\n    _this.changeSelectedValue = _this.changeSelectedValue.bind(_assertThisInitialized(_this));\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    _this.notifyValidated = _this.notifyValidated.bind(_assertThisInitialized(_this));\n    _this.state = {\n      lastFocusedValue: props.selected,\n      valid: true,\n      validated: false\n    };\n    return _this;\n  }\n\n  _createClass(RadioGroup, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.props.validateOnExternalUpdate && nextProps.selected !== this.props.selected && nextProps.selected) {\n        this.changeSelectedValue(nextProps.selected);\n      } else {\n        this.setState({\n          lastFocusedValue: nextProps.selected\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_prevProps, prevState) {\n      if (prevState.valid !== this.state.valid) {\n        this.notifyValidated();\n      }\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(e) {\n      var _this2 = this;\n\n      var element = document.getElementById(e.target.htmlFor);\n\n      if (element) {\n        e.target = element;\n\n        if (e.target.disabled) {\n          return;\n        }\n\n        this.changeSelectedValue(e.target.value, function (v) {\n          return _this2.props.onChange(v);\n        });\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(e) {\n      var _this3 = this;\n\n      this.changeSelectedValue(e.target.value, function (v) {\n        return _this3.props.onChange(v);\n      });\n    }\n  }, {\n    key: \"changeSelectedValue\",\n    value: function changeSelectedValue(value, notify) {\n      if (value === this.state.lastFocusedValue) {\n        return;\n      }\n\n      if (notify) {\n        notify(value);\n      }\n\n      this.setState({\n        lastFocusedValue: value\n      });\n      this.validate(value);\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      var _this4 = this;\n\n      return new Promise(function (resolve) {\n        var validatedCB = function validatedCB() {\n          resolve();\n        };\n\n        if (_this4.props.isRequired) {\n          if (_this4.props.validator) {\n            _this4.setState({\n              valid: _this4.props.validator(value)\n            }, validatedCB);\n\n            return;\n          }\n\n          var empty = value === null || value === undefined || value === '';\n\n          _this4.setState({\n            valid: !empty\n          }, validatedCB);\n        } else {\n          _this4.setState({\n            valid: true\n          }, validatedCB);\n        }\n      });\n    }\n  }, {\n    key: \"notifyValidated\",\n    value: function notifyValidated() {\n      if (this.props.onValidated) {\n        this.props.onValidated(this.state.valid);\n      }\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField() {\n      this.setState({\n        validated: true\n      });\n      return this.validate(this.state.lastFocusedValue);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return this.state.valid;\n    }\n  }, {\n    key: \"renderErrorMessage\",\n    value: function renderErrorMessage() {\n      if (!this.props.getErrorMessage) {\n        return null;\n      }\n\n      var errorMessage = this.state.lastFocusedValue ? this.props.getErrorMessage(this.state.lastFocusedValue) : this.props.getErrorMessage('');\n      return React.createElement(ValidationError, {\n        isValid: this.state.valid,\n        error: errorMessage\n      });\n    }\n  }, {\n    key: \"renderLegend\",\n    value: function renderLegend() {\n      if (!this.props.legend) {\n        return null;\n      }\n\n      return React.createElement(\"legend\", {\n        className: this.props.legendClassName ? this.props.legendClassName : ''\n      }, this.props.legend, this.props.isRequired && this.props.requiredLabel && this.props.showRequiredLabel ? React.createElement(\"em\", null, \" \", this.props.requiredLabel) : '', !this.props.isRequired && this.props.optionalLabel && this.props.showOptionalLabel ? React.createElement(\"em\", null, \" \", this.props.optionalLabel) : '', this.props.helpButton, this.props.subLabel && React.createElement(Sublabel, {\n        sublabelText: this.props.subLabel\n      }));\n    }\n  }, {\n    key: \"isRadioValid\",\n    value: function isRadioValid(value) {\n      if (this.props.isRequired && this.state.lastFocusedValue === null) {\n        return false;\n      }\n\n      if (value === this.state.lastFocusedValue && !this.state.valid) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"renderHelp\",\n    value: function renderHelp() {\n      if (this.props.helpElement) {\n        return this.props.helpElement;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$props = this.props,\n          id = _this$props.id,\n          testId = _this$props.testId,\n          options = _this$props.options,\n          wrapperClassName = _this$props.wrapperClassName,\n          fieldsetClassName = _this$props.fieldsetClassName,\n          labelClassName = _this$props.labelClassName,\n          selected = _this$props.selected,\n          isRequired = _this$props.isRequired,\n          isStyleBlue = _this$props.isStyleBlue,\n          isStyleBoxed = _this$props.isStyleBoxed,\n          noFieldset = _this$props.noFieldset,\n          ariaLabelledBy = _this$props.ariaLabelledBy,\n          labelStringFetcher = _this$props.labelStringFetcher,\n          children = _this$props.children;\n      var _this$state = this.state,\n          lastFocusedValue = _this$state.lastFocusedValue,\n          valid = _this$state.valid,\n          validated = _this$state.validated;\n      var i = 0;\n      var inputClasses = classNames({\n        'atom_radio__input--boxed': !isStyleBoxed\n      });\n      var inputFields = options.map(function (e) {\n        var inputId = id + '-hn-' + i++;\n        var label = e.label;\n        var labelClasses = classNames({\n          'atom_radio__label--checked': e.type === selected,\n          'atom_radio__label--boxed': isStyleBoxed\n        }, labelClassName);\n        var checkiconClasses = classNames({\n          'atom_radio__checkicon--lilla': !isStyleBlue,\n          'atom_radio__checkicon--blue': isStyleBlue,\n          'atom_radio__checkicon--boxed': isStyleBoxed,\n          'atom_radio__checkicon--checked': e.type === selected,\n          'atom_radio__checkicon--disabled': e.disabled\n        });\n        var textClasses = classNames({\n          'atom_radio__text--checked': e.type === selected\n        });\n\n        if (labelStringFetcher) {\n          label = labelStringFetcher(label);\n        }\n\n        var ariaInvalid = {};\n\n        if (validated) {\n          ariaInvalid['aria-invalid'] = !_this5.isRadioValid(e.type);\n        }\n\n        return React.createElement(\"div\", {\n          key: inputId,\n          className: \"atom_radio\"\n        }, React.createElement(\"input\", Object.assign({\n          id: inputId,\n          onChange: _this5.onChange,\n          onClick: _this5.onClick,\n          type: \"radio\",\n          checked: e.type === selected,\n          value: e.type,\n          \"aria-checked\": lastFocusedValue === e.type,\n          \"aria-label\": e.ariaLabel,\n          disabled: e.disabled ? e.disabled : false,\n          required: isRequired,\n          className: \"atom_radio__input \".concat(inputClasses)\n        }, ariaInvalid)), React.createElement(\"label\", {\n          htmlFor: inputId,\n          onClick: _this5.onChange,\n          role: \"button\",\n          className: \"atom_radio__label \".concat(labelClasses)\n        }, React.createElement(\"span\", {\n          tabIndex: -1,\n          className: \"atom_radio__checkicon \".concat(checkiconClasses)\n        }, React.createElement(\"span\", {\n          tabIndex: -1,\n          className: \"atom_radio__checkicon_innercicrcle\"\n        })), React.createElement(\"span\", {\n          className: \"atom_radio__text \".concat(textClasses)\n        }, label), e.content), e.hjelpetrigger);\n      });\n      var content = React.createElement(React.Fragment, null, React.createElement(PrivateRadioGroup, {\n        name: id,\n        value: selected,\n        classNameGroup: this.props.classNameGroup\n      }, React.createElement(React.Fragment, null, inputFields)), children);\n      return React.createElement(\"div\", {\n        className: \"mol_validation \".concat(!valid ? 'mol_validation--active' : '', \" \").concat(wrapperClassName ? wrapperClassName : ''),\n        id: \"\".concat(id, \"-wrapper\"),\n        \"data-testid\": testId\n      }, this.renderErrorMessage(), !noFieldset ? React.createElement(\"fieldset\", {\n        className: fieldsetClassName ? fieldsetClassName : ''\n      }, this.renderLegend(), this.renderHelp(), content) : React.createElement(\"div\", {\n        \"aria-labelledby\": ariaLabelledBy,\n        role: \"radiogroup\"\n      }, content));\n    }\n  }]);\n\n  return RadioGroup;\n}(React.Component);\nRadioGroup.hnFormComponent = true;","map":null,"metadata":{},"sourceType":"module"}