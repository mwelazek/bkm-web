{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst react_redux_1 = require(\"react-redux\");\n\nconst form_1 = __importDefault(require(\"@helsenorge/toolkit/components/molecules/form\"));\n\nconst form_2 = require(\"../actions/form\");\n\nconst newValue_1 = require(\"../actions/newValue\");\n\nconst repeat_button_1 = __importDefault(require(\"../components/formcomponents/repeat/repeat-button\"));\n\nconst extensions_1 = __importDefault(require(\"../constants/extensions\"));\n\nconst index_1 = __importDefault(require(\"../constants/index\"));\n\nconst itemType_1 = __importDefault(require(\"../constants/itemType\"));\n\nconst presentationButtonsType_1 = require(\"../constants/presentationButtonsType\");\n\nconst form_3 = require(\"../reducers/form\");\n\nconst actionRequester_1 = require(\"../util/actionRequester\");\n\nconst extension_1 = require(\"../util/extension\");\n\nconst hacks_1 = require(\"../util/hacks\");\n\nconst index_2 = require(\"../util/index\");\n\nconst questionnaireInspector_1 = require(\"../util/questionnaireInspector\");\n\nconst renderContext_1 = require(\"../util/renderContext\");\n\nconst scoringCalculator_1 = require(\"../util/scoringCalculator\");\n\nconst skjemautfyller_core_1 = require(\"../util/skjemautfyller-core\");\n\nclass Skjemautfyller extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = () => {\n      const {\n        formData,\n        onSubmit\n      } = this.props;\n\n      if (formData && formData.Content && onSubmit) {\n        onSubmit(formData.Content);\n      }\n    };\n\n    this.onSave = () => {\n      if (this.props.onSave && this.props.formData && this.props.formData.Content) {\n        this.props.onSave(this.props.formData.Content);\n      }\n    };\n\n    this.onAnswerChange = (newState, _path, item, answer) => {\n      if (this.props.onChange && newState.skjemautfyller.form.FormDefinition.Content && newState.skjemautfyller.form.FormData.Content) {\n        const actionRequester = new actionRequester_1.ActionRequester(newState.skjemautfyller.form.FormDefinition.Content, newState.skjemautfyller.form.FormData.Content);\n        const questionnaireInspector = new questionnaireInspector_1.QuestionniareInspector(newState.skjemautfyller.form.FormDefinition.Content, newState.skjemautfyller.form.FormData.Content);\n        this.props.onChange(item, answer, actionRequester, questionnaireInspector);\n\n        for (const action of actionRequester.getActions()) {\n          this.props.dispatch(action);\n        }\n      }\n\n      this.runScoringCalculator(newState);\n    };\n\n    this.runScoringCalculator = newState => {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n\n      if (!this.scoringCalculator && ((_a = this.props.formDefinition) === null || _a === void 0 ? void 0 : _a.Content)) {\n        this.scoringCalculator = new scoringCalculator_1.ScoringCalculator(this.props.formDefinition.Content);\n      }\n\n      if (!this.scoringCalculator || !((_d = (_c = (_b = newState.skjemautfyller) === null || _b === void 0 ? void 0 : _b.form) === null || _c === void 0 ? void 0 : _c.FormData) === null || _d === void 0 ? void 0 : _d.Content) || !((_g = (_f = (_e = newState.skjemautfyller) === null || _e === void 0 ? void 0 : _e.form) === null || _f === void 0 ? void 0 : _f.FormDefinition) === null || _g === void 0 ? void 0 : _g.Content)) {\n        return;\n      }\n\n      const scores = this.scoringCalculator.calculate(newState.skjemautfyller.form.FormData.Content);\n      const actions = [];\n\n      for (const linkId in scores) {\n        const templateItem = this.scoringCalculator.getCachedTotalOrSectionItem(linkId);\n        if (!templateItem) continue;\n        const extension = extension_1.getQuestionnaireUnitExtensionValue(templateItem);\n        if (!extension) continue;\n        const quantity = {\n          unit: extension.display,\n          system: extension.system,\n          code: extension.code\n        };\n        const item = skjemautfyller_core_1.getQuestionnaireDefinitionItem(linkId, (_h = newState.skjemautfyller.form.FormDefinition.Content) === null || _h === void 0 ? void 0 : _h.item);\n        const itemsAndPaths = skjemautfyller_core_1.getResponseItemAndPathWithLinkId(linkId, newState.skjemautfyller.form.FormData.Content);\n        let value = scores[linkId];\n\n        if (item && value != null && !isNaN(value) && isFinite(value)) {\n          const decimalPlacesExtension = extension_1.getExtension(extensions_1.default.STEP_URL, item);\n\n          if (decimalPlacesExtension && decimalPlacesExtension.valueInteger != null) {\n            const places = Number(decimalPlacesExtension.valueInteger);\n            value = Number(value === null || value === void 0 ? void 0 : value.toFixed(places));\n          }\n\n          quantity.value = value;\n        }\n\n        for (const itemAndPath of itemsAndPaths) {\n          actions.push(newValue_1.newQuantityValue(itemAndPath.path, quantity, item));\n        }\n      }\n\n      for (const a of actions) {\n        this.props.dispatch(a);\n      }\n    };\n\n    this.renderSkjema = pdf => {\n      const {\n        formDefinition,\n        resources\n      } = this.props;\n\n      if (!formDefinition || !formDefinition.Content || !resources) {\n        return null;\n      }\n\n      if (pdf) {\n        return this.renderFormItems(true);\n      }\n\n      const presentationButtonsType = extension_1.getPresentationButtonsExtension(formDefinition.Content);\n      const form = this.props.authorized ? this.renderFormWhenAuthorized() : this.renderFormWhenNotAuthorized();\n      return React.createElement(\"div\", {\n        className: this.getButtonClasses(presentationButtonsType, ['page_skjemautfyller__content'])\n      }, React.createElement(\"div\", {\n        className: \"page_skjemautfyller__messageboxes\"\n      }), form);\n    };\n\n    this.renderFormWhenNotAuthorized = () => {\n      const {\n        resources\n      } = this.props;\n\n      if (!resources) {\n        return;\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(form_1.default, {\n        action: \"#\",\n        disabled: this.props.blockSubmit,\n        errorMessage: resources.formError,\n        requiredLabel: resources.formRequired,\n        optionalLabel: resources.formOptional,\n        triggerPreventDefaultOnSubmit: true,\n        validationSummaryPlacement: this.props.validationSummaryPlacement,\n        validationSummary: {\n          enable: true,\n          header: resources.validationSummaryHeader\n        },\n        submitButtonDisabled: this.props.submitButtonDisabled,\n        pauseButtonDisabled: this.props.saveButtonDisabled\n      }, this.renderFormItems()), React.createElement(\"div\", {\n        className: \"page_skjemautfyller__buttonwrapper page_skjemautfyller__saveblock\"\n      }, this.props.loginButton));\n    };\n\n    this.renderFormWhenAuthorized = () => {\n      const {\n        resources\n      } = this.props;\n\n      if (!resources) {\n        return;\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(form_1.default, {\n        action: \"#\",\n        disabled: this.props.blockSubmit,\n        submitButtonText: resources.formSend,\n        errorMessage: resources.formError,\n        onSubmit: this.onSubmit,\n        requiredLabel: resources.formRequired,\n        optionalLabel: resources.formOptional,\n        cancelButtonText: resources.formCancel,\n        pauseButtonText: resources.formSave ? resources.formSave : 'Lagre',\n        onPause: this.props.onSave ? this.onSave : undefined,\n        pauseButtonClasses: 'page_skjemautfyller__pausebutton',\n        pauseButtonType: \"display\",\n        submitButtonType: \"display\",\n        cancelButtonType: \"display\",\n        pauseButtonLevel: \"secondary\",\n        cancelButtonRight: true,\n        onCancel: this.props.onCancel,\n        buttonClasses: \"page_skjemautfyller__saveblock\",\n        validationSummaryPlacement: this.props.validationSummaryPlacement,\n        validationSummary: {\n          enable: true,\n          header: resources.validationSummaryHeader\n        },\n        submitButtonDisabled: this.props.submitButtonDisabled,\n        pauseButtonDisabled: this.props.saveButtonDisabled\n      }, this.renderFormItems()));\n    };\n\n    this.state = {\n      valid: true,\n      validated: false,\n      showCancelLightbox: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.mount();\n  }\n\n  componentDidUpdate() {\n    hacks_1.IE11HackToWorkAroundBug187484();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.questionnaire && nextProps.questionnaire !== this.props.questionnaire) {\n      this.props.updateSkjema(nextProps.questionnaire, nextProps.questionnaireResponse, nextProps.language, nextProps.syncQuestionnaireResponse);\n    }\n  }\n\n  renderFormItems(pdf) {\n    const {\n      formDefinition,\n      resources,\n      formData,\n      promptLoginMessage\n    } = this.props;\n\n    if (!formDefinition || !formDefinition.Content || !formDefinition.Content.item) {\n      return undefined;\n    }\n\n    const contained = formDefinition.Content.contained;\n    const renderedItems = [];\n    const isNavigatorEnabled = !!extension_1.getNavigatorExtension(formDefinition.Content);\n    let isNavigatorBlindzoneInitiated = false;\n    formDefinition.Content.item.map(item => {\n      if (index_2.isHiddenItem(item)) return [];\n      const Comp = index_2.getComponentForItem(item.type);\n\n      if (!Comp) {\n        return undefined;\n      }\n\n      let responseItems;\n\n      if (formData) {\n        responseItems = skjemautfyller_core_1.getRootQuestionnaireResponseItemFromData(item.linkId, formData);\n      }\n\n      if (responseItems && responseItems.length > 0) {\n        responseItems.forEach((responseItem, index) => {\n          var _a;\n\n          const repeatButton = item.repeats && index_2.shouldRenderRepeatButton(item, responseItems, index) ? React.createElement(\"div\", {\n            className: \"page_skjemautfyller__repeatbutton-wrapper\"\n          }, React.createElement(repeat_button_1.default, {\n            key: `item_${item.linkId}_add_repeat_item`,\n            resources: this.props.resources,\n            item: item,\n            responseItems: responseItems,\n            parentPath: this.props.path,\n            renderContext: new renderContext_1.RenderContext()\n          })) : undefined;\n          const path = skjemautfyller_core_1.createPathForItem(this.props.path, item, responseItem, index);\n\n          if (isNavigatorEnabled && item.type === itemType_1.default.GROUP && !isNavigatorBlindzoneInitiated) {\n            isNavigatorBlindzoneInitiated = true;\n            renderedItems.push(React.createElement(\"section\", {\n              id: \"navigator_blindzone\"\n            }));\n          }\n\n          renderedItems.push(React.createElement(Comp, {\n            language: (_a = formDefinition.Content) === null || _a === void 0 ? void 0 : _a.language,\n            pdf: pdf,\n            includeSkipLink: isNavigatorEnabled && item.type === itemType_1.default.GROUP,\n            promptLoginMessage: promptLoginMessage,\n            key: `item_${responseItem.linkId}_${index}`,\n            id: 'item_' + responseItem.linkId + skjemautfyller_core_1.createIdSuffix(path, index, item.repeats),\n            item: item,\n            responseItem: responseItem,\n            answer: skjemautfyller_core_1.getAnswerFromResponseItem(responseItem),\n            resources: resources,\n            containedResources: contained,\n            path: path,\n            headerTag: index_1.default.DEFAULT_HEADER_TAG,\n            visibleDeleteButton: skjemautfyller_core_1.shouldRenderDeleteButton(item, index),\n            repeatButton: repeatButton,\n            onRequestAttachmentLink: this.props.onRequestAttachmentLink,\n            onOpenAttachment: this.props.onOpenAttachment,\n            onDeleteAttachment: this.props.onDeleteAttachment,\n            uploadAttachment: this.props.uploadAttachment,\n            onRequestHelpButton: this.props.onRequestHelpButton,\n            onRequestHelpElement: this.props.onRequestHelpElement,\n            attachmentErrorMessage: this.props.attachmentErrorMessage,\n            attachmentMaxFileSize: this.props.attachmentMaxFileSize,\n            attachmentValidTypes: this.props.attachmentValidTypes,\n            validateScriptInjection: this.props.validateScriptInjection,\n            onAnswerChange: this.onAnswerChange,\n            renderContext: new renderContext_1.RenderContext(),\n            onRenderMarkdown: this.props.onRenderMarkdown,\n            fetchValueSet: this.props.fetchValueSet,\n            autoSuggestProps: this.props.autoSuggestProps\n          }));\n        });\n      }\n    });\n    return renderedItems;\n  }\n\n  getButtonClasses(presentationButtonsType, defaultClasses) {\n    defaultClasses = defaultClasses !== null && defaultClasses !== void 0 ? defaultClasses : [];\n\n    if (presentationButtonsType === presentationButtonsType_1.PresentationButtonsType.None) {\n      defaultClasses.push('page_skjemautfyller__hidden_buttons');\n    }\n\n    if (presentationButtonsType === presentationButtonsType_1.PresentationButtonsType.Sticky || this.props.sticky && !presentationButtonsType) {\n      defaultClasses.push('page_skjemautfyller__stickybar');\n    }\n\n    return defaultClasses.join(' ');\n  }\n\n  render() {\n    const {\n      resources\n    } = this.props;\n\n    if (!resources) {\n      return null;\n    }\n\n    return React.createElement(React.Fragment, null, this.renderSkjema(this.props.pdf));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    formDefinition: form_3.getFormDefinition(state),\n    formData: form_3.getFormData(state)\n  };\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    updateSkjema: (questionnaire, questionnaireResponse, language, syncQuestionnaireResponse) => {\n      dispatch(form_2.setSkjemaDefinition(questionnaire, questionnaireResponse, language, syncQuestionnaireResponse));\n    },\n    mount: () => {\n      if (props.questionnaire) {\n        dispatch(form_2.setSkjemaDefinition(props.questionnaire, props.questionnaireResponse, props.language, props.syncQuestionnaireResponse));\n      }\n    },\n    dispatch,\n    path: []\n  };\n}\n\nconst SkjemautfyllerContainer = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(Skjemautfyller);\nexports.SkjemautfyllerContainer = SkjemautfyllerContainer;","map":null,"metadata":{},"sourceType":"script"}