{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resourceTypeParam = exports.resourceIdParam = exports.questionnaireResponseResourceType = exports.questionnaireResourceType = exports.QuestRForm = exports.BaseQuestRForm = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reducers = _interopRequireDefault(require(\"@helsenorge/skjemautfyller/reducers\"));\n\nvar _components = require(\"@helsenorge/skjemautfyller/components\");\n\nvar _redux = require(\"redux\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _reduxThunk = _interopRequireDefault(require(\"redux-thunk\"));\n\nvar _reactRouter = require(\"react-router\");\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar _notifications = require(\"@opensrp/notifications\");\n\nvar _antd = require(\"antd\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _mls = require(\"./mls\");\n\nvar _uuid = require(\"uuid\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2[\"default\"])(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar store = (0, _redux.createStore)(_reducers[\"default\"], (0, _redux.applyMiddleware)(_reduxThunk[\"default\"]));\nvar questionnaireResponseResourceType = 'QuestionnaireResponse';\nexports.questionnaireResponseResourceType = questionnaireResponseResourceType;\nvar questionnaireResourceType = 'Questionnaire';\nexports.questionnaireResourceType = questionnaireResourceType;\n\nvar BaseQuestRForm = function BaseQuestRForm(props) {\n  var resourceId = props.resourceId,\n      fhirBaseURL = props.fhirBaseURL,\n      onSubmit = props.onSubmit,\n      onCancel = props.onCancel,\n      isQuestionnaire = props.isQuestionnaire;\n\n  var _useTranslation = (0, _mls.useTranslation)(),\n      t = _useTranslation.t;\n\n  var _useQuery = (0, _reactQuery.useQuery)([questionnaireResponseResourceType, resourceId], function () {\n    return new _reactUtils.FHIRServiceClass(fhirBaseURL, questionnaireResponseResourceType).read(resourceId);\n  }, {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    enabled: !isQuestionnaire\n  }),\n      questRespIsLoading = _useQuery.isLoading,\n      questResp = _useQuery.data,\n      questRespError = _useQuery.error;\n\n  var questId = isQuestionnaire ? \"\".concat(questionnaireResourceType, \"/\").concat(resourceId) : questResp === null || questResp === void 0 ? void 0 : questResp.questionnaire;\n\n  var _useQuery2 = (0, _reactQuery.useQuery)([questionnaireResourceType, questId], function () {\n    return new _reactUtils.FHIRServiceClass(fhirBaseURL, '').read(questId);\n  }, {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    enabled: isQuestionnaire || !!(questResp !== null && questResp !== void 0 && questResp.questionnaire)\n  }),\n      isLoading = _useQuery2.isLoading,\n      data = _useQuery2.data,\n      error = _useQuery2.error;\n\n  if (isLoading || questRespIsLoading) {\n    return _react[\"default\"].createElement(_antd.Spin, {\n      size: \"large\",\n      className: \"custom-spinner\"\n    });\n  }\n\n  if (error && !data && questRespError && !questResp) {\n    return _react[\"default\"].createElement(_reactUtils.BrokenPage, {\n      errorMessage: \"\".concat(error)\n    });\n  }\n\n  return _react[\"default\"].createElement(\"div\", {\n    className: \"content-section\"\n  }, _react[\"default\"].createElement(_reactRedux.Provider, {\n    store: store,\n    key: \"1\"\n  }, _react[\"default\"].createElement(_components.SkjemautfyllerContainer, {\n    store: store,\n    questionnaire: data,\n    questionnaireResponse: questResp,\n    onSubmit: onSubmit,\n    onCancel: onCancel,\n    resources: {\n      formCancel: t('Cancel'),\n      formSend: t('Submit')\n    },\n    authorized: true\n  })));\n};\n\nexports.BaseQuestRForm = BaseQuestRForm;\nvar resourceIdParam = 'resourceId';\nexports.resourceIdParam = resourceIdParam;\nvar resourceTypeParam = 'resourceType';\nexports.resourceTypeParam = resourceTypeParam;\n\nvar QuestRForm = function QuestRForm(props) {\n  var _useParams = (0, _reactRouter.useParams)(),\n      resourceId = _useParams.resourceId,\n      resourceType = _useParams.resourceType;\n\n  var history = (0, _reactRouter.useHistory)();\n\n  var _useTranslation2 = (0, _mls.useTranslation)(),\n      t = _useTranslation2.t;\n\n  var isQuestionnaire = resourceType === 'Questionnaire';\n  var fhirBaseURL = props.fhirBaseURL;\n\n  var onSubmit = function onSubmit(qr) {\n    var payload = _objectSpread(_objectSpread({}, qr), {}, {\n      id: (0, _uuid.v4)()\n    });\n\n    var service = new _reactUtils.FHIRServiceClass(fhirBaseURL, questionnaireResponseResourceType);\n    service.update(payload).then(function () {\n      return (0, _notifications.sendSuccessNotification)(t('Questionnaire Response resource submitted successfully'));\n    })[\"catch\"](function (e) {\n      return (0, _notifications.sendErrorNotification)(e);\n    });\n  };\n\n  var onCancel = function onCancel() {\n    return history.goBack();\n  };\n\n  var rawQuestProps = {\n    resourceId: resourceId,\n    isQuestionnaire: isQuestionnaire,\n    onSubmit: onSubmit,\n    onCancel: onCancel,\n    fhirBaseURL: fhirBaseURL\n  };\n  return _react[\"default\"].createElement(BaseQuestRForm, rawQuestProps);\n};\n\nexports.QuestRForm = QuestRForm;","map":null,"metadata":{},"sourceType":"script"}