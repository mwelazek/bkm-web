{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport { AnalyticsId } from '@helsenorge/core-utils/adobe-analytics';\nimport Check from '../../../icons/Check';\nimport { Spinner } from '../../spinner';\nexport class SaveButtonSimple extends React.Component {\n  constructor(props) {\n    super(props);\n    this.timer = null;\n\n    this.onClick = () => {\n      if (this.props.onClick) {\n        this.props.onClick();\n      }\n\n      this.setState({\n        saved: false\n      });\n    };\n\n    this.setSaved = () => {\n      this.setState({\n        saved: true\n      });\n\n      if (this.timer) {\n        clearTimeout(this.timer);\n      }\n\n      this.timer = setTimeout(() => {\n        this.timer = null;\n\n        if (this.props.updateSaved) {\n          this.props.updateSaved(false);\n        } else {\n          this.setState({\n            saved: false\n          });\n        }\n      }, 3000);\n    };\n\n    this.state = {\n      saved: false,\n      width: 'auto'\n    };\n    this.buttonRef = React.createRef();\n  }\n\n  componentDidMount() {\n    let buttonwidth = this.buttonRef.current ? this.buttonRef.current.offsetWidth : 0;\n\n    if (buttonwidth < 100) {\n      buttonwidth = 100;\n    }\n\n    this.setState({\n      width: this.props.noWidth ? this.state.width : buttonwidth + 'px'\n    });\n  }\n\n  UNSAFE_componentWillReceiveProps(newProps) {\n    if (newProps.saved && !this.props.saved && !this.state.saved) {\n      this.setSaved();\n    }\n\n    if (!newProps.saved && this.state.saved) {\n      this.setState({\n        saved: false\n      });\n    }\n  }\n\n  render() {\n    const buttonClasses = classNames('atom_actionbutton atom_actionbutton--primary atom_actionbutton--savebutton', {\n      'atom_actionbutton--saving': this.props.saving,\n      'atom_actionbutton--saved': this.state.saved\n    }, this.props.classNames);\n    const spinner = React.createElement(Spinner, {\n      inline: true,\n      white: true\n    });\n    const text = this.state.saved ? React.createElement(\"span\", {\n      className: \"atom_actionbutton__text atom_actionbutton__text--saved\"\n    }, this.props.savedText, \" \", React.createElement(Check, {\n      color: \"white\"\n    })) : React.createElement(\"span\", {\n      className: \"atom_actionbutton__text\"\n    }, this.props.saveText);\n    return React.createElement(\"button\", {\n      type: \"button\",\n      ref: this.props.forwardedRef ? this.props.forwardedRef : this.buttonRef,\n      className: buttonClasses,\n      onClick: this.onClick,\n      style: {\n        width: this.state.width\n      },\n      \"aria-busy\": this.props.saving,\n      \"aria-live\": \"polite\",\n      disabled: this.props.disabled,\n      \"data-testid\": this.props.testId,\n      \"data-analyticsid\": AnalyticsId.SaveButton\n    }, this.props.saving ? spinner : text);\n  }\n\n}\n\nfunction SaveButtonForwardRef(props, ref) {\n  return React.createElement(SaveButtonSimple, Object.assign({}, props, {\n    forwardedRef: ref\n  }));\n}\n\nexport const SaveButton = React.forwardRef(SaveButtonForwardRef);","map":null,"metadata":{},"sourceType":"module"}