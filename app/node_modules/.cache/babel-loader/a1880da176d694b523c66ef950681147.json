{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport classNames from 'classnames';\nimport RcSegmented from 'rc-segmented';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport useSize from '../config-provider/hooks/useSize';\nimport useStyle from './style';\n\nfunction isSegmentedLabeledOptionWithIcon(option) {\n  return typeof option === 'object' && !!(option === null || option === void 0 ? void 0 : option.icon);\n}\n\nconst Segmented = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    rootClassName,\n    block,\n    options = [],\n    size: customSize = 'middle'\n  } = props,\n        restProps = __rest(props, [\"prefixCls\", \"className\", \"rootClassName\", \"block\", \"options\", \"size\"]);\n\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('segmented', customizePrefixCls); // Style\n\n  const [wrapSSR, hashId] = useStyle(prefixCls); // ===================== Size =====================\n\n  const mergedSize = useSize(customSize); // syntactic sugar to support `icon` for Segmented Item\n\n  const extendedOptions = React.useMemo(() => options.map(option => {\n    if (isSegmentedLabeledOptionWithIcon(option)) {\n      const {\n        icon,\n        label\n      } = option,\n            restOption = __rest(option, [\"icon\", \"label\"]);\n\n      return Object.assign(Object.assign({}, restOption), {\n        label: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: `${prefixCls}-item-icon`\n        }, icon), label && /*#__PURE__*/React.createElement(\"span\", null, label))\n      });\n    }\n\n    return option;\n  }), [options, prefixCls]);\n  return wrapSSR( /*#__PURE__*/React.createElement(RcSegmented, Object.assign({}, restProps, {\n    className: classNames(className, rootClassName, {\n      [`${prefixCls}-block`]: block,\n      [`${prefixCls}-sm`]: mergedSize === 'small',\n      [`${prefixCls}-lg`]: mergedSize === 'large'\n    }, hashId),\n    options: extendedOptions,\n    ref: ref,\n    prefixCls: prefixCls,\n    direction: direction\n  })));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Segmented.displayName = 'Segmented';\n}\n\nexport default Segmented;","map":null,"metadata":{},"sourceType":"module"}