{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport CheckThick from './../../icons/CheckThick';\nimport ValidationError from './../../molecules/form/validation-error';\nimport './styles.scss';\nexport var CheckBox = /*#__PURE__*/function (_React$Component) {\n  _inherits(CheckBox, _React$Component);\n\n  var _super = _createSuper(CheckBox);\n\n  function CheckBox(props) {\n    var _this;\n\n    _classCallCheck(this, CheckBox);\n\n    _this = _super.call(this, props);\n\n    _this.onChange = function (event) {\n      _this.handleOnChange(!_this.props.checked, function () {\n        return _this.props.onChange(event);\n      });\n    };\n\n    _this.handleOnChange = function (checked, notify) {\n      _this.validate(checked, true);\n\n      if (notify) {\n        notify();\n      }\n    };\n\n    _this.state = {\n      valid: true,\n      validated: false\n    };\n    return _this;\n  }\n\n  _createClass(CheckBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setChecked();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.setChecked();\n\n      if (this.props.validateOnExternalUpdate && prevProps.checked !== this.props.checked) {\n        this.handleOnChange(this.props.checked);\n      }\n    }\n  }, {\n    key: \"setChecked\",\n    value: function setChecked() {\n      var node = ReactDOM.findDOMNode(this);\n      var $checkbox = node instanceof Element ? node.querySelector('input[type=\"checkbox\"]') : null;\n\n      if ($checkbox) {\n        this.props.checked ? $checkbox.setAttribute('checked', 'checked') : $checkbox.removeAttribute('checked');\n      }\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField() {\n      this.setState({\n        validated: true\n      });\n      return this.validate(this.props.checked, false);\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value, notifyValidated) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        var validatedCB = function validatedCB() {\n          if (notifyValidated) {\n            _this2.notifyValidated();\n          }\n\n          resolve();\n        };\n\n        if (_this2.props.isRequired) {\n          _this2.setState({\n            valid: value === true\n          }, validatedCB);\n        } else {\n          _this2.setState({\n            valid: true\n          }, validatedCB);\n        }\n      });\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return this.state.valid;\n    }\n  }, {\n    key: \"createDangerousHtmlLabelSuffix\",\n    value: function createDangerousHtmlLabelSuffix() {\n      if (!this.props.labelSuffixDangerousHtml) {\n        return null;\n      }\n\n      var dangerourHtml = {\n        __html: this.props.labelSuffixDangerousHtml\n      };\n      return React.createElement(\"span\", {\n        dangerouslySetInnerHTML: dangerourHtml\n      });\n    }\n  }, {\n    key: \"notifyValidated\",\n    value: function notifyValidated() {\n      if (this.props.onValidated) {\n        this.props.onValidated(this.state.valid);\n      }\n    }\n  }, {\n    key: \"renderHelp\",\n    value: function renderHelp() {\n      if (this.props.helpElement) {\n        return this.props.helpElement;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isStyleBlue = _this$props.isStyleBlue,\n          isStyleBoxed = _this$props.isStyleBoxed,\n          labelClassName = _this$props.labelClassName,\n          checked = _this$props.checked,\n          disabled = _this$props.disabled,\n          checkboxTestId = _this$props.checkboxTestId,\n          labelTestId = _this$props.labelTestId,\n          validationTestId = _this$props.validationTestId;\n      var labelClasses = classNames({\n        'atom_checkbox__label--boxed': isStyleBoxed,\n        'atom_checkbox__label--checked': checked\n      }, labelClassName);\n      var checkiconClasses = classNames({\n        'atom_checkbox__checkicon--lilla': !isStyleBlue,\n        'atom_checkbox__checkicon--blue': isStyleBlue,\n        'atom_checkbox__checkicon--boxed': isStyleBoxed,\n        'atom_checkbox__checkicon--checked': checked,\n        'atom_checkbox__checkicon--disabled': disabled\n      });\n      var textClasses = classNames({\n        'atom_checkbox__text--checked': checked\n      });\n      var wrapperClasses = classNames({\n        'mol_validation--active': !this.state.valid\n      }, this.props.className);\n      var comment = this.props.comment ? React.createElement(\"span\", {\n        className: \"atom_checkbox__comment\"\n      }, this.props.comment) : false;\n      return React.createElement(\"div\", {\n        className: \"mol_validation atom_checkbox \".concat(wrapperClasses),\n        id: \"\".concat(this.props.id, \"-wrapper\")\n      }, React.createElement(ValidationError, {\n        isValid: this.state.valid,\n        error: this.props.errorMessage ? this.props.errorMessage : '',\n        testId: validationTestId\n      }), React.createElement(\"div\", {\n        className: \"atom_checkbox__labelwrapper\"\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        checked: this.props.checked,\n        \"aria-checked\": this.props.checked,\n        id: this.props.id,\n        onChange: this.onChange,\n        disabled: this.props.disabled,\n        className: \"atom_checkbox__input\",\n        \"data-testid\": checkboxTestId\n      }), React.createElement(\"label\", {\n        htmlFor: this.props.id,\n        className: \"atom_checkbox__label \".concat(labelClasses),\n        \"data-testid\": labelTestId\n      }, React.createElement(CheckThick, {\n        size: \"small\",\n        tabIndex: -1,\n        className: \"atom_checkbox__checkicon \".concat(checkiconClasses)\n      }), React.createElement(\"span\", {\n        className: \"atom_checkbox__text \".concat(textClasses)\n      }, this.props.label), this.createDangerousHtmlLabelSuffix(), \" \", comment), this.props.helpButton ? React.createElement(\"span\", {\n        className: \"atom_helptrigger-container\"\n      }, this.props.helpButton) : null), this.renderHelp(), this.props.children);\n    }\n  }]);\n\n  return CheckBox;\n}(React.Component);\nCheckBox.hnFormComponent = true;","map":null,"metadata":{},"sourceType":"module"}