{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport { Label } from './../../atoms/label';\nimport ValidationError from './../../molecules/form/validation-error';\nimport './styles.scss';\nexport default class SafeSelectField extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = e => {\n      const value = e.target.value;\n      let formattedValue = value;\n\n      if (this.props.onChangeFormatter) {\n        formattedValue = this.props.onChangeFormatter(value);\n      }\n\n      if (this.state.validated) {\n        this.setState({\n          value: formattedValue\n        }, this.validateField);\n      } else {\n        this.setState({\n          value: formattedValue\n        }, this.validateField);\n      }\n\n      this.notifyChanged(e);\n    };\n\n    this.notifyChanged = e => {\n      if (this.props.onChange) {\n        this.props.onChange(e, this.props.id);\n      }\n    };\n\n    this.notifyValidated = () => {\n      if (this.props.onValidated) {\n        this.props.onValidated(this.state.isValid);\n      }\n    };\n\n    this.onFocus = e => {\n      if (this.props.onFocus) {\n        this.props.onFocus(e, this.props.id);\n      }\n    };\n\n    this.focus = () => {\n      if (this.selectElementRef.current) {\n        this.selectElementRef.current.focus();\n      }\n    };\n\n    this.getOptionWithValue = value => {\n      if (!this.props.options || !value) {\n        return undefined;\n      }\n\n      const filteredOptions = this.props.options.filter(o => o.value === value);\n\n      if (!filteredOptions || filteredOptions.length === 0) {\n        return undefined;\n      }\n\n      return filteredOptions[0];\n    };\n\n    this.validateField = () => {\n      return new Promise(resolve => {\n        const validatedCB = () => {\n          this.notifyValidated();\n          resolve();\n        };\n\n        const value = this.state.value;\n\n        if (this.props.onChangeValidator && this.props.isRequired) {\n          this.setState({\n            validated: true,\n            isValid: this.props.onChangeValidator(value)\n          }, validatedCB);\n          return;\n        }\n\n        let valid = false;\n\n        if (this.props.isRequired) {\n          if (this.getOptionWithValue(value)) {\n            valid = true;\n          }\n        } else {\n          valid = true;\n        }\n\n        this.setState({\n          validated: true,\n          isValid: valid\n        }, validatedCB);\n      });\n    };\n\n    this.isValid = () => {\n      return this.state.isValid;\n    };\n\n    this.renderErrorMessage = () => {\n      if (this.props.validationErrorRenderer && !this.state.isValid) {\n        return this.props.validationErrorRenderer;\n      }\n\n      let error;\n\n      if (this.props.errorMessage) {\n        error = typeof this.props.errorMessage === 'string' ? this.props.errorMessage : this.props.errorMessage(this.state.value);\n      } else {\n        error = 'Ugyldig verdi';\n      }\n\n      return React.createElement(ValidationError, {\n        isValid: this.state.isValid,\n        error: error,\n        testId: this.props.validationTestId\n      });\n    };\n\n    this.renderLabel = () => {\n      if (this.props.label !== undefined) {\n        const labelText = React.createElement(React.Fragment, null, this.props.label, this.props.isRequired && this.props.requiredLabel && this.props.showRequiredLabel ? React.createElement(\"em\", null, \" \", this.props.requiredLabel) : '', !this.props.isRequired && this.props.optionalLabel && this.props.showOptionalLabel ? React.createElement(\"em\", null, \" \", this.props.optionalLabel) : '');\n        return React.createElement(Label, {\n          labelText: labelText,\n          htmlFor: this.props.selectName,\n          sublabelText: this.props.subLabel,\n          className: this.props.showLabelLeft ? 'atom_label--showleft' : '',\n          testId: this.props.labelTestId,\n          helpButton: this.props.helpButton\n        });\n      }\n\n      return null;\n    };\n\n    this.selectElementRef = React.createRef();\n    this.state = {\n      isValid: true,\n      value: undefined,\n      validated: false\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    const {\n      selected,\n      value\n    } = this.props;\n    const compatibleValue = value ? value : selected;\n\n    if (compatibleValue === '' || compatibleValue === null || compatibleValue === undefined) {\n      return;\n    }\n\n    this.setState({\n      value: compatibleValue\n    });\n\n    if (this.props.onChangeValidator) {\n      this.setState({\n        isValid: this.props.onChangeValidator(compatibleValue)\n      });\n    }\n  }\n\n  componentDidMount() {\n    const {\n      value\n    } = this.props;\n\n    if (value) {\n      this.setState({\n        value\n      }, () => {\n        if (value === '' || value === null || value === undefined) {\n          return;\n        } else {\n          this.validateField();\n        }\n      });\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value) {\n      this.setState({\n        value: nextProps.value\n      });\n    }\n  }\n\n  render() {\n    const {\n      className,\n      disabled,\n      selected,\n      isRequired,\n      placeholder,\n      selectName\n    } = this.props;\n    const firstOption = this.props.options ? this.props.options[0] : undefined;\n    const firstValue = firstOption ? firstOption.value : undefined;\n    const selectedValue = this.state.value ? this.state.value : placeholder ? placeholder.value : firstValue;\n    const selectClassNames = classNames('atom_select__select', className, {\n      ['atom_select__select--haslabelleft']: this.props.showLabelLeft,\n      ['atom_select__select--state_validationerror']: !this.state.isValid\n    });\n    let wrapperClasses = `mol_validation ${this.props.wrapperClasses ? this.props.wrapperClasses : ''}`;\n\n    if (!this.state.isValid) {\n      wrapperClasses += ' mol_validation--active';\n    }\n\n    const ariaInvalid = this.state.validated ? {\n      'aria-invalid': !this.state.isValid\n    } : {};\n    const options = [];\n\n    if (placeholder && !this.props.showLabelLeft) {\n      options.push(React.createElement(\"option\", {\n        key: 'placeholder',\n        value: placeholder.value,\n        disabled: true,\n        hidden: navigator.platform.toUpperCase().indexOf('MAC') === -1,\n        \"aria-selected\": selectedValue === placeholder.value\n      }, placeholder.text));\n    }\n\n    if (this.props.options) {\n      this.props.options.forEach(function (item, index) {\n        options.push(React.createElement(\"option\", {\n          key: index,\n          value: item.value,\n          selected: selectedValue === item.value,\n          \"aria-selected\": selectedValue === item.value\n        }, item.text));\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: wrapperClasses,\n      id: `${this.props.id}-wrapper`\n    }, this.renderErrorMessage(), this.renderLabel(), this.props.helpElement ? this.props.helpElement : null, React.createElement(\"span\", {\n      className: 'atom_select'\n    }, React.createElement(\"select\", Object.assign({\n      ref: this.selectElementRef,\n      id: selectName,\n      name: selectName,\n      defaultValue: selected ? selected : selectedValue,\n      tabIndex: this.props.tabIndex,\n      \"data-testId\": this.props.selectTestId,\n      className: selectClassNames,\n      disabled: disabled,\n      required: !!isRequired,\n      onChange: this.onChange,\n      onFocus: this.onFocus,\n      onKeyDown: this.props.onKeyDown,\n      \"aria-label\": this.props.ariaLabel,\n      \"aria-labelledby\": this.props.ariaLabelledby,\n      \"aria-required\": this.props.ariaRequired || !!isRequired\n    }, ariaInvalid), options)), this.props.children);\n  }\n\n}\nSafeSelectField.hnFormComponent = true;\nSafeSelectField.defaultProps = {\n  id: '',\n  showRequiredLabel: true,\n  showLabelLeft: false\n};","map":null,"metadata":{},"sourceType":"module"}