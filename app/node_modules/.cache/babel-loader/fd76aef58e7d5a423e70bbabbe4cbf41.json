{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport ValidationError from '../form/validation-error';\nimport { Phrases, ErrorPhrases } from '../date-range-picker/date-range-picker-utils';\nimport { DateRangePicker } from '../date-range-picker';\nimport TimeInput from '../time-input';\nimport { getFullMomentDate, isFullDateTimeValid, getErrorString } from './date-time-picker-utils';\nimport DateTimePickerLegend from './date-time-picker-legend';\nimport toolkitstyles from './styles.module.scss';\nimport datepickerstyles from '../date-range-picker/styles.module.scss';\nexport default class DateTime extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.isValid = () => this.state.valid;\n\n    this.areAllFieldsValid = () => {\n      if (this.dateInputRef.current && this.timeInputRef.current) {\n        return this.dateInputRef.current.isValid() && this.timeInputRef.current.isValid();\n      }\n\n      return true;\n    };\n\n    this.validate = cb => {\n      const promises = [];\n      if (this.dateInputRef && this.dateInputRef.current) promises.push(this.dateInputRef.current.validateField());\n      if (this.timeInputRef && this.timeInputRef.current) promises.push(this.timeInputRef.current.validateField());\n      Promise.all(promises).then(() => {\n        const {\n          date,\n          time\n        } = this.state;\n        const {\n          isRequired,\n          minimumDateTime,\n          maximumDateTime\n        } = this.props;\n        const isTimeAndDateValid = this.timeInputRef.current ? this.timeInputRef.current.isValid() && this.areAllFieldsValid() : false;\n        this.setState({\n          valid: isFullDateTimeValid(date, time, isRequired, minimumDateTime, maximumDateTime, isTimeAndDateValid)\n        }, () => {\n          this.notifyValidated();\n          if (cb) cb();\n        });\n      });\n    };\n\n    this.validateField = () => {\n      this.setState({\n        validated: true\n      });\n      return new Promise(resolve => {\n        this.validate(resolve);\n      });\n    };\n\n    this.validateOnlyDate = cb => {\n      const promises = [];\n      if (this.dateInputRef && this.dateInputRef.current) promises.push(this.dateInputRef.current.validateField());\n      Promise.all(promises).then(() => {\n        const {\n          date,\n          time\n        } = this.state;\n        const {\n          isRequired,\n          minimumDateTime,\n          maximumDateTime\n        } = this.props;\n        const isTimeValid = this.timeInputRef.current ? this.timeInputRef.current.isValid() : false;\n        this.setState({\n          valid: isFullDateTimeValid(date, time, isRequired, minimumDateTime, maximumDateTime, isTimeValid)\n        }, () => {\n          this.notifyValidated();\n          if (cb) cb();\n        });\n      });\n    };\n\n    this.notifyValidated = () => {\n      this.updateErrorMessage();\n      if (this.props.onValidated) this.props.onValidated(this.state.valid);\n    };\n\n    this.onChildDateValidated = () => {\n      if (!this.state.validated) return;\n      const {\n        date,\n        time\n      } = this.state;\n      const {\n        isRequired,\n        minimumDateTime,\n        maximumDateTime\n      } = this.props;\n\n      if (!this.props.timeValue && time || this.props.timeValue && time && this.props.timeValue !== time) {\n        const isTimeValid = this.timeInputRef.current ? this.timeInputRef.current.isValid() && this.areAllFieldsValid() : false;\n        const valid = isFullDateTimeValid(date, time, isRequired, minimumDateTime, maximumDateTime, isTimeValid);\n        this.setState({\n          valid\n        }, () => {\n          this.notifyValidated();\n        });\n      }\n    };\n\n    this.onDateBlur = () => {\n      const {\n        date,\n        time,\n        validated\n      } = this.state;\n      const {\n        onBlur\n      } = this.props;\n      if (validated) this.validateOnlyDate(this.notifyValidated);\n      const currentDateAndTime = getFullMomentDate(date, time);\n      if (onBlur && currentDateAndTime) onBlur(date, time);\n    };\n\n    this.onTimeBlur = () => {\n      const {\n        date,\n        time,\n        validated\n      } = this.state;\n      const {\n        onBlur\n      } = this.props;\n      if (validated) this.validate(this.notifyValidated);\n      const currentDateAndTime = getFullMomentDate(date, time);\n      if (onBlur && currentDateAndTime) onBlur(date, time);\n    };\n\n    this.onTimeChange = time => {\n      const {\n        date\n      } = this.state;\n      this.setState({\n        time\n      }, () => {\n        if (this.props.onChange) this.props.onChange(date, time);\n      });\n    };\n\n    this.onDateChange = date => {\n      const {\n        time\n      } = this.state;\n      this.setState({\n        date: date\n      }, () => {\n        if (this.props.onChange) this.props.onChange(date, time);\n      });\n    };\n\n    this.updateErrorMessage = () => {\n      const {\n        date,\n        time,\n        valid\n      } = this.state;\n      const {\n        resources,\n        minimumDateTime,\n        maximumDateTime,\n        isRequired,\n        isDateRequired,\n        isTimeRequired,\n        errorMessage\n      } = this.props;\n      const errorString = getErrorString({\n        date,\n        timeString: time,\n        valid,\n        resources,\n        minimumDateTime,\n        maximumDateTime,\n        isRequired,\n        isDateRequired,\n        isTimeRequired,\n        errorMessage,\n        dateFieldInstance: this.dateInputRef.current,\n        timeFieldInstance: this.timeInputRef.current\n      });\n      this.setState({\n        errorString\n      });\n    };\n\n    this.wrapperRef = React.createRef();\n    this.dateInputRef = React.createRef();\n    this.timeInputRef = React.createRef();\n    this.state = {\n      valid: true,\n      validated: true,\n      date: props.dateValue,\n      time: props.timeValue\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.dateValue && prevProps.dateValue && !prevProps.dateValue.isSame(this.props.dateValue) || this.props.timeValue && prevProps.timeValue && prevProps.timeValue !== this.props.timeValue) {\n      this.setState({\n        date: this.props.dateValue,\n        time: this.props.timeValue\n      }, () => {\n        this.validate();\n      });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      className,\n      locale,\n      resources,\n      legend,\n      subLabel,\n      requiredLabel,\n      showRequiredLabel,\n      optionalLabel,\n      showOptionalLabel,\n      dateClassName,\n      dateLabel,\n      datePlaceholder,\n      initialDate,\n      minimumDateTime,\n      maximumDateTime,\n      isDateRequired,\n      isDateDisabled,\n      timeClassName,\n      timeLabel,\n      isRequired,\n      minimumHour,\n      maximumHour,\n      minimumMinute,\n      maximumMinute,\n      isTimeRequired,\n      isTimeDisabled,\n      helpButton,\n      helpElement,\n      children\n    } = this.props;\n    const {\n      date,\n      time,\n      valid,\n      errorString\n    } = this.state;\n    const classes = classNames('mol_validation', className, {\n      'mol_validation--active': !valid\n    });\n    return React.createElement(\"fieldset\", {\n      id: `${id}-wrapper`\n    }, React.createElement(\"div\", {\n      ref: this.wrapperRef,\n      className: classes\n    }, !valid && errorString && React.createElement(ValidationError, {\n      isValid: valid,\n      error: errorString\n    }), React.createElement(DateTimePickerLegend, {\n      legend: legend,\n      isRequired: isRequired,\n      requiredLabel: showRequiredLabel ? requiredLabel : undefined,\n      optionalLabel: showOptionalLabel ? optionalLabel : undefined,\n      helpButton: helpButton,\n      subLabel: subLabel\n    }), helpElement !== null && helpElement !== void 0 ? helpElement : null, React.createElement(\"div\", {\n      className: toolkitstyles.datetimepicker\n    }, React.createElement(\"div\", {\n      className: toolkitstyles.datetimepicker__date\n    }, React.createElement(DateRangePicker, {\n      ref: this.dateInputRef,\n      id: `${id}-date`,\n      type: 'single',\n      locale: locale,\n      resources: resources && resources.dateResources ? resources.dateResources : Phrases,\n      errorResources: resources && resources.dateErrorResources ? resources.dateErrorResources : ErrorPhrases,\n      singleDateValue: date,\n      label: dateLabel,\n      placeholder: datePlaceholder,\n      className: valid ? dateClassName : `${dateClassName} ${datepickerstyles['datepicker--haserror']}`,\n      initialDate: initialDate,\n      minimumDate: minimumDateTime,\n      maximumDate: maximumDateTime,\n      onDateChange: this.onDateChange,\n      onValidated: this.onChildDateValidated,\n      validationErrorRenderer: React.createElement(\"span\", null),\n      isRequired: isRequired || isDateRequired ? true : false,\n      isDisabled: isDateDisabled,\n      isValidationHidden: true\n    })), React.createElement(\"div\", {\n      className: toolkitstyles.datetimepicker__time\n    }, React.createElement(TimeInput, {\n      ref: this.timeInputRef,\n      id: `${id}-time`,\n      value: time,\n      className: `${toolkitstyles.datetimepicker__time__timeinput} ${timeClassName}`,\n      inputClassName: !valid ? 'atom_input--state_validationerror' : '',\n      legend: timeLabel,\n      onBlur: this.onTimeBlur,\n      onTimeChange: this.onTimeChange,\n      minHour: minimumHour,\n      maxHour: maximumHour,\n      minMinute: minimumMinute,\n      maxMinute: maximumMinute,\n      isRequired: isRequired || isTimeRequired ? true : false,\n      readOnly: isTimeDisabled,\n      resources: resources === null || resources === void 0 ? void 0 : resources.timeResources,\n      renderFieldset: true,\n      isValidationHidden: true\n    })), children)));\n  }\n\n}\nDateTime.hnFormComponent = true;","map":null,"metadata":{},"sourceType":"module"}