{"ast":null,"code":"/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nvar LL1Analyzer = require('./../LL1Analyzer').LL1Analyzer;\n\nvar IntervalSet = require('./../IntervalSet').IntervalSet;\n\nfunction ATN(grammarType, maxTokenType) {\n  // Used for runtime deserialization of ATNs from strings///\n  // The type of the ATN.\n  this.grammarType = grammarType; // The maximum value for any symbol recognized by a transition in the ATN.\n\n  this.maxTokenType = maxTokenType;\n  this.states = []; // Each subrule/rule is a decision point and we must track them so we\n  //  can go back later and build DFA predictors for them.  This includes\n  //  all the rules, subrules, optional blocks, ()+, ()* etc...\n\n  this.decisionToState = []; // Maps from rule index to starting state number.\n\n  this.ruleToStartState = []; // Maps from rule index to stop state number.\n\n  this.ruleToStopState = null;\n  this.modeNameToStartState = {}; // For lexer ATNs, this maps the rule index to the resulting token type.\n  // For parser ATNs, this maps the rule index to the generated bypass token\n  // type if the\n  // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}\n  // deserialization option was specified; otherwise, this is {@code null}.\n\n  this.ruleToTokenType = null; // For lexer ATNs, this is an array of {@link LexerAction} objects which may\n  // be referenced by action transitions in the ATN.\n\n  this.lexerActions = null;\n  this.modeToStartState = [];\n  return this;\n} // Compute the set of valid tokens that can occur starting in state {@code s}.\n//  If {@code ctx} is null, the set of tokens will not include what can follow\n//  the rule surrounding {@code s}. In other words, the set will be\n//  restricted to tokens reachable staying within {@code s}'s rule.\n\n\nATN.prototype.nextTokensInContext = function (s, ctx) {\n  var anal = new LL1Analyzer(this);\n  return anal.LOOK(s, null, ctx);\n}; // Compute the set of valid tokens that can occur starting in {@code s} and\n// staying in same rule. {@link Token//EPSILON} is in set if we reach end of\n// rule.\n\n\nATN.prototype.nextTokensNoContext = function (s) {\n  if (s.nextTokenWithinRule !== null) {\n    return s.nextTokenWithinRule;\n  }\n\n  s.nextTokenWithinRule = this.nextTokensInContext(s, null);\n  s.nextTokenWithinRule.readOnly = true;\n  return s.nextTokenWithinRule;\n};\n\nATN.prototype.nextTokens = function (s, ctx) {\n  if (ctx === undefined) {\n    return this.nextTokensNoContext(s);\n  } else {\n    return this.nextTokensInContext(s, ctx);\n  }\n};\n\nATN.prototype.addState = function (state) {\n  if (state !== null) {\n    state.atn = this;\n    state.stateNumber = this.states.length;\n  }\n\n  this.states.push(state);\n};\n\nATN.prototype.removeState = function (state) {\n  this.states[state.stateNumber] = null; // just free mem, don't shift states in list\n};\n\nATN.prototype.defineDecisionState = function (s) {\n  this.decisionToState.push(s);\n  s.decision = this.decisionToState.length - 1;\n  return s.decision;\n};\n\nATN.prototype.getDecisionState = function (decision) {\n  if (this.decisionToState.length === 0) {\n    return null;\n  } else {\n    return this.decisionToState[decision];\n  }\n}; // Computes the set of input symbols which could follow ATN state number\n// {@code stateNumber} in the specified full {@code context}. This method\n// considers the complete parser context, but does not evaluate semantic\n// predicates (i.e. all predicates encountered during the calculation are\n// assumed true). If a path in the ATN exists from the starting state to the\n// {@link RuleStopState} of the outermost context without matching any\n// symbols, {@link Token//EOF} is added to the returned set.\n//\n// <p>If {@code context} is {@code null}, it is treated as\n// {@link ParserRuleContext//EMPTY}.</p>\n//\n// @param stateNumber the ATN state number\n// @param context the full parse context\n// @return The set of potentially valid input symbols which could follow the\n// specified state in the specified context.\n// @throws IllegalArgumentException if the ATN does not contain a state with\n// number {@code stateNumber}\n\n\nvar Token = require('./../Token').Token;\n\nATN.prototype.getExpectedTokens = function (stateNumber, ctx) {\n  if (stateNumber < 0 || stateNumber >= this.states.length) {\n    throw \"Invalid state number.\";\n  }\n\n  var s = this.states[stateNumber];\n  var following = this.nextTokens(s);\n\n  if (!following.contains(Token.EPSILON)) {\n    return following;\n  }\n\n  var expected = new IntervalSet();\n  expected.addSet(following);\n  expected.removeOne(Token.EPSILON);\n\n  while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n    var invokingState = this.states[ctx.invokingState];\n    var rt = invokingState.transitions[0];\n    following = this.nextTokens(rt.followState);\n    expected.addSet(following);\n    expected.removeOne(Token.EPSILON);\n    ctx = ctx.parentCtx;\n  }\n\n  if (following.contains(Token.EPSILON)) {\n    expected.addOne(Token.EOF);\n  }\n\n  return expected;\n};\n\nATN.INVALID_ALT_NUMBER = 0;\nexports.ATN = ATN;","map":null,"metadata":{},"sourceType":"script"}