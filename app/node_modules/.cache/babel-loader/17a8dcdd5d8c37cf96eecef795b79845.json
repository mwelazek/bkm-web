{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport EyeOutlined from \"@ant-design/icons/es/icons/EyeOutlined\";\nimport classNames from 'classnames';\nimport RcImage from 'rc-image';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport defaultLocale from '../locale/en_US';\nimport { getTransitionName } from '../_util/motion'; // CSSINJS\n\nimport PreviewGroup, { icons } from './PreviewGroup';\nimport useStyle from './style';\n\nconst Image = _a => {\n  var {\n    prefixCls: customizePrefixCls,\n    preview,\n    rootClassName\n  } = _a,\n      otherProps = __rest(_a, [\"prefixCls\", \"preview\", \"rootClassName\"]);\n\n  const {\n    getPrefixCls,\n    locale: contextLocale = defaultLocale,\n    getPopupContainer: getContextPopupContainer\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('image', customizePrefixCls);\n  const rootPrefixCls = getPrefixCls();\n  const imageLocale = contextLocale.Image || defaultLocale.Image; // Style\n\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const mergedRootClassName = classNames(rootClassName, hashId);\n  const mergedPreview = React.useMemo(() => {\n    if (preview === false) {\n      return preview;\n    }\n\n    const _preview = typeof preview === 'object' ? preview : {};\n\n    const {\n      getContainer\n    } = _preview,\n          restPreviewProps = __rest(_preview, [\"getContainer\"]);\n\n    return Object.assign(Object.assign({\n      mask: /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-mask-info`\n      }, /*#__PURE__*/React.createElement(EyeOutlined, null), imageLocale === null || imageLocale === void 0 ? void 0 : imageLocale.preview),\n      icons\n    }, restPreviewProps), {\n      getContainer: getContainer || getContextPopupContainer,\n      transitionName: getTransitionName(rootPrefixCls, 'zoom', _preview.transitionName),\n      maskTransitionName: getTransitionName(rootPrefixCls, 'fade', _preview.maskTransitionName)\n    });\n  }, [preview, imageLocale]);\n  return wrapSSR( /*#__PURE__*/React.createElement(RcImage, Object.assign({\n    prefixCls: `${prefixCls}`,\n    preview: mergedPreview,\n    rootClassName: mergedRootClassName\n  }, otherProps)));\n};\n\nImage.PreviewGroup = PreviewGroup;\n\nif (process.env.NODE_ENV !== 'production') {\n  Image.displayName = 'Image';\n}\n\nexport default Image;","map":null,"metadata":{},"sourceType":"module"}