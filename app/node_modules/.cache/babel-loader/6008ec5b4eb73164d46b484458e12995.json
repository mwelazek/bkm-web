{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadResources = exports.getTotalRecordsOnApi = exports.getTotalRecordsInBundles = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _dataLoaders = require(\"../../helpers/dataLoaders\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2[\"default\"])(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar loadResources = function () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee(baseUrl, resourceType, params, extraParams) {\n    var page, pageSize, search, filterParams, service, bundleResponse, summary, total;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            page = params.page, pageSize = params.pageSize, search = params.search;\n            filterParams = _objectSpread({\n              _getpagesoffset: (page - 1) * pageSize,\n              _count: pageSize\n            }, extraParams);\n\n            if (search) {\n              filterParams['name:contains'] = search;\n            }\n\n            service = new _dataLoaders.FHIRServiceClass(baseUrl, resourceType);\n            _context.next = 6;\n            return service.list(filterParams);\n\n          case 6:\n            bundleResponse = _context.sent;\n\n            if (!(bundleResponse.total === undefined)) {\n              _context.next = 14;\n              break;\n            }\n\n            filterParams['_summary'] = 'count';\n            _context.next = 11;\n            return service.list(filterParams);\n\n          case 11:\n            summary = _context.sent;\n            total = summary.total;\n            return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, bundleResponse), {}, {\n              total: total\n            }));\n\n          case 14:\n            return _context.abrupt(\"return\", bundleResponse);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadResources(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.loadResources = loadResources;\n\nvar getTotalRecordsOnApi = function getTotalRecordsOnApi(bundles) {\n  if (!bundles.length) return 0;\n  var lastBundle = bundles[bundles.length - 1];\n  var total = lastBundle.total;\n  return total;\n};\n\nexports.getTotalRecordsOnApi = getTotalRecordsOnApi;\n\nvar getTotalRecordsInBundles = function getTotalRecordsInBundles(bundles) {\n  return bundles.flatMap(function (page) {\n    var _page$entry;\n\n    return ((_page$entry = page.entry) !== null && _page$entry !== void 0 ? _page$entry : []).length;\n  }).reduce(function (a, v) {\n    return a + v;\n  }, 0);\n};\n\nexports.getTotalRecordsInBundles = getTotalRecordsInBundles;","map":null,"metadata":{},"sourceType":"script"}