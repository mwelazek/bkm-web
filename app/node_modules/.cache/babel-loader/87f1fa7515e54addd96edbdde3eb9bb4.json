{"ast":null,"code":"import _defineProperty from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { AnalyticsId } from '@helsenorge/core-utils/adobe-analytics';\nimport { isIconTypeDestructive, getIconColor } from './helper';\nimport toolkitstyles from './styles.module.scss';\nexport var FunctionButton = React.forwardRef(function (_ref, ref) {\n  var _classNames, _classNames2;\n\n  var children = _ref.children,\n      disabled = _ref.disabled,\n      primary = _ref.primary,\n      secondary = _ref.secondary,\n      onClick = _ref.onClick,\n      id = _ref.id,\n      className = _ref.className,\n      ariaLabel = _ref.ariaLabel,\n      ariaHidden = _ref.ariaHidden,\n      ariaHaspopup = _ref.ariaHaspopup,\n      ariaExpanded = _ref.ariaExpanded,\n      ariaControls = _ref.ariaControls,\n      ariaDescribedBy = _ref.ariaDescribedBy,\n      dataName = _ref.dataName,\n      testId = _ref.testId,\n      svgIcon = _ref.svgIcon;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isThreeLines = _React$useState2[0],\n      setIsThreeLines = _React$useState2[1];\n\n  if (!primary && !secondary) {\n    primary = true;\n  }\n\n  var buttonRef = React.useRef(null);\n  var textRef = React.useRef(null);\n  var iconTypeIsDestructive = isIconTypeDestructive(svgIcon);\n  var classes = classNames(toolkitstyles.atom_functionbutton, (_classNames = {}, _defineProperty(_classNames, toolkitstyles['atom_functionbutton--primary'], primary), _defineProperty(_classNames, toolkitstyles['atom_functionbutton--secondary'], secondary), _defineProperty(_classNames, toolkitstyles['atom_functionbutton--destructive'], iconTypeIsDestructive), _defineProperty(_classNames, \"disabled\", disabled), _classNames), className);\n  var textClasses = classNames(toolkitstyles.atom_functionbutton__text, (_classNames2 = {}, _defineProperty(_classNames2, toolkitstyles['atom_functionbutton__text--destructive'], iconTypeIsDestructive), _defineProperty(_classNames2, toolkitstyles['atom_functionbutton__text--threelines'], isThreeLines), _classNames2));\n\n  var iconWithColor = function iconWithColor(icon) {\n    var iconColor = getIconColor(icon);\n    return React.cloneElement(icon, {\n      color: iconColor\n    });\n  };\n\n  var handleResize = function handleResize() {\n    if (textRef.current) {\n      setIsThreeLines(textRef.current.offsetHeight > 40);\n    }\n  };\n\n  React.useEffect(function () {\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return function () {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return React.createElement(\"button\", {\n    ref: ref ? ref : buttonRef,\n    type: \"button\",\n    id: id,\n    disabled: disabled,\n    className: classes,\n    onClick: onClick,\n    \"aria-label\": ariaLabel,\n    \"aria-hidden\": ariaHidden,\n    \"aria-haspopup\": ariaHaspopup,\n    \"aria-expanded\": ariaExpanded,\n    \"aria-controls\": ariaControls,\n    \"aria-describedby\": ariaDescribedBy,\n    \"data-name\": dataName,\n    \"data-testid\": testId,\n    \"data-analyticsid\": AnalyticsId.FunctionButton\n  }, React.createElement(\"span\", {\n    className: toolkitstyles.atom_functionbutton__icon\n  }, iconWithColor(svgIcon)), primary && React.createElement(\"span\", {\n    ref: textRef,\n    className: textClasses\n  }, children));\n});\nexport default FunctionButton;","map":null,"metadata":{},"sourceType":"module"}