{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst react_redux_1 = require(\"react-redux\");\n\nconst safe_input_field_1 = __importDefault(require(\"@helsenorge/toolkit/components/atoms/safe-input-field\"));\n\nconst validation_1 = __importDefault(require(\"@helsenorge/toolkit/components/molecules/form/validation\"));\n\nconst debounce_1 = require(\"@helsenorge/core-utils/debounce\");\n\nconst layout_change_1 = __importDefault(require(\"@helsenorge/core-utils/hoc/layout-change\"));\n\nconst newValue_1 = require(\"../../../actions/newValue\");\n\nconst extension_1 = require(\"../../../util/extension\");\n\nconst index_1 = require(\"../../../util/index\");\n\nconst map_props_1 = require(\"../../../util/map-props\");\n\nconst with_common_functions_1 = __importDefault(require(\"../../with-common-functions\"));\n\nconst label_1 = __importDefault(require(\"../label\"));\n\nconst sublabel_1 = __importDefault(require(\"../sublabel\"));\n\nconst textview_1 = __importDefault(require(\"../textview\"));\n\nclass String extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleChange = event => {\n      var _a;\n\n      const {\n        dispatch,\n        promptLoginMessage,\n        path,\n        item,\n        onAnswerChange\n      } = this.props;\n      const value = event.target.value;\n\n      if (dispatch) {\n        (_a = dispatch(newValue_1.newStringValueAsync(this.props.path, value, this.props.item))) === null || _a === void 0 ? void 0 : _a.then(newState => onAnswerChange(newState, path, item, {\n          valueString: value\n        }));\n      }\n\n      if (promptLoginMessage) {\n        promptLoginMessage();\n      }\n    };\n\n    this.debouncedHandleChange = debounce_1.debounce(this.handleChange, 250, false);\n\n    this.validateText = value => {\n      return index_1.validateText(value, this.props.validateScriptInjection);\n    };\n\n    this.getValidationErrorMessage = value => {\n      return index_1.getTextValidationErrorMessage(value, this.props.validateScriptInjection, this.props.item, this.props.resources);\n    };\n\n    this.getRequiredErrorMessage = item => {\n      var _a;\n\n      return index_1.isRequired(item) ? (_a = this.props.resources) === null || _a === void 0 ? void 0 : _a.formRequiredErrorMessage : undefined;\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    var _a;\n\n    const responseItemHasChanged = this.props.responseItem !== nextProps.responseItem;\n    const helpItemHasChanged = this.props.isHelpOpen !== nextProps.isHelpOpen;\n    const resourcesHasChanged = JSON.stringify(this.props.resources) !== JSON.stringify(nextProps.resources);\n    const repeats = (_a = this.props.item.repeats) !== null && _a !== void 0 ? _a : false;\n    return responseItemHasChanged || helpItemHasChanged || resourcesHasChanged || repeats;\n  }\n\n  render() {\n    const {\n      id,\n      item,\n      pdf,\n      resources,\n      answer,\n      onRenderMarkdown\n    } = this.props;\n\n    if (pdf || index_1.isReadOnly(item)) {\n      return React.createElement(textview_1.default, {\n        id: id,\n        item: item,\n        value: index_1.getPDFStringValue(answer, resources),\n        onRenderMarkdown: onRenderMarkdown,\n        textClass: \"page_skjemautfyller__component_readonlytext\"\n      }, this.props.children);\n    }\n\n    const subLabelText = index_1.getSublabelText(item, onRenderMarkdown);\n    return React.createElement(\"div\", {\n      className: \"page_skjemautfyller__component page_skjemautfyller__component_string\"\n    }, React.createElement(validation_1.default, Object.assign({}, this.props), React.createElement(safe_input_field_1.default, {\n      type: \"text\",\n      id: index_1.getId(this.props.id),\n      inputName: index_1.getId(this.props.id),\n      value: index_1.getStringValue(answer),\n      onChangeValidator: this.validateText,\n      showLabel: true,\n      label: React.createElement(label_1.default, {\n        item: item,\n        onRenderMarkdown: onRenderMarkdown\n      }),\n      subLabel: subLabelText ? React.createElement(sublabel_1.default, {\n        subLabelText: subLabelText\n      }) : undefined,\n      isRequired: index_1.isRequired(item),\n      placeholder: extension_1.getPlaceholder(item),\n      minLength: extension_1.getMinLengthExtensionValue(item),\n      maxLength: index_1.getMaxLength(item),\n      onChange: event => {\n        event.persist();\n        this.debouncedHandleChange(event);\n      },\n      pattern: extension_1.getRegexExtension(item),\n      errorMessage: this.getValidationErrorMessage,\n      requiredErrorMessage: this.getRequiredErrorMessage(item),\n      className: \"page_skjemautfyller__input\",\n      helpButton: this.props.renderHelpButton(),\n      helpElement: this.props.renderHelpElement(),\n      validateOnExternalUpdate: true,\n      stringOverMaxLengthError: resources === null || resources === void 0 ? void 0 : resources.stringOverMaxLengthError\n    })), this.props.renderDeleteButton('page_skjemautfyller__deletebutton--margin-top'), this.props.repeatButton, this.props.children ? React.createElement(\"div\", {\n      className: \"nested-fieldset nested-fieldset--full-height\"\n    }, this.props.children) : null);\n  }\n\n}\n\nexports.String = String;\nconst withCommonFunctionsComponent = with_common_functions_1.default(String);\nconst connectedComponent = react_redux_1.connect(map_props_1.mapStateToProps, map_props_1.mapDispatchToProps, map_props_1.mergeProps)(layout_change_1.default(withCommonFunctionsComponent));\nexports.default = connectedComponent;","map":null,"metadata":{},"sourceType":"script"}