{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ERROR_INVALID_YEAR, ERROR_REQUIRED_YEAR, ERROR_YEAR_AFTER_MAX_DATE, ERROR_YEAR_BEFORE_MIN_DATE } from '../../../constants/datetime';\nimport SafeInputField from '../../atoms/safe-input-field';\nimport ValidationError from './../../molecules/form/validation-error';\nexport var YearInput = /*#__PURE__*/function (_React$Component) {\n  _inherits(YearInput, _React$Component);\n\n  var _super = _createSuper(YearInput);\n\n  function YearInput(props) {\n    var _this;\n\n    _classCallCheck(this, YearInput);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      value: props.value || 0,\n      isValid: true,\n      isValidated: false,\n      errorMessage: ''\n    };\n    _this.notifyValidated = _this.notifyValidated.bind(_assertThisInitialized(_this));\n    _this.validate = _this.validate.bind(_assertThisInitialized(_this));\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));\n    _this.isValid = _this.isValid.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(YearInput, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_prevProps, prevState) {\n      if (prevState.isValid !== this.state.isValid) {\n        this.notifyValidated();\n      }\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.value && nextProps.value !== this.props.value) {\n        this.setState({\n          value: nextProps.value\n        });\n      }\n    }\n  }, {\n    key: \"validateRequired\",\n    value: function validateRequired() {\n      var _a;\n\n      if (!this.state.value && this.props.isRequired) {\n        return ((_a = this.props.errorResources) === null || _a === void 0 ? void 0 : _a.errorRequiredYear) || ERROR_REQUIRED_YEAR;\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      var _a, _b, _c;\n\n      if (value && value.toString().length !== 4) {\n        return ((_a = this.props.errorResources) === null || _a === void 0 ? void 0 : _a.errorInvalidYear) || ERROR_INVALID_YEAR;\n      }\n\n      if (value && this.props.maximumYear && this.props.maximumYear < value) {\n        var errorString = ((_b = this.props.errorResources) === null || _b === void 0 ? void 0 : _b.errorYearAfterMaxDate) || ERROR_YEAR_AFTER_MAX_DATE;\n        return \"\".concat(errorString, \": \").concat(this.props.maximumYear);\n      }\n\n      if (value && this.props.minimumYear && this.props.minimumYear > value) {\n        var _errorString = ((_c = this.props.errorResources) === null || _c === void 0 ? void 0 : _c.errorYearBeforeMinDate) || ERROR_YEAR_BEFORE_MIN_DATE;\n\n        return \"\".concat(_errorString, \": \").concat(this.props.minimumYear);\n      }\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField() {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        var errorMessage = _this2.validateRequired() || _this2.validate(_this2.state.value);\n\n        _this2.setState({\n          errorMessage: errorMessage || '',\n          isValid: !errorMessage,\n          isValidated: true\n        }, function () {\n          _this2.notifyValidated();\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"renderErrorMessage\",\n    value: function renderErrorMessage() {\n      if (this.state.isValidated && !this.state.isValid) {\n        return React.createElement(ValidationError, {\n          isValid: this.state.isValid,\n          error: this.state.errorMessage,\n          testId: this.props.validationTestId\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(_e, _id, formattedValue) {\n      var numberValue = parseInt(formattedValue) || 0;\n      this.setState({\n        value: numberValue\n      });\n\n      if (!this.state.isValid) {\n        var errorMessage = this.validate(numberValue);\n        this.setState({\n          isValid: !errorMessage\n        });\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange(numberValue);\n      }\n    }\n  }, {\n    key: \"notifyValidated\",\n    value: function notifyValidated() {\n      if (this.props.onValidated) {\n        this.props.onValidated(this.state.isValid);\n      }\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(e) {\n      var errorMessage = this.validateRequired() || this.validate(this.state.value);\n      this.setState({\n        errorMessage: errorMessage || '',\n        isValidated: true,\n        isValid: !errorMessage\n      });\n\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return this.state.isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var wrapperClasses = classNames({\n        mol_validation: true,\n        'mol_validation--active': !this.state.isValid\n      }, this.props.className);\n      return React.createElement(\"div\", {\n        className: wrapperClasses,\n        id: \"\".concat(this.props.id, \"-wrapper\")\n      }, this.renderErrorMessage(), React.createElement(SafeInputField, {\n        type: \"number\",\n        inputName: \"\".concat(this.props.id, \"-input\"),\n        maxLength: 4,\n        pattern: \"^[0-9]{4}$\",\n        isValidationHidden: true,\n        label: this.props.label,\n        subLabel: this.props.subLabel,\n        disabled: this.props.disabled,\n        optionalLabel: this.props.optionalLabel,\n        requiredLabel: this.props.requiredLabel,\n        showRequiredLabel: this.props.showRequiredLabel,\n        showOptionalLabel: this.props.showOptionalLabel,\n        isRequired: this.props.isRequired,\n        placeholder: this.props.placeholder,\n        helpButton: this.props.helpButton,\n        helpElement: this.props.helpElement,\n        value: this.state.value,\n        labelTestId: this.props.labelTestId,\n        onChange: this.onChange,\n        onBlur: this.onBlur\n      }));\n    }\n  }]);\n\n  return YearInput;\n}(React.Component);","map":null,"metadata":{},"sourceType":"module"}