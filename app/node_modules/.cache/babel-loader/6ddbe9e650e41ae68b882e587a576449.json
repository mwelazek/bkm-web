{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { ERROR_INVALID_YEAR_MONTH, ERROR_REQUIRED_YEAR_MONTH, ERROR_YEAR_MONTH_BEFORE_MIN_DATE, ERROR_YEAR_MONTH_AFTER_MAX_DATE, MONTH_PLACEHOLDER, YEAR_PLACEHOLDER, ERROR_INVALID_YEAR_MONTH_YEAR } from '../../../constants/datetime';\nimport { Sublabel } from '../../atoms/label/sublabel';\nimport SafeInputField from '../../atoms/safe-input-field';\nimport SafeSelectField from '../../atoms/safe-select';\nimport ValidationError from './../../molecules/form/validation-error';\nimport toolkitstyles from './styles.module.scss';\nvar EMPTY_MONTH_VALUE = -1;\nexport var YearMonthInput = /*#__PURE__*/function (_React$Component) {\n  _inherits(YearMonthInput, _React$Component);\n\n  var _super = _createSuper(YearMonthInput);\n\n  function YearMonthInput(props) {\n    var _this;\n\n    _classCallCheck(this, YearMonthInput);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      value: props.value || {\n        year: 0,\n        month: null\n      },\n      isValid: true,\n      isValidated: false,\n      errorMessage: ''\n    };\n    _this.notifyValidated = _this.notifyValidated.bind(_assertThisInitialized(_this));\n    _this.validate = _this.validate.bind(_assertThisInitialized(_this));\n    _this.onChangeYear = _this.onChangeYear.bind(_assertThisInitialized(_this));\n    _this.onChangeMonth = _this.onChangeMonth.bind(_assertThisInitialized(_this));\n    _this.onBlurYear = _this.onBlurYear.bind(_assertThisInitialized(_this));\n    _this.isValid = _this.isValid.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(YearMonthInput, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_prevProps, prevState) {\n      if (prevState.isValid !== this.state.isValid) {\n        this.notifyValidated();\n      }\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var _a, _b;\n\n      if (nextProps.value && (nextProps.value.year !== ((_a = this.props.value) === null || _a === void 0 ? void 0 : _a.year) || nextProps.value.month !== ((_b = this.props.value) === null || _b === void 0 ? void 0 : _b.month))) {\n        this.setState({\n          value: nextProps.value\n        });\n      }\n    }\n  }, {\n    key: \"validateRequired\",\n    value: function validateRequired() {\n      var _a, _b;\n\n      if (this.props.isRequired && (!((_a = this.state.value) === null || _a === void 0 ? void 0 : _a.year) || this.state.value.month === null)) {\n        return ((_b = this.props.resources) === null || _b === void 0 ? void 0 : _b.errorRequiredField) || ERROR_REQUIRED_YEAR_MONTH;\n      }\n    }\n  }, {\n    key: \"validateValidYear\",\n    value: function validateValidYear(value) {\n      var _a;\n\n      if (value && value.toString().length !== 4) {\n        return ((_a = this.props.resources) === null || _a === void 0 ? void 0 : _a.errorInvalidYear) || ERROR_INVALID_YEAR_MONTH_YEAR;\n      }\n    }\n  }, {\n    key: \"getValidationValue\",\n    value: function getValidationValue(value) {\n      var month = \"0\".concat(value.month).slice(-2);\n      return \"\".concat(value.year).concat(month);\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      var _a, _b, _c;\n\n      var hasMonthValue = (value === null || value === void 0 ? void 0 : value.month) !== null && (value === null || value === void 0 ? void 0 : value.month) !== undefined;\n      var hasYearValue = !!(value === null || value === void 0 ? void 0 : value.year);\n      var validationValue = value && hasMonthValue && hasYearValue ? this.getValidationValue(value) : '';\n\n      if (hasMonthValue !== hasYearValue) {\n        return ((_a = this.props.resources) === null || _a === void 0 ? void 0 : _a.errorInvalidYearMonth) || ERROR_INVALID_YEAR_MONTH;\n      }\n\n      if (validationValue && this.props.maximumYearMonth && this.props.maximumYearMonth.month !== null && this.getValidationValue(this.props.maximumYearMonth) < validationValue) {\n        var errorString = ((_b = this.props.resources) === null || _b === void 0 ? void 0 : _b.errorAfterMaxDate) || ERROR_YEAR_MONTH_AFTER_MAX_DATE;\n        return \"\".concat(errorString, \": \").concat(moment.months()[this.props.maximumYearMonth.month], \" \").concat(this.props.maximumYearMonth.year);\n      }\n\n      if (validationValue && this.props.minimumYearMonth && this.props.minimumYearMonth.month !== null && this.getValidationValue(this.props.minimumYearMonth) > validationValue) {\n        var _errorString = ((_c = this.props.resources) === null || _c === void 0 ? void 0 : _c.errorBeforeMinDate) || ERROR_YEAR_MONTH_BEFORE_MIN_DATE;\n\n        return \"\".concat(_errorString, \": \").concat(moment.months()[this.props.minimumYearMonth.month], \" \").concat(this.props.minimumYearMonth.year);\n      }\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField() {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        var errorMessage = _this2.validateRequired() || _this2.validateValidYear(_this2.state.value.year) || _this2.validate(_this2.state.value);\n\n        _this2.setState({\n          errorMessage: errorMessage || '',\n          isValid: !errorMessage,\n          isValidated: true\n        }, function () {\n          _this2.notifyValidated();\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"renderErrorMessage\",\n    value: function renderErrorMessage() {\n      if (this.state.isValidated && !this.state.isValid) {\n        return React.createElement(ValidationError, {\n          isValid: this.state.isValid,\n          error: this.state.errorMessage,\n          testId: this.props.validationTestId\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"onChangeYear\",\n    value: function onChangeYear(_e, _id, formattedValue) {\n      var yearValue = parseInt(formattedValue) || 0;\n      var newValue = Object.assign(Object.assign({}, this.state.value), {\n        year: yearValue\n      });\n      this.setState({\n        value: newValue\n      });\n\n      if (!this.state.isValid) {\n        var errorMessage = this.validateValidYear(yearValue) || this.validate(newValue);\n        this.setState({\n          isValid: !errorMessage\n        });\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange(newValue);\n      }\n    }\n  }, {\n    key: \"onChangeMonth\",\n    value: function onChangeMonth(event) {\n      var selected = parseInt(event.target.value);\n      var newValue = Object.assign(Object.assign({}, this.state.value), {\n        month: selected === EMPTY_MONTH_VALUE ? null : selected\n      });\n      this.setState({\n        value: newValue\n      });\n      var errorMessage = this.validate(newValue);\n      this.setState({\n        isValid: !errorMessage,\n        isValidated: true,\n        errorMessage: errorMessage || ''\n      });\n\n      if (this.props.onChange) {\n        this.props.onChange(newValue);\n      }\n    }\n  }, {\n    key: \"notifyValidated\",\n    value: function notifyValidated() {\n      if (this.props.onValidated) {\n        this.props.onValidated(this.state.isValid);\n      }\n    }\n  }, {\n    key: \"onBlurYear\",\n    value: function onBlurYear() {\n      var _a;\n\n      var yearErrorMessage = this.validateValidYear((_a = this.state.value) === null || _a === void 0 ? void 0 : _a.year);\n      this.setState({\n        errorMessage: yearErrorMessage || '',\n        isValidated: true,\n        isValid: !yearErrorMessage\n      });\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return this.state.isValid;\n    }\n  }, {\n    key: \"renderLegend\",\n    value: function renderLegend() {\n      return React.createElement(\"legend\", {\n        className: this.props.legendClassName ? this.props.legendClassName : ''\n      }, this.props.legend, this.props.isRequired && this.props.requiredLabel && this.props.showRequiredLabel ? React.createElement(\"em\", null, \" \", this.props.requiredLabel) : '', !this.props.isRequired && this.props.optionalLabel && this.props.showOptionalLabel ? React.createElement(\"em\", null, \" \", this.props.optionalLabel) : '', this.props.helpButton, this.props.subLabel && React.createElement(Sublabel, {\n        sublabelText: this.props.subLabel\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a, _b, _c, _d, _f, _g;\n\n      moment.locale(this.props.locale);\n      var monthPlaceholder = ((_a = this.props.resources) === null || _a === void 0 ? void 0 : _a.selectMonthPlaceholder) || MONTH_PLACEHOLDER;\n      var monthNames = moment.months();\n      var wrapperClasses = classNames({\n        mol_validation: true,\n        'mol_validation--active': !this.state.isValid\n      }, this.props.className);\n      var monthOptions = monthNames.map(function (monthName, index) {\n        return new Option(monthName, index.toString());\n      });\n\n      if (!this.props.isRequired) {\n        monthOptions.unshift(new Option(monthPlaceholder, EMPTY_MONTH_VALUE.toString()));\n      }\n\n      return React.createElement(\"div\", {\n        className: wrapperClasses,\n        id: \"\".concat(this.props.id, \"-wrapper\")\n      }, this.renderErrorMessage(), React.createElement(\"fieldset\", null, this.props.legend && this.renderLegend(), this.props.helpElement ? this.props.helpElement : null, React.createElement(\"div\", {\n        className: toolkitstyles.mol_yearmonthinput__fieldwrapper\n      }, React.createElement(SafeInputField, {\n        type: \"number\",\n        inputName: \"\".concat(this.props.id, \"-yearfield\"),\n        maxLength: 4,\n        pattern: \"^[0-9]{4}$\",\n        wrapperClasses: toolkitstyles.mol_yearmonthinput__yearfield,\n        isValidationHidden: true,\n        disabled: this.props.disabled,\n        isRequired: this.props.isRequired,\n        placeholder: ((_b = this.props.resources) === null || _b === void 0 ? void 0 : _b.selectYearPlaceholder) || YEAR_PLACEHOLDER,\n        value: (_c = this.state.value) === null || _c === void 0 ? void 0 : _c.year,\n        onChange: this.onChangeYear,\n        onBlur: this.onBlurYear\n      }), React.createElement(SafeSelectField, {\n        id: \"\".concat(this.props.id, \"-monthfield\"),\n        value: ((_d = this.state.value) === null || _d === void 0 ? void 0 : _d.month) !== null ? (_f = this.state.value) === null || _f === void 0 ? void 0 : _f.month.toString() : '',\n        options: monthOptions,\n        placeholder: new Option(((_g = this.props.resources) === null || _g === void 0 ? void 0 : _g.selectMonthPlaceholder) || MONTH_PLACEHOLDER, ''),\n        disabled: this.props.disabled,\n        isRequired: this.props.isRequired,\n        onChange: this.onChangeMonth,\n        ariaLabel: monthPlaceholder\n      }))));\n    }\n  }]);\n\n  return YearMonthInput;\n}(React.Component);","map":null,"metadata":{},"sourceType":"module"}