{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport LeftOutlined from \"@ant-design/icons/es/icons/LeftOutlined\";\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport RightOutlined from \"@ant-design/icons/es/icons/RightOutlined\";\nimport classNames from 'classnames';\nimport RcCascader from 'rc-cascader';\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport genPurePanel from '../_util/PurePanel';\nimport { getTransitionDirection, getTransitionName } from '../_util/motion';\nimport { getMergedStatus, getStatusClassNames } from '../_util/statusUtils';\nimport warning from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport DefaultRenderEmpty from '../config-provider/defaultRenderEmpty';\nimport useSize from '../config-provider/hooks/useSize';\nimport { FormItemInputContext } from '../form/context';\nimport useSelectStyle from '../select/style';\nimport useBuiltinPlacements from '../select/useBuiltinPlacements';\nimport useShowArrow from '../select/useShowArrow';\nimport getIcons from '../select/utils/iconUtil';\nimport { useCompactItemContext } from '../space/Compact';\nimport useStyle from './style';\nconst {\n  SHOW_CHILD,\n  SHOW_PARENT\n} = RcCascader;\n\nfunction highlightKeyword(str, lowerKeyword, prefixCls) {\n  const cells = str.toLowerCase().split(lowerKeyword).reduce((list, cur, index) => index === 0 ? [cur] : [].concat(_toConsumableArray(list), [lowerKeyword, cur]), []);\n  const fillCells = [];\n  let start = 0;\n  cells.forEach((cell, index) => {\n    const end = start + cell.length;\n    let originWorld = str.slice(start, end);\n    start = end;\n\n    if (index % 2 === 1) {\n      originWorld =\n      /*#__PURE__*/\n      // eslint-disable-next-line react/no-array-index-key\n      React.createElement(\"span\", {\n        className: `${prefixCls}-menu-item-keyword`,\n        key: `separator-${index}`\n      }, originWorld);\n    }\n\n    fillCells.push(originWorld);\n  });\n  return fillCells;\n}\n\nconst defaultSearchRender = (inputValue, path, prefixCls, fieldNames) => {\n  const optionList = []; // We do lower here to save perf\n\n  const lower = inputValue.toLowerCase();\n  path.forEach((node, index) => {\n    if (index !== 0) {\n      optionList.push(' / ');\n    }\n\n    let label = node[fieldNames.label];\n    const type = typeof label;\n\n    if (type === 'string' || type === 'number') {\n      label = highlightKeyword(String(label), lower, prefixCls);\n    }\n\n    optionList.push(label);\n  });\n  return optionList;\n};\n\nconst Cascader = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    size: customizeSize,\n    disabled: customDisabled,\n    className,\n    rootClassName,\n    multiple,\n    bordered = true,\n    transitionName,\n    choiceTransitionName = '',\n    popupClassName,\n    dropdownClassName,\n    expandIcon,\n    placement,\n    showSearch,\n    allowClear = true,\n    notFoundContent,\n    direction,\n    getPopupContainer,\n    status: customStatus,\n    showArrow,\n    builtinPlacements\n  } = props,\n        rest = __rest(props, [\"prefixCls\", \"size\", \"disabled\", \"className\", \"rootClassName\", \"multiple\", \"bordered\", \"transitionName\", \"choiceTransitionName\", \"popupClassName\", \"dropdownClassName\", \"expandIcon\", \"placement\", \"showSearch\", \"allowClear\", \"notFoundContent\", \"direction\", \"getPopupContainer\", \"status\", \"showArrow\", \"builtinPlacements\"]);\n\n  const restProps = omit(rest, ['suffixIcon']);\n  const {\n    getPopupContainer: getContextPopupContainer,\n    getPrefixCls,\n    renderEmpty,\n    direction: rootDirection,\n    popupOverflow\n  } = React.useContext(ConfigContext);\n  const mergedDirection = direction || rootDirection;\n  const isRtl = mergedDirection === 'rtl'; // =================== Form =====================\n\n  const {\n    status: contextStatus,\n    hasFeedback,\n    isFormItemInput,\n    feedbackIcon\n  } = React.useContext(FormItemInputContext);\n  const mergedStatus = getMergedStatus(contextStatus, customStatus); // =================== Warning =====================\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'Cascader', '`dropdownClassName` is deprecated. Please use `popupClassName` instead.') : void 0;\n  } // =================== No Found ====================\n\n\n  const mergedNotFoundContent = notFoundContent || (renderEmpty === null || renderEmpty === void 0 ? void 0 : renderEmpty('Cascader')) || /*#__PURE__*/React.createElement(DefaultRenderEmpty, {\n    componentName: \"Cascader\"\n  }); // ==================== Prefix =====================\n\n  const rootPrefixCls = getPrefixCls();\n  const prefixCls = getPrefixCls('select', customizePrefixCls);\n  const cascaderPrefixCls = getPrefixCls('cascader', customizePrefixCls);\n  const [wrapSelectSSR, hashId] = useSelectStyle(prefixCls);\n  const [wrapCascaderSSR] = useStyle(cascaderPrefixCls);\n  const {\n    compactSize,\n    compactItemClassnames\n  } = useCompactItemContext(prefixCls, direction); // =================== Dropdown ====================\n\n  const mergedDropdownClassName = classNames(popupClassName || dropdownClassName, `${cascaderPrefixCls}-dropdown`, {\n    [`${cascaderPrefixCls}-dropdown-rtl`]: mergedDirection === 'rtl'\n  }, rootClassName, hashId); // ==================== Search =====================\n\n  const mergedShowSearch = React.useMemo(() => {\n    if (!showSearch) {\n      return showSearch;\n    }\n\n    let searchConfig = {\n      render: defaultSearchRender\n    };\n\n    if (typeof showSearch === 'object') {\n      searchConfig = Object.assign(Object.assign({}, searchConfig), showSearch);\n    }\n\n    return searchConfig;\n  }, [showSearch]); // ===================== Size ======================\n\n  const mergedSize = useSize(ctx => {\n    var _a;\n\n    return (_a = compactSize !== null && compactSize !== void 0 ? compactSize : customizeSize) !== null && _a !== void 0 ? _a : ctx;\n  }); // ===================== Disabled =====================\n\n  const disabled = React.useContext(DisabledContext);\n  const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled; // ===================== Icon ======================\n\n  let mergedExpandIcon = expandIcon;\n\n  if (!expandIcon) {\n    mergedExpandIcon = isRtl ? /*#__PURE__*/React.createElement(LeftOutlined, null) : /*#__PURE__*/React.createElement(RightOutlined, null);\n  }\n\n  const loadingIcon = /*#__PURE__*/React.createElement(\"span\", {\n    className: `${prefixCls}-menu-item-loading-icon`\n  }, /*#__PURE__*/React.createElement(LoadingOutlined, {\n    spin: true\n  })); // =================== Multiple ====================\n\n  const checkable = React.useMemo(() => multiple ? /*#__PURE__*/React.createElement(\"span\", {\n    className: `${cascaderPrefixCls}-checkbox-inner`\n  }) : false, [multiple]); // ===================== Icons =====================\n\n  const mergedShowArrow = useShowArrow(showArrow);\n  const {\n    suffixIcon,\n    removeIcon,\n    clearIcon\n  } = getIcons(Object.assign(Object.assign({}, props), {\n    hasFeedback,\n    feedbackIcon,\n    showArrow: mergedShowArrow,\n    multiple,\n    prefixCls\n  })); // ===================== Placement =====================\n\n  const memoPlacement = React.useMemo(() => {\n    if (placement !== undefined) {\n      return placement;\n    }\n\n    return isRtl ? 'bottomRight' : 'bottomLeft';\n  }, [placement, isRtl]);\n  const mergedBuiltinPlacements = useBuiltinPlacements(builtinPlacements, popupOverflow); // ==================== Render =====================\n\n  const renderNode = /*#__PURE__*/React.createElement(RcCascader, Object.assign({\n    prefixCls: prefixCls,\n    className: classNames(!customizePrefixCls && cascaderPrefixCls, {\n      [`${prefixCls}-lg`]: mergedSize === 'large',\n      [`${prefixCls}-sm`]: mergedSize === 'small',\n      [`${prefixCls}-rtl`]: isRtl,\n      [`${prefixCls}-borderless`]: !bordered,\n      [`${prefixCls}-in-form-item`]: isFormItemInput\n    }, getStatusClassNames(prefixCls, mergedStatus, hasFeedback), compactItemClassnames, className, rootClassName, hashId),\n    disabled: mergedDisabled\n  }, restProps, {\n    builtinPlacements: mergedBuiltinPlacements,\n    direction: mergedDirection,\n    placement: memoPlacement,\n    notFoundContent: mergedNotFoundContent,\n    allowClear: allowClear,\n    showSearch: mergedShowSearch,\n    expandIcon: mergedExpandIcon,\n    inputIcon: suffixIcon,\n    removeIcon: removeIcon,\n    clearIcon: clearIcon,\n    loadingIcon: loadingIcon,\n    checkable: checkable,\n    dropdownClassName: mergedDropdownClassName,\n    dropdownPrefixCls: customizePrefixCls || cascaderPrefixCls,\n    choiceTransitionName: getTransitionName(rootPrefixCls, '', choiceTransitionName),\n    transitionName: getTransitionName(rootPrefixCls, getTransitionDirection(placement), transitionName),\n    getPopupContainer: getPopupContainer || getContextPopupContainer,\n    ref: ref,\n    showArrow: hasFeedback || mergedShowArrow\n  }));\n  return wrapCascaderSSR(wrapSelectSSR(renderNode));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Cascader.displayName = 'Cascader';\n} // We don't care debug panel\n\n/* istanbul ignore next */\n\n\nconst PurePanel = genPurePanel(Cascader);\nCascader.SHOW_PARENT = SHOW_PARENT;\nCascader.SHOW_CHILD = SHOW_CHILD;\nCascader._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default Cascader;","map":null,"metadata":{},"sourceType":"module"}