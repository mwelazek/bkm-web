{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst moment_1 = __importDefault(require(\"moment\"));\n\nconst react_redux_1 = require(\"react-redux\");\n\nconst date_time_picker_1 = __importDefault(require(\"@helsenorge/toolkit/components/molecules/date-time-picker\"));\n\nconst date_time_picker_utils_1 = require(\"@helsenorge/toolkit/components/molecules/date-time-picker/date-time-picker-utils\");\n\nconst validation_1 = __importDefault(require(\"@helsenorge/toolkit/components/molecules/form/validation\"));\n\nconst date_core_1 = require(\"@helsenorge/toolkit/components/molecules/time-input/date-core\");\n\nconst languages_1 = require(\"@helsenorge/core-utils/constants/languages\");\n\nconst layout_change_1 = __importDefault(require(\"@helsenorge/core-utils/hoc/layout-change\"));\n\nconst newValue_1 = require(\"../../../actions/newValue\");\n\nconst extensions_1 = __importDefault(require(\"../../../constants/extensions\"));\n\nconst index_1 = __importDefault(require(\"../../../constants/index\"));\n\nconst extension_1 = require(\"../../../util/extension\");\n\nconst fhirpathHelper_1 = require(\"../../../util/fhirpathHelper\");\n\nconst index_2 = require(\"../../../util/index\");\n\nconst map_props_1 = require(\"../../../util/map-props\");\n\nconst with_common_functions_1 = __importDefault(require(\"../../with-common-functions\"));\n\nconst label_1 = __importDefault(require(\"../label\"));\n\nconst sublabel_1 = __importDefault(require(\"../sublabel\"));\n\nconst textview_1 = __importDefault(require(\"../textview\"));\n\nclass DateTime extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.dispatchNewDate = (date, time) => {\n      var _a;\n\n      const {\n        dispatch,\n        promptLoginMessage,\n        onAnswerChange,\n        answer,\n        path,\n        item\n      } = this.props;\n      const momentDate = date_time_picker_utils_1.getFullMomentDate(date, time);\n      const dateTimeString = momentDate ? momentDate.locale('nb').utc().format(index_1.default.DATE_TIME_FORMAT) : '';\n      const existingAnswer = (answer === null || answer === void 0 ? void 0 : answer.valueDateTime) || '';\n\n      if (dispatch && existingAnswer !== dateTimeString) {\n        (_a = dispatch(newValue_1.newDateTimeValueAsync(this.props.path, dateTimeString, this.props.item))) === null || _a === void 0 ? void 0 : _a.then(newState => onAnswerChange(newState, path, item, {\n          valueDateTime: dateTimeString\n        }));\n      }\n\n      if (promptLoginMessage) {\n        promptLoginMessage();\n      }\n    };\n\n    this.promptLogin = () => {\n      if (this.props.promptLoginMessage) {\n        this.props.promptLoginMessage();\n      }\n    };\n\n    this.onBlur = () => {\n      return true;\n    };\n\n    this.getStringValue = () => {\n      const date = this.getDefaultDate(this.props);\n      let text = '';\n\n      if (this.props.resources && this.props.resources.ikkeBesvart) {\n        text = this.props.resources.ikkeBesvart;\n      }\n\n      return date ? moment_1.default(date).locale('nb').format('LLL') : text;\n    };\n\n    this.getLocaleFromLanguage = () => {\n      var _a;\n\n      if (((_a = this.props.language) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'en-gb') {\n        return languages_1.LanguageLocales.ENGLISH;\n      }\n\n      return languages_1.LanguageLocales.NORWEGIAN;\n    };\n  }\n\n  getDefaultDate(props) {\n    const {\n      item,\n      answer\n    } = props;\n\n    if (answer && answer.valueDateTime) {\n      return date_core_1.parseDate(String(answer.valueDateTime));\n    }\n\n    if (answer && answer.valueDate) {\n      return date_core_1.parseDate(String(answer.valueDate));\n    }\n\n    if (!item || !item.initial || item.initial.length === 0) {\n      return undefined;\n    }\n\n    if (!item.initial[0].valueDate && !item.initial[0].valueDateTime) {\n      return undefined;\n    }\n\n    if (item.initial[0].valueDateTime) {\n      return date_core_1.parseDate(String(item.initial[0].valueDateTime));\n    }\n\n    return date_core_1.parseDate(String(item.initial[0].valueDate));\n  }\n\n  getMaxDate() {\n    const maxDate = extension_1.getExtension(extensions_1.default.DATE_MAX_VALUE_URL, this.props.item);\n    if (maxDate && maxDate.valueString) return fhirpathHelper_1.evaluateFhirpathExpressionToGetDate(this.props.item, maxDate.valueString);\n    return this.getMaxDateWithExtension();\n  }\n\n  getMaxDateWithExtension() {\n    const maxDate = extension_1.getExtension(extensions_1.default.MAX_VALUE_URL, this.props.item);\n\n    if (!maxDate) {\n      return;\n    }\n\n    if (maxDate.valueDate) {\n      return date_core_1.parseDate(String(maxDate.valueDate));\n    } else if (maxDate.valueDateTime) {\n      return date_core_1.parseDate(String(maxDate.valueDateTime));\n    }\n\n    return undefined;\n  }\n\n  getMinDate() {\n    const minDate = extension_1.getExtension(extensions_1.default.DATE_MIN_VALUE_URL, this.props.item);\n    if (minDate && minDate.valueString) return fhirpathHelper_1.evaluateFhirpathExpressionToGetDate(this.props.item, minDate.valueString);\n    return this.getMinDateWithExtension();\n  }\n\n  getMinDateWithExtension() {\n    const minDate = extension_1.getExtension(extensions_1.default.MIN_VALUE_URL, this.props.item);\n\n    if (!minDate) {\n      return;\n    }\n\n    if (minDate.valueDate) {\n      return date_core_1.parseDate(String(minDate.valueDate));\n    } else if (minDate.valueDateTime) {\n      return date_core_1.parseDate(String(minDate.valueDateTime));\n    }\n\n    return undefined;\n  }\n\n  shouldComponentUpdate(nextProps) {\n    var _a;\n\n    const responseItemHasChanged = this.props.responseItem !== nextProps.responseItem;\n    const helpItemHasChanged = this.props.isHelpOpen !== nextProps.isHelpOpen;\n    const resourcesHasChanged = JSON.stringify(this.props.resources) !== JSON.stringify(nextProps.resources);\n    const repeats = (_a = this.props.item.repeats) !== null && _a !== void 0 ? _a : false;\n    return responseItemHasChanged || helpItemHasChanged || resourcesHasChanged || repeats;\n  }\n\n  toLocaleDate(moment) {\n    return moment ? moment.locale(this.getLocaleFromLanguage()) : undefined;\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      item,\n      pdf,\n      id,\n      onRenderMarkdown\n    } = _a,\n          other = __rest(_a, [\"item\", \"pdf\", \"id\", \"onRenderMarkdown\"]);\n\n    if (pdf || index_2.isReadOnly(item)) {\n      return React.createElement(textview_1.default, {\n        id: id,\n        item: item,\n        value: this.getStringValue(),\n        onRenderMarkdown: onRenderMarkdown\n      }, this.props.children);\n    }\n\n    const valueDateTime = this.getDefaultDate(this.props);\n    const maxDateTime = this.getMaxDate();\n    const minDateTime = this.getMinDate();\n    const subLabelText = index_2.getSublabelText(this.props.item, this.props.onRenderMarkdown);\n    return React.createElement(\"div\", {\n      className: \"page_skjemautfyller__component page_skjemautfyller__component_datetime\"\n    }, React.createElement(validation_1.default, Object.assign({}, other), React.createElement(date_time_picker_1.default, {\n      id: index_2.getId(id),\n      resources: {\n        dateResources: this.props.resources\n      },\n      locale: this.getLocaleFromLanguage(),\n      dateValue: valueDateTime ? this.toLocaleDate(moment_1.default(valueDateTime)) : undefined,\n      timeValue: valueDateTime ? moment_1.default(valueDateTime).format('HH:mm') : undefined,\n      maximumDateTime: maxDateTime ? this.toLocaleDate(moment_1.default(maxDateTime)) : undefined,\n      minimumDateTime: minDateTime ? this.toLocaleDate(moment_1.default(minDateTime)) : undefined,\n      initialDate: this.toLocaleDate(moment_1.default(new Date())),\n      onChange: this.dispatchNewDate,\n      onBlur: this.onBlur,\n      legend: React.createElement(label_1.default, {\n        item: this.props.item,\n        onRenderMarkdown: this.props.onRenderMarkdown\n      }),\n      subLabel: subLabelText ? React.createElement(sublabel_1.default, {\n        subLabelText: subLabelText\n      }) : undefined,\n      isRequired: index_2.isRequired(item),\n      errorMessage: extension_1.getValidationTextExtension(item),\n      timeClassName: \"page_skjemautfyller__input\",\n      helpButton: this.props.renderHelpButton(),\n      helpElement: this.props.renderHelpElement()\n    })), this.props.renderDeleteButton('page_skjemautfyller__deletebutton--margin-top'), this.props.repeatButton, this.props.children ? React.createElement(\"div\", {\n      className: \"nested-fieldset nested-fieldset--full-height\"\n    }, this.props.children) : null);\n  }\n\n}\n\nconst withCommonFunctionsComponent = with_common_functions_1.default(DateTime);\nconst connectedComponent = react_redux_1.connect(map_props_1.mapStateToProps, map_props_1.mapDispatchToProps, map_props_1.mergeProps)(layout_change_1.default(withCommonFunctionsComponent));\nexports.default = connectedComponent;","map":null,"metadata":{},"sourceType":"script"}