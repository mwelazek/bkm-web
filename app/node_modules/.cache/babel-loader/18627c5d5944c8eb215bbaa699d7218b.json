{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QItems = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _antd = require(\"antd\");\n\nvar _mls = require(\"../mls\");\n\nvar Text = _antd.Typography.Text;\n\nvar QItems = function QItems(props) {\n  var qItems = props.qItems;\n\n  var _useTranslation = (0, _mls.useTranslation)(),\n      t = _useTranslation.t;\n\n  if (!Array.isArray(qItems) || qItems.length === 0) {\n    return null;\n  }\n\n  return _react[\"default\"].createElement(_react[\"default\"].Fragment, null, qItems.map(function (item, i) {\n    var _item$linkId, _item$item;\n\n    var linkId = (_item$linkId = item.linkId) !== null && _item$linkId !== void 0 ? _item$linkId : '';\n    var text = item.text;\n    var nestedItems = (_item$item = item.item) !== null && _item$item !== void 0 ? _item$item : [];\n    var isGroup = item.type === 'group';\n    return _react[\"default\"].createElement(\"ul\", {\n      key: \"item-\".concat(i),\n      className: \"questionnaireItemsList\"\n    }, _react[\"default\"].createElement(\"li\", {\n      className: \"questionnaireItemsList-title\",\n      \"data-testid\": \"linkId-\".concat(item.linkId)\n    }, _react[\"default\"].createElement(Text, null, text), \"\\xA0\", _react[\"default\"].createElement(_antd.Tag, {\n      color: \"default\"\n    }, t('linkId: {{linkId}}', {\n      linkId: linkId\n    })), _react[\"default\"].createElement(_antd.Tag, {\n      color: \"default\"\n    }, t('type: {{itemType}}', {\n      itemType: item.type\n    }))), !isGroup && _react[\"default\"].createElement(\"li\", null, _react[\"default\"].createElement(Questions, {\n      questions: nestedItems\n    })), isGroup && _react[\"default\"].createElement(\"li\", null, _react[\"default\"].createElement(QItems, {\n      qItems: nestedItems\n    })));\n  }));\n};\n\nexports.QItems = QItems;\n\nvar Questions = function Questions(props) {\n  var questions = props.questions;\n\n  var _useTranslation2 = (0, _mls.useTranslation)(),\n      t = _useTranslation2.t;\n\n  if (!Array.isArray(questions) || questions.length === 0) {\n    return null;\n  }\n\n  return _react[\"default\"].createElement(\"ul\", {\n    className: \"questionnaireItemsList__questions-list\"\n  }, questions.map(function (item, i) {\n    var hasLinkId = item.linkId === undefined || item.linkId === null;\n    var type = item.type;\n    var text = item.text;\n    return _react[\"default\"].createElement(\"li\", {\n      key: \"item-\".concat(i),\n      \"data-testid\": \"linkId-\".concat(item.linkId)\n    }, text, hasLinkId ? _react[\"default\"].createElement(_react[\"default\"].Fragment, null, \"\\xA0\", _react[\"default\"].createElement(_antd.Tag, {\n      color: \"default\"\n    }, t('linkId: {{linkId}}', {\n      linkId: item.linkId\n    })), _react[\"default\"].createElement(_antd.Tag, {\n      color: \"default\"\n    }, t('type: {{itemType}}', {\n      itemType: type\n    }))) : null, item.item ? _react[\"default\"].createElement(QItems, {\n      qItems: item.item\n    }) : null);\n  }));\n};","map":null,"metadata":{},"sourceType":"script"}