{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst react_redux_1 = require(\"react-redux\");\n\nconst newValue_1 = require(\"../../../actions/newValue\");\n\nconst choice_1 = require(\"../../../util/choice\");\n\nconst index_1 = require(\"../../../util/index\");\n\nconst map_props_1 = require(\"../../../util/map-props\");\n\nconst with_common_functions_1 = __importDefault(require(\"../../with-common-functions\"));\n\nconst autosuggest_view_1 = __importDefault(require(\"../choice-common/autosuggest-view\"));\n\nconst textview_1 = __importDefault(require(\"../textview\"));\n\nconst checkbox_view_1 = __importDefault(require(\"./checkbox-view\"));\n\nconst dropdown_view_1 = __importDefault(require(\"./dropdown-view\"));\n\nconst radio_view_1 = __importDefault(require(\"./radio-view\"));\n\nclass Choice extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getValue = (item, answer) => {\n      var _a, _b;\n\n      if (answer && Array.isArray(answer)) {\n        return answer.map(el => {\n          if (el && el.valueCoding && el.valueCoding.code) {\n            return el.valueCoding.code;\n          }\n        });\n      } else if (answer && !Array.isArray(answer) && answer.valueCoding && answer.valueCoding.code) {\n        return [answer.valueCoding.code];\n      }\n\n      const initialSelectedOption = (_a = item.answerOption) === null || _a === void 0 ? void 0 : _a.filter(x => x.initialSelected);\n\n      if (initialSelectedOption && initialSelectedOption.length > 0) {\n        return [(_b = initialSelectedOption[0].valueCoding) === null || _b === void 0 ? void 0 : _b.code];\n      }\n\n      if (!item || !item.initial || item.initial.length === 0 || !item.initial[0].valueCoding || !!item.initial[0].valueCoding.code) {\n        return undefined;\n      }\n\n      return [String(item.initial[0].valueCoding.code)];\n    };\n\n    this.getPDFValue = (item, answer) => {\n      const {\n        resources,\n        containedResources\n      } = this.props;\n      const value = this.getValue(item, answer);\n\n      if (!value) {\n        let text = '';\n\n        if (resources && resources.ikkeBesvart) {\n          text = resources.ikkeBesvart;\n        }\n\n        return text;\n      }\n\n      return value.map(el => choice_1.getDisplay(choice_1.getOptions(item, containedResources), el)).join(', ');\n    };\n\n    this.handleCheckboxChange = code => {\n      var _a, _b;\n\n      const {\n        dispatch,\n        answer,\n        promptLoginMessage,\n        item,\n        onAnswerChange,\n        path\n      } = this.props;\n\n      if (dispatch && code) {\n        const display = choice_1.getDisplay(choice_1.getOptions(item, this.props.containedResources), code);\n        const system = choice_1.getSystem(item, code, this.props.containedResources);\n        const coding = {\n          code,\n          display,\n          system\n        };\n        const responseAnswer = {\n          valueCoding: coding\n        };\n\n        if (choice_1.getIndexOfAnswer(code, answer) > -1) {\n          (_a = dispatch(newValue_1.removeCodingValueAsync(path, coding, item))) === null || _a === void 0 ? void 0 : _a.then(newState => onAnswerChange(newState, path, item, responseAnswer));\n\n          if (promptLoginMessage) {\n            promptLoginMessage();\n          }\n        } else {\n          (_b = dispatch(newValue_1.newCodingValueAsync(path, coding, item, true))) === null || _b === void 0 ? void 0 : _b.then(newState => onAnswerChange(newState, path, item, responseAnswer));\n\n          if (promptLoginMessage) {\n            promptLoginMessage();\n          }\n        }\n      }\n    };\n\n    this.clearCodingAnswer = coding => {\n      var _a;\n\n      const {\n        dispatch,\n        promptLoginMessage,\n        item,\n        onAnswerChange,\n        path\n      } = this.props;\n\n      if (dispatch) {\n        const responseAnswer = {\n          valueCoding: coding\n        };\n        (_a = dispatch(newValue_1.removeCodingValueAsync(path, coding, item))) === null || _a === void 0 ? void 0 : _a.then(newState => onAnswerChange(newState, path, item, responseAnswer));\n\n        if (promptLoginMessage) {\n          promptLoginMessage();\n        }\n      }\n    };\n\n    this.handleChange = (code, systemArg, displayArg) => {\n      var _a;\n\n      const {\n        dispatch,\n        promptLoginMessage,\n        item,\n        onAnswerChange,\n        path\n      } = this.props;\n\n      if (dispatch && code) {\n        const display = displayArg ? displayArg : choice_1.getDisplay(choice_1.getOptions(item, this.props.containedResources), code);\n        const system = systemArg ? systemArg : choice_1.getSystem(item, code, this.props.containedResources);\n        const coding = {\n          code,\n          display,\n          system\n        };\n        const responseAnswer = {\n          valueCoding: coding\n        };\n        (_a = dispatch(newValue_1.newCodingValueAsync(path, coding, item))) === null || _a === void 0 ? void 0 : _a.then(newState => onAnswerChange(newState, path, item, responseAnswer));\n\n        if (promptLoginMessage) {\n          promptLoginMessage();\n        }\n      }\n    };\n\n    this.renderCheckbox = options => {\n      return React.createElement(checkbox_view_1.default, Object.assign({\n        options: options,\n        id: this.props.id,\n        handleChange: this.handleCheckboxChange,\n        selected: this.getValue(this.props.item, this.props.answer),\n        onRenderMarkdown: this.props.onRenderMarkdown\n      }, this.props), this.props.children);\n    };\n\n    this.renderDropdown = options => {\n      return React.createElement(dropdown_view_1.default, Object.assign({\n        options: options,\n        id: this.props.id,\n        handleChange: this.handleChange,\n        selected: this.getValue(this.props.item, this.props.answer),\n        validateInput: value => choice_1.validateInput(this.props.item, value, this.props.containedResources),\n        resources: this.props.resources,\n        onRenderMarkdown: this.props.onRenderMarkdown\n      }, this.props), this.props.children);\n    };\n\n    this.renderRadio = options => {\n      return React.createElement(radio_view_1.default, Object.assign({\n        options: options,\n        getErrorMessage: value => choice_1.getErrorMessage(this.props.item, value, this.props.resources, this.props.containedResources),\n        handleChange: this.handleChange,\n        validateInput: value => choice_1.validateInput(this.props.item, value, this.props.containedResources),\n        id: this.props.id,\n        selected: this.getValue(this.props.item, this.props.answer),\n        onRenderMarkdown: this.props.onRenderMarkdown\n      }, this.props), this.props.children);\n    };\n\n    this.renderAutosuggest = () => {\n      return React.createElement(autosuggest_view_1.default, Object.assign({\n        handleChange: this.handleChange,\n        id: this.props.id,\n        clearCodingAnswer: this.clearCodingAnswer,\n        onRenderMarkdown: this.props.onRenderMarkdown\n      }, this.props), this.props.children);\n    };\n\n    this.state = {\n      valid: true,\n      validated: false\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    var _a;\n\n    const responseItemHasChanged = this.props.responseItem !== nextProps.responseItem;\n    const helpItemHasChanged = this.props.isHelpOpen !== nextProps.isHelpOpen;\n    const resourcesHasChanged = JSON.stringify(this.props.resources) !== JSON.stringify(nextProps.resources);\n    const repeats = (_a = this.props.item.repeats) !== null && _a !== void 0 ? _a : false;\n    return responseItemHasChanged || helpItemHasChanged || resourcesHasChanged || repeats;\n  }\n\n  render() {\n    const {\n      id,\n      item,\n      pdf,\n      answer,\n      containedResources,\n      children,\n      onRenderMarkdown\n    } = this.props;\n\n    if (pdf || index_1.isReadOnly(item)) {\n      return React.createElement(textview_1.default, {\n        id: id,\n        item: item,\n        value: this.getPDFValue(item, answer),\n        onRenderMarkdown: onRenderMarkdown\n      }, children);\n    }\n\n    return React.createElement(React.Fragment, null, choice_1.renderOptions(item, containedResources, this.renderRadio, this.renderCheckbox, this.renderDropdown, this.renderAutosuggest));\n  }\n\n}\n\nexports.Choice = Choice;\nconst withCommonFunctionsComponent = with_common_functions_1.default(Choice);\nconst connectedComponent = react_redux_1.connect(map_props_1.mapStateToProps, map_props_1.mapDispatchToProps, map_props_1.mergeProps)(withCommonFunctionsComponent);\nexports.default = connectedComponent;","map":null,"metadata":{},"sourceType":"script"}