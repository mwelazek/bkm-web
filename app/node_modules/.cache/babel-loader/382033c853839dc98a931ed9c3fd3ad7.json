{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst react_collapse_1 = require(\"react-collapse\");\n\nconst NotificationPanel_1 = __importDefault(require(\"@helsenorge/designsystem-react/components/NotificationPanel\"));\n\nconst spinner_1 = require(\"@helsenorge/toolkit/components/atoms/spinner\");\n\nconst autosuggest_1 = __importDefault(require(\"@helsenorge/toolkit/components/molecules/autosuggest\"));\n\nconst validation_1 = __importDefault(require(\"@helsenorge/toolkit/components/molecules/form/validation\"));\n\nconst debounce_1 = require(\"@helsenorge/core-utils/debounce\");\n\nconst constants_1 = require(\"../../../constants\");\n\nconst itemType_1 = __importDefault(require(\"../../../constants/itemType\"));\n\nconst extension_1 = require(\"../../../util/extension\");\n\nconst index_1 = require(\"../../../util/index\");\n\nconst label_1 = __importDefault(require(\"../label\"));\n\nconst sublabel_1 = __importDefault(require(\"../sublabel\"));\n\nclass AutosuggestView extends React.Component {\n  constructor(props) {\n    var _a;\n\n    super(props);\n    this.debouncedOnSuggestionsFetchRequested = debounce_1.debounce(this.onSuggestionsFetchRequested, ((_a = this.props.autoSuggestProps) === null || _a === void 0 ? void 0 : _a.typingSearchDelay) || 500, false);\n    const codingAnswer = this.getCodingAnswer();\n    const initialInputValue = (codingAnswer === null || codingAnswer === void 0 ? void 0 : codingAnswer.code) === constants_1.OPEN_CHOICE_ID && (codingAnswer === null || codingAnswer === void 0 ? void 0 : codingAnswer.system) === constants_1.OPEN_CHOICE_SYSTEM ? this.getStringAnswer() : codingAnswer === null || codingAnswer === void 0 ? void 0 : codingAnswer.display;\n    this.state = {\n      inputValue: initialInputValue || '',\n      lastSearchValue: '',\n      system: '',\n      suggestions: [],\n      noSuggestionsToShow: false,\n      isLoading: false,\n      hasLoadError: false,\n      isDirty: false\n    };\n    this.debouncedOnSuggestionsFetchRequested = this.debouncedOnSuggestionsFetchRequested.bind(this);\n    this.onSuggestionSelected = this.onSuggestionSelected.bind(this);\n    this.errorCallback = this.errorCallback.bind(this);\n    this.successCallback = this.successCallback.bind(this);\n    this.onSubmitValidator = this.onSubmitValidator.bind(this);\n    this.onChangeInput = this.onChangeInput.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n  }\n\n  isOpenChoice() {\n    return this.props.item.type === itemType_1.default.OPENCHOICE;\n  }\n\n  onSubmitValidator() {\n    return index_1.isRequired(this.props.item) ? !!this.hasCodingAnswer() || !!this.hasStringAnswer() : true;\n  }\n\n  successCallback(valueSet) {\n    if (!valueSet.compose || !valueSet.compose.include || valueSet.compose.include.length === 0 || !valueSet.compose.include[0].concept || !valueSet.compose.include[0].system) {\n      this.setState({\n        isLoading: false,\n        noSuggestionsToShow: !this.isOpenChoice(),\n        suggestions: []\n      });\n      return;\n    }\n\n    this.setState({\n      isLoading: false,\n      system: valueSet.compose.include[0].system || '',\n      suggestions: valueSet.compose.include[0].concept.map(x => {\n        return {\n          label: x.display || '',\n          value: x.code\n        };\n      })\n    });\n  }\n\n  errorCallback() {\n    this.setState({\n      isLoading: false,\n      hasLoadError: true\n    });\n  }\n\n  clearCodingAnswerIfExists() {\n    const codingAnswer = this.getCodingAnswer();\n    const hasStringAnswer = this.hasStringAnswer();\n\n    if (codingAnswer && !hasStringAnswer) {\n      this.props.clearCodingAnswer(codingAnswer);\n    }\n  }\n\n  onSuggestionsFetchRequested(_ref) {\n    let {\n      value\n    } = _ref;\n\n    var _a;\n\n    if (value.length < (((_a = this.props.autoSuggestProps) === null || _a === void 0 ? void 0 : _a.minSearchCharacters) || 0)) {\n      this.setState({\n        suggestions: []\n      });\n      return;\n    }\n\n    if (value === this.state.lastSearchValue) {\n      return;\n    }\n\n    if (this.props.fetchValueSet) {\n      this.setState({\n        isLoading: true,\n        suggestions: [],\n        lastSearchValue: value\n      });\n      this.clearCodingAnswerIfExists();\n      this.props.fetchValueSet(value, this.props.item, this.successCallback, this.errorCallback);\n    }\n  }\n\n  onChangeInput(_event, _ref2) {\n    let {\n      newValue\n    } = _ref2;\n\n    if (newValue === '') {\n      this.clearCodingAnswerIfExists();\n    }\n\n    this.setState({\n      inputValue: newValue,\n      isDirty: true,\n      noSuggestionsToShow: false,\n      hasLoadError: this.state.hasLoadError && !newValue\n    });\n  }\n\n  onSuggestionSelected(_event, _ref3) {\n    let {\n      suggestion\n    } = _ref3;\n    this.setState({\n      lastSearchValue: suggestion.label,\n      isDirty: false\n    });\n    this.props.handleChange(suggestion.value, this.state.system, suggestion.label);\n  }\n\n  onBlur(_e, _ref4) {\n    let {\n      highlightedSuggestion\n    } = _ref4;\n\n    if (this.state.isDirty && highlightedSuggestion) {\n      this.setState({\n        lastSearchValue: highlightedSuggestion.label,\n        isDirty: false,\n        noSuggestionsToShow: false\n      });\n      this.props.handleChange(highlightedSuggestion.value, this.state.system, highlightedSuggestion.label);\n    } else if (this.state.isDirty && this.isOpenChoice() && this.props.handleStringChange) {\n      this.setState({\n        isDirty: false,\n        noSuggestionsToShow: false\n      });\n      const codingAnswer = this.getCodingAnswer();\n\n      if (this.state.inputValue) {\n        this.props.handleChange(constants_1.OPEN_CHOICE_ID, constants_1.OPEN_CHOICE_SYSTEM, constants_1.OPEN_CHOICE_LABEL);\n        this.props.handleStringChange(this.state.inputValue);\n      } else if (codingAnswer) {\n        this.props.clearCodingAnswer(codingAnswer);\n        this.props.handleStringChange('');\n      }\n    } else {\n      this.setState({\n        noSuggestionsToShow: false\n      });\n    }\n  }\n\n  hasStringAnswer() {\n    return !!this.getStringAnswer();\n  }\n\n  hasCodingAnswer() {\n    return !!this.getCodingAnswer();\n  }\n\n  getCodingAnswer() {\n    if (Array.isArray(this.props.answer)) {\n      return this.props.answer.reduce((acc, x) => acc || x.valueCoding, undefined);\n    } else if (this.props.answer) {\n      return this.props.answer.valueCoding;\n    }\n\n    return undefined;\n  }\n\n  getStringAnswer() {\n    if (Array.isArray(this.props.answer)) {\n      return this.props.answer.reduce((acc, x) => acc || x.valueString, undefined);\n    } else if (this.props.answer) {\n      return this.props.answer.valueString;\n    }\n  }\n\n  render() {\n    var _a, _b, _c;\n\n    const subLabelText = index_1.getSublabelText(this.props.item, this.props.onRenderMarkdown);\n    return React.createElement(\"div\", {\n      className: \"page_skjemautfyller__component page_skjemautfyller__component_choice page_skjemautfyller__component_choice_autosuggest\"\n    }, React.createElement(react_collapse_1.Collapse, {\n      isOpened: true\n    }, React.createElement(validation_1.default, Object.assign({}, this.props), React.createElement(autosuggest_1.default, {\n      id: index_1.getId(this.props.id),\n      label: React.createElement(label_1.default, {\n        item: this.props.item,\n        onRenderMarkdown: this.props.onRenderMarkdown\n      }),\n      subLabel: subLabelText ? React.createElement(sublabel_1.default, {\n        subLabelText: subLabelText\n      }) : undefined,\n      className: \"page_skjemautfyller__autosuggest\",\n      type: \"search\",\n      isRequired: index_1.isRequired(this.props.item),\n      placeholder: extension_1.getPlaceholder(this.props.item),\n      errorMessage: extension_1.getValidationTextExtension(this.props.item),\n      helpButton: this.props.renderHelpButton(),\n      helpElement: this.props.renderHelpElement(),\n      suggestions: this.state.suggestions,\n      onSuggestionsFetchRequested: this.debouncedOnSuggestionsFetchRequested,\n      onSuggestionsClearRequested: () => {},\n      noCharacterValidation: true,\n      onSubmitValidator: this.onSubmitValidator,\n      onSuggestionSelected: this.onSuggestionSelected,\n      onChange: this.onChangeInput,\n      onBlur: this.onBlur,\n      focusInputOnSuggestionClick: true,\n      value: this.state.inputValue\n    })), this.state.isLoading && React.createElement(\"div\", null, React.createElement(spinner_1.Spinner, {\n      inline: true,\n      mini: true\n    })), this.state.noSuggestionsToShow && React.createElement(\"div\", {\n      className: \"page_skjemautfyller__no-suggestions\"\n    }, (_b = (_a = this.props.resources) === null || _a === void 0 ? void 0 : _a.autosuggestNoSuggestions) === null || _b === void 0 ? void 0 : _b.replace('{0}', this.state.inputValue)), this.state.hasLoadError && React.createElement(NotificationPanel_1.default, {\n      variant: \"alert\"\n    }, (_c = this.props.resources) === null || _c === void 0 ? void 0 : _c.autoSuggestLoadError), this.props.renderDeleteButton('page_skjemautfyller__deletebutton--margin-top'), this.props.repeatButton, this.props.children ? React.createElement(\"div\", {\n      className: \"nested-fieldset nested-fieldset--full-height\"\n    }, this.props.children) : null));\n  }\n\n}\n\nexports.default = AutosuggestView;","map":null,"metadata":{},"sourceType":"script"}