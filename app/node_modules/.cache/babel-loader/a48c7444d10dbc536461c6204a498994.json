{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport { ERROR_INVALID_YEAR, ERROR_REQUIRED_YEAR, ERROR_YEAR_AFTER_MAX_DATE, ERROR_YEAR_BEFORE_MIN_DATE } from '../../../constants/datetime';\nimport SafeInputField from '../../atoms/safe-input-field';\nimport ValidationError from './../../molecules/form/validation-error';\nexport class YearInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value || 0,\n      isValid: true,\n      isValidated: false,\n      errorMessage: ''\n    };\n    this.notifyValidated = this.notifyValidated.bind(this);\n    this.validate = this.validate.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.isValid = this.isValid.bind(this);\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    if (prevState.isValid !== this.state.isValid) {\n      this.notifyValidated();\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.value && nextProps.value !== this.props.value) {\n      this.setState({\n        value: nextProps.value\n      });\n    }\n  }\n\n  validateRequired() {\n    var _a;\n\n    if (!this.state.value && this.props.isRequired) {\n      return ((_a = this.props.errorResources) === null || _a === void 0 ? void 0 : _a.errorRequiredYear) || ERROR_REQUIRED_YEAR;\n    }\n  }\n\n  validate(value) {\n    var _a, _b, _c;\n\n    if (value && value.toString().length !== 4) {\n      return ((_a = this.props.errorResources) === null || _a === void 0 ? void 0 : _a.errorInvalidYear) || ERROR_INVALID_YEAR;\n    }\n\n    if (value && this.props.maximumYear && this.props.maximumYear < value) {\n      const errorString = ((_b = this.props.errorResources) === null || _b === void 0 ? void 0 : _b.errorYearAfterMaxDate) || ERROR_YEAR_AFTER_MAX_DATE;\n      return `${errorString}: ${this.props.maximumYear}`;\n    }\n\n    if (value && this.props.minimumYear && this.props.minimumYear > value) {\n      const errorString = ((_c = this.props.errorResources) === null || _c === void 0 ? void 0 : _c.errorYearBeforeMinDate) || ERROR_YEAR_BEFORE_MIN_DATE;\n      return `${errorString}: ${this.props.minimumYear}`;\n    }\n  }\n\n  validateField() {\n    return new Promise(resolve => {\n      const errorMessage = this.validateRequired() || this.validate(this.state.value);\n      this.setState({\n        errorMessage: errorMessage || '',\n        isValid: !errorMessage,\n        isValidated: true\n      }, () => {\n        this.notifyValidated();\n        resolve();\n      });\n    });\n  }\n\n  renderErrorMessage() {\n    if (this.state.isValidated && !this.state.isValid) {\n      return React.createElement(ValidationError, {\n        isValid: this.state.isValid,\n        error: this.state.errorMessage,\n        testId: this.props.validationTestId\n      });\n    }\n\n    return null;\n  }\n\n  onChange(_e, _id, formattedValue) {\n    const numberValue = parseInt(formattedValue) || 0;\n    this.setState({\n      value: numberValue\n    });\n\n    if (!this.state.isValid) {\n      const errorMessage = this.validate(numberValue);\n      this.setState({\n        isValid: !errorMessage\n      });\n    }\n\n    if (this.props.onChange) {\n      this.props.onChange(numberValue);\n    }\n  }\n\n  notifyValidated() {\n    if (this.props.onValidated) {\n      this.props.onValidated(this.state.isValid);\n    }\n  }\n\n  onBlur(e) {\n    const errorMessage = this.validateRequired() || this.validate(this.state.value);\n    this.setState({\n      errorMessage: errorMessage || '',\n      isValidated: true,\n      isValid: !errorMessage\n    });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(e);\n    }\n  }\n\n  isValid() {\n    return this.state.isValid;\n  }\n\n  render() {\n    const wrapperClasses = classNames({\n      mol_validation: true,\n      'mol_validation--active': !this.state.isValid\n    }, this.props.className);\n    return React.createElement(\"div\", {\n      className: wrapperClasses,\n      id: `${this.props.id}-wrapper`\n    }, this.renderErrorMessage(), React.createElement(SafeInputField, {\n      type: \"number\",\n      inputName: `${this.props.id}-input`,\n      maxLength: 4,\n      pattern: \"^[0-9]{4}$\",\n      isValidationHidden: true,\n      label: this.props.label,\n      subLabel: this.props.subLabel,\n      disabled: this.props.disabled,\n      optionalLabel: this.props.optionalLabel,\n      requiredLabel: this.props.requiredLabel,\n      showRequiredLabel: this.props.showRequiredLabel,\n      showOptionalLabel: this.props.showOptionalLabel,\n      isRequired: this.props.isRequired,\n      placeholder: this.props.placeholder,\n      helpButton: this.props.helpButton,\n      helpElement: this.props.helpElement,\n      value: this.state.value,\n      labelTestId: this.props.labelTestId,\n      onChange: this.onChange,\n      onBlur: this.onBlur\n    }));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}