{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst moment_1 = __importDefault(require(\"moment\"));\n\nconst fhir_1 = require(\"../types/fhir\");\n\nconst date_core_1 = require(\"@helsenorge/toolkit/components/molecules/time-input/date-core\");\n\nconst EPSILON = 0.0000001;\nconst OPERATOR_EQUALS = fhir_1.QuestionnaireEnableOperator.Equals.code;\nconst OPERATOR_NOTEQUALS = fhir_1.QuestionnaireEnableOperator.NotEquals.code;\nconst OPERATOR_GREATEROREQUALS = fhir_1.QuestionnaireEnableOperator.GreaterOrEquals.code;\nconst OPERATOR_GREATERTHAN = fhir_1.QuestionnaireEnableOperator.GreaterThan.code;\nconst OPERATOR_LESSOREQUALS = fhir_1.QuestionnaireEnableOperator.LessOrEquals.code;\nconst OPERATOR_LESSTHAN = fhir_1.QuestionnaireEnableOperator.LessThan.code;\n\nfunction enableWhenMatches(enableWhen, answer) {\n  if (enableWhen.answerBoolean !== undefined) {\n    return enableWhenMatchesBooleanAnswer(answer.valueBoolean, enableWhen.answerBoolean, enableWhen.operator);\n  }\n\n  if (enableWhen.answerDecimal || enableWhen.answerDecimal === 0) {\n    return enableWhenMatchesDecimalAnswer(answer.valueDecimal, enableWhen.answerDecimal, enableWhen.operator);\n  }\n\n  if (enableWhen.answerInteger || enableWhen.answerInteger === 0) {\n    return enableWhenMatchesIntegerAnswer(answer.valueInteger, enableWhen.answerInteger, enableWhen.operator);\n  }\n\n  if (enableWhen.answerDate) {\n    return enableWhenMatchesDateAnswer(answer.valueDate, enableWhen.answerDate, enableWhen.operator);\n  }\n\n  if (enableWhen.answerDateTime) {\n    return enableWhenMatchesDateTimeAnswer(answer.valueDateTime, enableWhen.answerDateTime, enableWhen.operator);\n  }\n\n  if (enableWhen.answerTime) {\n    return enableWhenMatchesStringAnswer(answer.valueTime, enableWhen.answerTime, enableWhen.operator);\n  }\n\n  if (enableWhen.answerString || enableWhen.answerString === '') {\n    return enableWhenMatchesStringAnswer(answer.valueString, enableWhen.answerString, enableWhen.operator);\n  }\n\n  if (enableWhen.answerCoding) {\n    if (enableWhen.answerCoding === undefined || answer.valueCoding === undefined) {\n      return false;\n    }\n\n    const isSameSystem = answer.valueCoding.system === enableWhen.answerCoding.system;\n    return isSameSystem && enableWhenMatchesCodeAnswer(answer.valueCoding.code, enableWhen.answerCoding.code, enableWhen.operator);\n  }\n\n  if (enableWhen.answerQuantity) {\n    if (answer.valueQuantity === undefined || enableWhen.answerQuantity === undefined) {\n      return false;\n    }\n\n    const isSameSystem = answer.valueQuantity.system === enableWhen.answerQuantity.system;\n    const isSameCode = answer.valueQuantity.code === enableWhen.answerQuantity.code;\n    return isSameSystem && isSameCode && enableWhenMatchesDecimalAnswer(answer.valueQuantity.value, enableWhen.answerQuantity.value, enableWhen.operator);\n  }\n\n  if (enableWhen.answerReference) {\n    if (enableWhen.answerReference === undefined) {\n      return false;\n    }\n\n    if (answer.valueCoding) {\n      return enableWhenMatchesReferenceAnswer(answer.valueCoding.code, enableWhen.answerReference.reference, enableWhen.operator);\n    }\n\n    if (answer.valueReference) {\n      return enableWhenMatchesReferenceAnswer(answer.valueReference.reference, enableWhen.answerReference.reference, enableWhen.operator);\n    }\n  }\n\n  return false;\n}\n\nexports.enableWhenMatches = enableWhenMatches;\n\nfunction enableWhenMatchesBooleanAnswer(answerValueBoolean, enableWhenAnswerBoolean, operator) {\n  if (answerValueBoolean === undefined || enableWhenAnswerBoolean === undefined) {\n    return false;\n  }\n\n  switch (operator) {\n    case OPERATOR_EQUALS:\n      return answerValueBoolean === enableWhenAnswerBoolean;\n\n    case OPERATOR_NOTEQUALS:\n      return answerValueBoolean !== enableWhenAnswerBoolean;\n\n    case OPERATOR_GREATEROREQUALS:\n      return answerValueBoolean === enableWhenAnswerBoolean;\n\n    case OPERATOR_GREATERTHAN:\n      return false;\n\n    case OPERATOR_LESSOREQUALS:\n      return answerValueBoolean === enableWhenAnswerBoolean;\n\n    case OPERATOR_LESSTHAN:\n      return false;\n\n    default:\n      return false;\n  }\n}\n\nfunction enableWhenMatchesDecimalAnswer(answerValueDecimal, enableWhenAnswerDecimal, operator) {\n  if (answerValueDecimal === undefined || enableWhenAnswerDecimal === undefined) {\n    return false;\n  }\n\n  const lessThan = (first, second) => first - second < 0;\n\n  const greaterThan = (first, second) => first - second > 0;\n\n  const equals = (first, second) => Math.abs(first - second) <= EPSILON;\n\n  switch (operator) {\n    case OPERATOR_EQUALS:\n      return equals(answerValueDecimal, enableWhenAnswerDecimal);\n\n    case OPERATOR_NOTEQUALS:\n      return !equals(answerValueDecimal, enableWhenAnswerDecimal);\n\n    case OPERATOR_GREATEROREQUALS:\n      return equals(answerValueDecimal, enableWhenAnswerDecimal) || greaterThan(answerValueDecimal, enableWhenAnswerDecimal);\n\n    case OPERATOR_GREATERTHAN:\n      return !equals(answerValueDecimal, enableWhenAnswerDecimal) && greaterThan(answerValueDecimal, enableWhenAnswerDecimal);\n\n    case OPERATOR_LESSOREQUALS:\n      return equals(answerValueDecimal, enableWhenAnswerDecimal) || lessThan(answerValueDecimal, enableWhenAnswerDecimal);\n\n    case OPERATOR_LESSTHAN:\n      return !equals(answerValueDecimal, enableWhenAnswerDecimal) && lessThan(answerValueDecimal, enableWhenAnswerDecimal);\n\n    default:\n      return false;\n  }\n}\n\nfunction enableWhenMatchesIntegerAnswer(answerValueInteger, enableWhenAnswerInteger, operator) {\n  if (answerValueInteger === undefined || enableWhenAnswerInteger === undefined) {\n    return false;\n  }\n\n  switch (operator) {\n    case OPERATOR_EQUALS:\n      return answerValueInteger === enableWhenAnswerInteger;\n\n    case OPERATOR_NOTEQUALS:\n      return answerValueInteger !== enableWhenAnswerInteger;\n\n    case OPERATOR_GREATEROREQUALS:\n      return answerValueInteger >= enableWhenAnswerInteger;\n\n    case OPERATOR_GREATERTHAN:\n      return answerValueInteger > enableWhenAnswerInteger;\n\n    case OPERATOR_LESSOREQUALS:\n      return answerValueInteger <= enableWhenAnswerInteger;\n\n    case OPERATOR_LESSTHAN:\n      return answerValueInteger < enableWhenAnswerInteger;\n\n    default:\n      return false;\n  }\n}\n\nfunction enableWhenMatchesDateAnswer(answerValueDate, enableWhenAnswerDate, operator) {\n  if (answerValueDate === undefined || enableWhenAnswerDate === undefined) {\n    return false;\n  }\n\n  const aValueDate = date_core_1.parseDate(String(answerValueDate));\n  const ewAnswerDate = date_core_1.parseDate(String(enableWhenAnswerDate));\n\n  switch (operator) {\n    case OPERATOR_EQUALS:\n      return moment_1.default(aValueDate).isSame(ewAnswerDate);\n\n    case OPERATOR_NOTEQUALS:\n      return !moment_1.default(aValueDate).isSame(ewAnswerDate);\n\n    case OPERATOR_GREATEROREQUALS:\n      return moment_1.default(aValueDate).isSameOrAfter(ewAnswerDate);\n\n    case OPERATOR_GREATERTHAN:\n      return moment_1.default(aValueDate).isAfter(ewAnswerDate);\n\n    case OPERATOR_LESSOREQUALS:\n      return moment_1.default(aValueDate).isSameOrBefore(ewAnswerDate);\n\n    case OPERATOR_LESSTHAN:\n      return moment_1.default(aValueDate).isBefore(ewAnswerDate);\n\n    default:\n      return false;\n  }\n}\n\nfunction enableWhenMatchesDateTimeAnswer(answerValueDateTime, enableWhenAnswerDateTime, operator) {\n  if (answerValueDateTime === undefined || enableWhenAnswerDateTime === undefined) {\n    return false;\n  }\n\n  const aValueDateTime = date_core_1.parseDate(String(answerValueDateTime));\n  const ewAnswerDateTime = date_core_1.parseDate(String(enableWhenAnswerDateTime));\n\n  switch (operator) {\n    case OPERATOR_EQUALS:\n      return moment_1.default(aValueDateTime).isSame(ewAnswerDateTime);\n\n    case OPERATOR_NOTEQUALS:\n      return !moment_1.default(aValueDateTime).isSame(ewAnswerDateTime);\n\n    case OPERATOR_GREATEROREQUALS:\n      return moment_1.default(aValueDateTime).isSameOrAfter(ewAnswerDateTime);\n\n    case OPERATOR_GREATERTHAN:\n      return moment_1.default(aValueDateTime).isAfter(ewAnswerDateTime);\n\n    case OPERATOR_LESSOREQUALS:\n      return moment_1.default(aValueDateTime).isSameOrBefore(ewAnswerDateTime);\n\n    case OPERATOR_LESSTHAN:\n      return moment_1.default(aValueDateTime).isBefore(ewAnswerDateTime);\n\n    default:\n      return false;\n  }\n}\n\nfunction enableWhenMatchesStringAnswer(answerValueString, enableWhenAnswerString, operator) {\n  if (answerValueString === undefined || enableWhenAnswerString === undefined) {\n    return false;\n  }\n\n  const compareEquals = answerValueString.localeCompare(enableWhenAnswerString);\n\n  switch (operator) {\n    case OPERATOR_EQUALS:\n      return compareEquals === 0;\n\n    case OPERATOR_NOTEQUALS:\n      return compareEquals !== 0;\n\n    case OPERATOR_GREATEROREQUALS:\n      return compareEquals >= 0;\n\n    case OPERATOR_GREATERTHAN:\n      return compareEquals > 0;\n\n    case OPERATOR_LESSOREQUALS:\n      return compareEquals <= 0;\n\n    case OPERATOR_LESSTHAN:\n      return compareEquals < 0;\n\n    default:\n      return false;\n  }\n}\n\nfunction enableWhenMatchesCodeAnswer(answerCode, enableWhenCode, operator) {\n  if (answerCode === undefined || enableWhenCode === undefined) {\n    return false;\n  }\n\n  switch (operator) {\n    case OPERATOR_EQUALS:\n      return answerCode == enableWhenCode;\n\n    case OPERATOR_NOTEQUALS:\n      return answerCode != enableWhenCode;\n\n    case OPERATOR_GREATEROREQUALS:\n      return answerCode == enableWhenCode || false;\n\n    case OPERATOR_GREATERTHAN:\n      return false;\n\n    case OPERATOR_LESSOREQUALS:\n      return answerCode == enableWhenCode || false;\n\n    case OPERATOR_LESSTHAN:\n      return false;\n\n    default:\n      return false;\n  }\n}\n\nfunction enableWhenMatchesReferenceAnswer(answerReference, enableWhenReference, operator) {\n  if (answerReference === undefined || enableWhenReference === undefined) {\n    return false;\n  }\n\n  switch (operator) {\n    case OPERATOR_EQUALS:\n      return answerReference == enableWhenReference;\n\n    case OPERATOR_NOTEQUALS:\n      return answerReference != enableWhenReference;\n\n    case OPERATOR_GREATEROREQUALS:\n      return answerReference == enableWhenReference || false;\n\n    case OPERATOR_GREATERTHAN:\n      return false;\n\n    case OPERATOR_LESSOREQUALS:\n      return answerReference == enableWhenReference || false;\n\n    case OPERATOR_LESSTHAN:\n      return false;\n\n    default:\n      return false;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}