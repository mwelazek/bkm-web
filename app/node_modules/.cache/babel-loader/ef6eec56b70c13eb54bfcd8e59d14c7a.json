{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Dimension = void 0;\n/**\n * This class implements an object containing the vector of exponents for\n * a unit and its operations for addition, subtraction, and multiplication\n * with a scalar.\n *\n * This object should exist for each unit that can be expressed as a\n * vector of numbers.   This excludes arbitrary units, e.g., (10*23), and\n * units that are not numbers but are an expression based solely on numbers,\n * e.g., mol (mole) which is based on 10*23.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n */\n\nvar UC = require('./config.js');\n\nvar isInteger = require(\"is-integer\");\n\nclass Dimension {\n  /**\n   * Constructor.\n   *\n   * @param dimSetting an optional parameter that may be:\n   *  null, which means that the dimVec_ attribute for this object will be null; or\n   *  an array, which must be the length defined by Ucum.dimLen_, and\n   *    whose contents will be copied to this new object's vector; or\n   *  an integer, which must be between 0 and 1 less than the vector length\n   *    defined by Ucum.dimLen_.  This new object's vector will be\n   *    initialized to zero for all elements except the one whose index\n   *    matches the number passed in.  That element will be set to one.\n    * @throws an error if the dimSetting parameter does not meet the types\n   *  listed above.\n   *  An error will also be thrown if Ucum.dimLen_ has not been set yet,\n   *  i.e., is still zero.   Currently that won't happen, because the\n   *  value is set in the config.js file.  But further down the road\n   *  the setting will come from a definitions input file, so we check\n   *  here anyway.\n   *\n   */\n  constructor(dimSetting) {\n    if (UC.Ucum.dimLen_ === 0) {\n      throw new Error('Dimension.setDimensionLen must be called before ' + 'Dimension constructor');\n    }\n\n    if (dimSetting === undefined || dimSetting === null) {\n      this.assignZero();\n    } else if (dimSetting instanceof Array) {\n      if (dimSetting.length !== UC.Ucum.dimLen_) {\n        throw new Error('Parameter error, incorrect length of vector passed to ' + `Dimension constructor, vector = ${JSON.stringify(dimSetting)}`);\n      }\n\n      this.dimVec_ = [];\n\n      for (let d = 0; d < UC.Ucum.dimLen_; d++) this.dimVec_.push(dimSetting[d]);\n    } // In es6 this should be Number.isInteger(dimSetting).  But Babel\n    // doesn't transpile that correctly, so we need to use the isInteger\n    // module.  :0\n    else if (isInteger(dimSetting)) {\n      if (dimSetting < 0 || dimSetting >= UC.Ucum.dimLen_) {\n        throw new Error('Parameter error, invalid element number specified for ' + 'Dimension constructor');\n      }\n\n      this.assignZero();\n      this.dimVec_[dimSetting] = 1;\n    }\n  } // end constructor\n\n  /**\n   * Sets the element at the specified position to a specified value.  The\n   * default value is 1.  If the dimension vector is null when this is called\n   * a zero-filled vector is created and then the indicated position is set.\n   *\n   * @param indexPos the index of the element to be set\n   * @param value the value to assign to the specified element; optional,\n   *  default value is 1\n   * @throws an exception if the specified position is invalid, i.e., not a\n   *   number or is less than 0 or greater than Ucum.dimLen_\n   **/\n\n\n  setElementAt(indexPos, value) {\n    if (!isInteger(indexPos) || indexPos < 0 || indexPos >= UC.Ucum.dimLen_) {\n      throw new Error(`Dimension.setElementAt called with an invalid index ` + `position (${indexPos})`);\n    }\n\n    if (!this.dimVec_) {\n      this.assignZero();\n    }\n\n    if (value === undefined || value === null) value = 1;\n    this.dimVec_[indexPos] = value;\n  }\n  /**\n   * Gets the value of the element at the specified position\n   *\n   * @param indexPos the index of the element whose value is to be returned\n   * @return the value of the element at indexPos, or null if the dimension\n   *  vector is null\n   * @throws an exception if the specified position is invalid, i.e., not a\n   *   number or is less than 0 or greater than Ucum.dimLen_\n   **/\n\n\n  getElementAt(indexPos) {\n    if (!isInteger(indexPos) || indexPos < 0 || indexPos >= UC.Ucum.dimLen_) {\n      throw new Error(`Dimension.getElementAt called with an invalid index ` + `position (${indexPos})`);\n    }\n\n    let ret = null;\n    if (this.dimVec_) ret = this.dimVec_[indexPos];\n    return ret;\n  }\n  /**\n   * This returns the value of the property named by the parameter\n   * passed in.  Although we currently only have one property, dimVec_,\n   * that this will get, it's possible that we'll have additional\n   * properties.   If we don't this could just be replaced by a\n   * getVector function.\n   *\n   * @param propertyName name of the property to be returned, with\n   *        or without the trailing underscore.\n   * @return the requested property, if found for this Dimension\n   * @throws an error if the property is not found for this Dimension\n   */\n\n\n  getProperty(propertyName) {\n    let uProp = propertyName.charAt(propertyName.length - 1) === '_' ? propertyName : propertyName + '_';\n    return this[uProp];\n  } // end getProperty\n\n  /**\n   * Return a string that represents the dimension vector.  Returns null if\n   * the dimension vector is null.\n   *\n   * @return the string that represents the dimension vector.  The\n   *         values are enclosed in square brackets, each separated\n   *         by a comma and a space\n   **/\n\n\n  toString() {\n    let ret = null;\n    if (this.dimVec_) ret = '[' + this.dimVec_.join(', ') + ']';\n    return ret;\n  }\n  /**\n   * Adds the vector of the dimension object passed in to this\n   * dimension object's vector.  This object's vector is changed.\n   * If either dimension vector is null, no changes are made to this object.\n   *\n   *\n   * @param dim2 the dimension whose vector is to be added to this one\n   * @return this object\n   * @throws an exception if dim2 is not a Dimension object\n   **/\n\n\n  add(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw new Error(`Dimension.add called with an invalid parameter - ` + `${typeof dim2} instead of a Dimension object`);\n    }\n\n    if (this.dimVec_ && dim2.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++) this.dimVec_[i] += dim2.dimVec_[i];\n    }\n\n    return this;\n  }\n  /**\n   * Subtracts the vector of the dimension object passed in from this\n   * dimension object's vector.  This object's vector is changed.\n   * If either dimension vector is null, no changes are made to this object.\n   *\n   * @param dim2 the dimension whose vector is to be subtracted from this one\n   * @return this object\n   * @throws an exception if dim2 is not a Dimension object\n   **/\n\n\n  sub(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw new Error(`Dimension.sub called with an invalid parameter - ` + `${typeof dim2} instead of a Dimension object`);\n    }\n\n    if (this.dimVec_ && dim2.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++) this.dimVec_[i] -= dim2.dimVec_[i];\n    }\n\n    return this;\n  }\n  /**\n   * Inverts this dimension object's vector (by multiplying each element\n   * by negative 1).  This object's vector is changed - unless it is null,\n   * in which case it stays that way.\n   *\n   * @return this object\n   **/\n\n\n  minus() {\n    if (this.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++) this.dimVec_[i] = -this.dimVec_[i];\n    }\n\n    return this;\n  }\n  /**\n   * Multiplies this dimension object's vector with a scalar.  This is used\n   * when a unit is raised to a power.  This object's vector is changed unless\n   * the vector is null, in which case it stays that way.\n   *\n   * @param s the scalar to use\n   * @return this object\n   * @throws an exception if s is not a number\n   */\n\n\n  mul(s) {\n    if (!isInteger(s)) {\n      throw new Error(`Dimension.sub called with an invalid parameter - ` + `${typeof dim2} instead of a number`);\n    }\n\n    if (this.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++) this.dimVec_[i] *= s;\n    }\n\n    return this;\n  }\n  /**\n   * Tests for equality of this dimension object's vector and that of\n   * the dimension object passed in.  If the dimension vector for one of\n   * the objects is null, the dimension vector for the other object must\n   * also be null for the two to be equal.  (I know - duh.  still)\n   *\n   * @param dim2 the dimension object whose vector is to be compared to this one\n   * @return true if the two vectors are equal; false otherwise.\n   * @throws an exception if dim2 is not a Dimension object\n   */\n\n\n  equals(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw new Error(`Dimension.equals called with an invalid parameter - ` + `${typeof dim2} instead of a Dimension object`);\n    }\n\n    let isEqual = true;\n    let dimVec2 = dim2.dimVec_;\n\n    if (this.dimVec_ && dimVec2) {\n      for (let i = 0; isEqual && i < UC.Ucum.dimLen_; i++) isEqual = this.dimVec_[i] === dimVec2[i];\n    } else {\n      isEqual = this.dimVec_ === null && dimVec2 === null;\n    }\n\n    return isEqual;\n  }\n  /**\n   * Assigns the contents of the vector belonging to the dimension object\n   * passed in to this dimension's vector.  If this dimension vector is null\n   * and the other is not, this one will get the contents of the other.  If\n   * this dimension vector is not null but the one passed in is null, this\n   * one will be set to null.\n   *\n   * @param dim2 the dimension object with the vector whose contents are\n   *  to be assigned to this dimension's vector\n   * @return this object (not sure why)\n   * @throws an exception if dim2 is not a Dimension object\n   */\n\n\n  assignDim(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw new Error(`Dimension.assignDim called with an invalid parameter - ` + `${typeof dim2} instead of a Dimension object`);\n    }\n\n    if (dim2.dimVec_ === null) this.dimVec_ = null;else {\n      if (this.dimVec_ === null) {\n        this.dimVec_ = [];\n      }\n\n      for (let i = 0; i < UC.Ucum.dimLen_; i++) this.dimVec_[i] = dim2.dimVec_[i];\n    }\n    return this;\n  }\n  /**\n   * Sets all elements of this dimension object's vector to zero.\n   * If this object's vector is null, it is created as a zero-filled vector.\n   *\n   * @return this object (not sure why)\n   */\n\n\n  assignZero() {\n    if (this.dimVec_ === null || this.dimVec_ === undefined) this.dimVec_ = [];\n\n    for (let i = 0; i < UC.Ucum.dimLen_; i++) {\n      this.dimVec_.push(0);\n    }\n\n    return this;\n  }\n  /**\n   * Tests for a dimension vector set to all zeroes.\n   *\n   * @return true if exponents (elements) of this dimension's vector are all\n   * zero; false otherwise (including if the current vector is null).\n   *\n   */\n\n\n  isZero() {\n    let allZero = this.dimVec_ !== null;\n\n    if (this.dimVec_) {\n      for (let i = 0; allZero && i < UC.Ucum.dimLen_; i++) allZero = this.dimVec_[i] === 0;\n    }\n\n    return allZero;\n  }\n  /**\n   * Tests for a Dimension object with no dimension vector (dimVec_ is null).\n   *\n   * @return true the dimension vector is null; false if it is not\n   *\n   */\n\n\n  isNull() {\n    return this.dimVec_ === null;\n  }\n  /**\n   * Creates and returns a clone of this Dimension object\n   *\n   * @return the clone\n   */\n\n\n  clone() {\n    let that = new Dimension();\n    that.assignDim(this);\n    return that;\n  }\n\n} // end Dimension class\n\n\nexports.Dimension = Dimension;","map":null,"metadata":{},"sourceType":"script"}