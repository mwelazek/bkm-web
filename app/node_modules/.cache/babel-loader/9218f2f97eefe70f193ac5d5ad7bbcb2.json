{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { CheckBox } from '../checkbox';\nimport ValidationError from './../../molecules/form/validation-error';\nimport { Sublabel } from '../label/sublabel';\n\nvar CheckBoxGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(CheckBoxGroup, _React$Component);\n\n  var _super = _createSuper(CheckBoxGroup);\n\n  function CheckBoxGroup(props) {\n    var _this;\n\n    _classCallCheck(this, CheckBoxGroup);\n\n    _this = _super.call(this, props);\n\n    _this.validate = function (validated) {\n      if (_this.props.isRequired && validated && !_this.props.checkboxes.some(function (el) {\n        return el.checked === true;\n      })) {\n        return false;\n      } else if (_this.props.max && _this.props.checkboxes.filter(function (el) {\n        return el.checked === true;\n      }).length > _this.props.max) {\n        return false;\n      } else if (_this.props.min && validated && _this.props.checkboxes.filter(function (el) {\n        return el.checked === true;\n      }).length < _this.props.min) {\n        return false;\n      }\n\n      return true;\n    };\n\n    _this.notifyValidated = function () {\n      if (_this.props.onValidated) {\n        _this.props.onValidated(_this.state.valid);\n      }\n    };\n\n    _this.state = {\n      valid: true,\n      validated: false\n    };\n    return _this;\n  }\n\n  _createClass(CheckBoxGroup, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.checkboxes !== this.props.checkboxes) {\n        this.setState({\n          valid: this.validate(this.state.validated)\n        }, this.notifyValidated);\n      }\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField() {\n      var _this2 = this;\n\n      var valid = this.validate(true);\n      return new Promise(function (resolve) {\n        _this2.setState({\n          validated: true,\n          valid: valid\n        }, function () {\n          _this2.notifyValidated();\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return this.state.valid;\n    }\n  }, {\n    key: \"renderHelp\",\n    value: function renderHelp() {\n      if (this.props.helpElement) {\n        return this.props.helpElement;\n      }\n    }\n  }, {\n    key: \"renderLegend\",\n    value: function renderLegend() {\n      var _this$props = this.props,\n          legend = _this$props.legend,\n          legendClassName = _this$props.legendClassName,\n          isRequired = _this$props.isRequired,\n          requiredLabel = _this$props.requiredLabel,\n          optionalLabel = _this$props.optionalLabel,\n          showRequiredLabel = _this$props.showRequiredLabel,\n          showOptionalLabel = _this$props.showOptionalLabel,\n          helpButton = _this$props.helpButton,\n          subLabel = _this$props.subLabel;\n\n      if (!legend) {\n        return null;\n      }\n\n      return React.createElement(\"legend\", {\n        className: legendClassName\n      }, legend, isRequired && requiredLabel && showRequiredLabel ? React.createElement(\"em\", null, \" \", requiredLabel) : '', !isRequired && optionalLabel && showOptionalLabel ? React.createElement(\"em\", null, \" \", optionalLabel) : '', helpButton, subLabel && React.createElement(Sublabel, {\n        sublabelText: subLabel\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var validateOnExternalUpdate = this.props.validateOnExternalUpdate;\n      var checkboxes = this.props.checkboxes.map(function (el) {\n        return React.createElement(CheckBox, {\n          label: el.label,\n          labelSuffixDangerousHtml: el.labelSuffixDangerousHtml,\n          key: el.id,\n          id: \"\".concat(_this3.props.id, \"-\").concat(el.id),\n          checked: el.checked,\n          onChange: function onChange() {\n            return _this3.props.handleChange(el.id);\n          },\n          helpButton: el.hjelpetrigger,\n          disabled: el.disabled,\n          validateOnExternalUpdate: validateOnExternalUpdate,\n          checkboxTestId: \"\".concat(_this3.props.checkboxTestId, \"-\").concat(el.id),\n          isStyleBlue: _this3.props.isStyleBlue\n        });\n      });\n      var classes = classNames({\n        'mol_validation--active': !this.state.valid\n      }, this.props.className);\n      return React.createElement(\"div\", {\n        className: \"mol_validation \".concat(classes),\n        id: \"\".concat(this.props.id, \"-wrapper\")\n      }, React.createElement(ValidationError, {\n        isValid: this.state.valid,\n        error: this.props.errorMessage ? this.props.errorMessage : '',\n        testId: this.props.validationTestId\n      }), React.createElement(\"fieldset\", {\n        className: this.props.fieldsetClassName,\n        \"data-testid\": this.props.checkboxTestId\n      }, this.renderLegend(), this.renderHelp(), this.props.hasInnerWrapper ? React.createElement(\"div\", {\n        className: \"atom_checkboxgroup__innerwrap\"\n      }, checkboxes) : checkboxes));\n    }\n  }]);\n\n  return CheckBoxGroup;\n}(React.Component);\n\nexport { CheckBoxGroup as default };","map":null,"metadata":{},"sourceType":"module"}