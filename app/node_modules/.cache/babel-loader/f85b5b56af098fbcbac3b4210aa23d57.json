{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FhirSelect = FhirSelect;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactQuery = require(\"react-query\");\n\nvar _icons = require(\"@ant-design/icons\");\n\nvar _antd = require(\"antd\");\n\nvar _lodash = require(\"lodash\");\n\nvar _utils = require(\"../../helpers/utils\");\n\nvar _mls = require(\"../../mls\");\n\nvar _utils2 = require(\"./utils\");\n\nvar _excluded = [\"resourceType\", \"baseUrl\", \"transformOption\", \"placeholder\", \"filterPageSize\", \"extraQueryParams\", \"getFullOptionOnChange\"];\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2[\"default\"])(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar debouncedFn = (0, _lodash.debounce)(function (callback) {\n  return callback();\n}, 500);\n\nfunction FhirSelect(props) {\n  var _data$pages, _data$pages2;\n\n  var resourceType = props.resourceType,\n      baseUrl = props.baseUrl,\n      transformOption = props.transformOption,\n      placeholder = props.placeholder,\n      _props$filterPageSize = props.filterPageSize,\n      pageSize = _props$filterPageSize === void 0 ? 20 : _props$filterPageSize,\n      _props$extraQueryPara = props.extraQueryParams,\n      extraQueryParams = _props$extraQueryPara === void 0 ? {} : _props$extraQueryPara,\n      getFullOptionOnChange = props.getFullOptionOnChange,\n      restProps = (0, _objectWithoutProperties2[\"default\"])(props, _excluded);\n  var defaultStartPage = 1;\n\n  var _useState = (0, _react.useState)(defaultStartPage),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      page = _useState2[0],\n      setPage = _useState2[1];\n\n  var _React$useState = _react[\"default\"].useState(),\n      _React$useState2 = (0, _slicedToArray2[\"default\"])(_React$useState, 2),\n      searchValue = _React$useState2[0],\n      setSearchValue = _React$useState2[1];\n\n  var _React$useState3 = _react[\"default\"].useState(),\n      _React$useState4 = (0, _slicedToArray2[\"default\"])(_React$useState3, 2),\n      debouncedSearchValue = _React$useState4[0],\n      setDebouncedSearchValue = _React$useState4[1];\n\n  var _useTranslation = (0, _mls.useTranslation)(),\n      t = _useTranslation.t;\n\n  (0, _react.useEffect)(function () {\n    debouncedFn(function () {\n      setDebouncedSearchValue(searchValue);\n      setPage(defaultStartPage);\n    });\n  }, [searchValue]);\n\n  var _useInfiniteQuery = (0, _reactQuery.useInfiniteQuery)({\n    queryKey: [resourceType, debouncedSearchValue, page, pageSize],\n    queryFn: function () {\n      var _queryFn = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee(_ref) {\n        var _ref$pageParam, pageParam, response;\n\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref$pageParam = _ref.pageParam, pageParam = _ref$pageParam === void 0 ? page : _ref$pageParam;\n                _context.next = 3;\n                return (0, _utils2.loadResources)(baseUrl, resourceType, {\n                  page: pageParam,\n                  pageSize: pageSize,\n                  search: debouncedSearchValue !== null && debouncedSearchValue !== void 0 ? debouncedSearchValue : null\n                }, extraQueryParams);\n\n              case 3:\n                response = _context.sent;\n                return _context.abrupt(\"return\", response);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function queryFn(_x) {\n        return _queryFn.apply(this, arguments);\n      }\n\n      return queryFn;\n    }(),\n    getNextPageParam: function getNextPageParam(lastGroup, allGroups) {\n      var totalFetched = (0, _utils2.getTotalRecordsInBundles)(allGroups);\n      var total = lastGroup.total;\n\n      if (totalFetched < total) {\n        return page + 1;\n      } else {\n        return false;\n      }\n    },\n    getPreviousPageParam: function getPreviousPageParam() {\n      if (page === 1) {\n        return undefined;\n      } else {\n        return page - 1;\n      }\n    },\n    refetchOnWindowFocus: false\n  }),\n      data = _useInfiniteQuery.data,\n      fetchNextPage = _useInfiniteQuery.fetchNextPage,\n      hasNextPage = _useInfiniteQuery.hasNextPage,\n      isLoading = _useInfiniteQuery.isLoading,\n      isFetchingNextPage = _useInfiniteQuery.isFetchingNextPage,\n      isFetching = _useInfiniteQuery.isFetching,\n      error = _useInfiniteQuery.error;\n\n  var changeHandler = function changeHandler(value, fullOption) {\n    var _props$onChange;\n\n    var saneFullOption = Array.isArray(fullOption) ? fullOption.slice() : fullOption;\n    (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, value, saneFullOption);\n    getFullOptionOnChange === null || getFullOptionOnChange === void 0 ? void 0 : getFullOptionOnChange(saneFullOption);\n  };\n\n  var searchHandler = function searchHandler(value) {\n    setSearchValue(value);\n  };\n\n  var options = ((_data$pages = data === null || data === void 0 ? void 0 : data.pages) !== null && _data$pages !== void 0 ? _data$pages : []).flatMap(function (resourceBundle) {\n    var resources = (0, _utils.getResourcesFromBundle)(resourceBundle);\n    var allOptions = resources.map(transformOption);\n    var saneOptions = allOptions.filter(function (option) {\n      return option !== undefined;\n    });\n    return saneOptions;\n  });\n  var pages = (_data$pages2 = data === null || data === void 0 ? void 0 : data.pages) !== null && _data$pages2 !== void 0 ? _data$pages2 : [];\n  var recordsFetchedNum = (0, _utils2.getTotalRecordsInBundles)(pages);\n  var totalPossibleRecords = (0, _utils2.getTotalRecordsOnApi)(pages);\n  var remainingRecords = totalPossibleRecords - recordsFetchedNum;\n\n  var propsToSelect = _objectSpread(_objectSpread({\n    style: {\n      minWidth: '200px'\n    }\n  }, restProps), {}, {\n    onChange: changeHandler,\n    loading: isLoading,\n    notFoundContent: isLoading ? _react[\"default\"].createElement(_antd.Spin, {\n      size: \"small\"\n    }) : _react[\"default\"].createElement(_antd.Empty, {\n      description: t('No data')\n    }),\n    filterOption: false,\n    options: options,\n    searchValue: searchValue,\n    dropdownRender: function dropdownRender(menu) {\n      return _react[\"default\"].createElement(_react[\"default\"].Fragment, null, !error && data && menu, _react[\"default\"].createElement(_antd.Divider, {\n        style: {\n          margin: '8px 0'\n        }\n      }), error ? _react[\"default\"].createElement(_antd.Alert, {\n        message: t('Unable to load dropdown options.'),\n        type: \"error\",\n        showIcon: true\n      }) : _react[\"default\"].createElement(_antd.Space, {\n        direction: \"vertical\"\n      }, data && _react[\"default\"].createElement(\"small\", {\n        style: {\n          padding: '4px 16px'\n        }\n      }, t('Showing {{recordsFetchedNum}}; {{remainingRecords}} more records.', {\n        recordsFetchedNum: recordsFetchedNum,\n        remainingRecords: remainingRecords\n      })), _react[\"default\"].createElement(_antd.Button, {\n        type: \"text\",\n        icon: _react[\"default\"].createElement(_icons.VerticalAlignBottomOutlined, null),\n        disabled: !hasNextPage || isFetchingNextPage || isFetching,\n        loading: isFetchingNextPage,\n        onClick: function onClick() {\n          return fetchNextPage();\n        }\n      }, isFetchingNextPage ? t('Fetching next page') : t('Load more options'))));\n    }\n  });\n\n  if (props.showSearch) {\n    propsToSelect.onSearch = searchHandler;\n  }\n\n  return _react[\"default\"].createElement(_antd.Select, propsToSelect);\n}","map":null,"metadata":{},"sourceType":"script"}