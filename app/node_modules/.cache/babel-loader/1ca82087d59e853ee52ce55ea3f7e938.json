{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst react_redux_1 = require(\"react-redux\");\n\nconst newValue_1 = require(\"../../../actions/newValue\");\n\nconst extension_1 = require(\"../../../util/extension\");\n\nconst index_1 = require(\"../../../util/index\");\n\nconst map_props_1 = require(\"../../../util/map-props\");\n\nconst with_common_functions_1 = __importDefault(require(\"../../with-common-functions\"));\n\nconst label_1 = __importDefault(require(\"../label\"));\n\nconst sublabel_1 = __importDefault(require(\"../sublabel\"));\n\nconst textview_1 = __importDefault(require(\"../textview\"));\n\nconst attachmenthtml_1 = __importDefault(require(\"./attachmenthtml\"));\n\nclass AttachmentComponent extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onUpload = (files, cb) => {\n      const {\n        uploadAttachment,\n        path,\n        item,\n        onAnswerChange\n      } = this.props;\n\n      if (uploadAttachment) {\n        for (const file of files) {\n          const onSuccess = (uploadedFile, attachment) => {\n            var _a;\n\n            if (this.props.dispatch && attachment) {\n              (_a = this.props.dispatch(newValue_1.newAttachmentAsync(this.props.path, attachment, this.props.item, index_1.isRepeat(this.props.item)))) === null || _a === void 0 ? void 0 : _a.then(newState => onAnswerChange(newState, path, item, {\n                valueAttachment: attachment\n              }));\n            }\n\n            cb(true, null, uploadedFile);\n          };\n\n          const onError = errorMessage => {\n            cb(false, errorMessage);\n          };\n\n          uploadAttachment([file], onSuccess, onError);\n        }\n      }\n    };\n\n    this.onDelete = (fileId, cb) => {\n      const {\n        onDeleteAttachment,\n        path,\n        item,\n        onAnswerChange\n      } = this.props;\n\n      if (onDeleteAttachment) {\n        const onSuccess = () => {\n          var _a;\n\n          if (this.props.dispatch) {\n            const attachment = {\n              url: fileId\n            };\n            (_a = this.props.dispatch(newValue_1.removeAttachmentAsync(this.props.path, attachment, this.props.item))) === null || _a === void 0 ? void 0 : _a.then(newState => onAnswerChange(newState, path, item, {\n              valueAttachment: attachment\n            }));\n          }\n\n          cb(true, null);\n        };\n\n        const onError = errormessage => {\n          cb(false, errormessage);\n        };\n\n        onDeleteAttachment(fileId, onSuccess, onError);\n      }\n    };\n\n    this.getButtonText = () => {\n      let buttonText = '';\n      const {\n        resources\n      } = this.props;\n\n      if (resources && resources.uploadButtonText) {\n        buttonText = resources.uploadButtonText;\n      }\n\n      return buttonText;\n    };\n\n    this.getAttachment = () => {\n      const {\n        answer\n      } = this.props;\n\n      if (Array.isArray(answer)) {\n        return answer.map(v => {\n          return {\n            id: v.valueAttachment && v.valueAttachment.url ? v.valueAttachment.url : -1,\n            name: v.valueAttachment && v.valueAttachment.title ? v.valueAttachment.title : ''\n          };\n        });\n      } else {\n        if (answer && answer.valueAttachment && answer.valueAttachment.url) {\n          return [{\n            id: answer.valueAttachment.url,\n            name: answer.valueAttachment.title ? answer.valueAttachment.title : ''\n          }];\n        }\n      }\n\n      return [];\n    };\n\n    this.getPdfValue = () => {\n      const attachments = this.getAttachment();\n\n      if (attachments) {\n        return attachments.map(v => v.name).join(', ');\n      } else if (this.props.resources) {\n        return this.props.resources.ikkeBesvart;\n      }\n\n      return '';\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    var _a;\n\n    const responseItemHasChanged = this.props.responseItem !== nextProps.responseItem;\n    const helpItemHasChanged = this.props.isHelpOpen !== nextProps.isHelpOpen;\n    const resourcesHasChanged = JSON.stringify(this.props.resources) !== JSON.stringify(nextProps.resources);\n    const attachmentErrorMessageHasChanged = this.props.attachmentErrorMessage !== nextProps.attachmentErrorMessage;\n    const repeats = (_a = this.props.item.repeats) !== null && _a !== void 0 ? _a : false;\n    return responseItemHasChanged || helpItemHasChanged || resourcesHasChanged || attachmentErrorMessageHasChanged || repeats;\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      pdf,\n      id,\n      item,\n      resources,\n      onOpenAttachment,\n      onRenderMarkdown\n    } = _a,\n          other = __rest(_a, [\"pdf\", \"id\", \"item\", \"resources\", \"onOpenAttachment\", \"onRenderMarkdown\"]);\n\n    const subLabelText = index_1.getSublabelText(item, onRenderMarkdown);\n\n    if (pdf || index_1.isReadOnly(item)) {\n      return React.createElement(textview_1.default, {\n        id: id,\n        item: item,\n        value: this.getPdfValue(),\n        onRenderMarkdown: onRenderMarkdown\n      }, this.props.children);\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(attachmenthtml_1.default, Object.assign({\n        onUpload: this.onUpload,\n        onDelete: this.onDelete,\n        onOpen: onOpenAttachment,\n        id: index_1.getId(id),\n        label: React.createElement(label_1.default, {\n          item: item,\n          onRenderMarkdown: onRenderMarkdown\n        }),\n        subLabel: subLabelText ? React.createElement(sublabel_1.default, {\n          subLabelText: subLabelText\n        }) : undefined,\n        uploadButtonText: this.getButtonText(),\n        resources: resources,\n        isRequired: index_1.isRequired(item),\n        multiple: index_1.isRepeat(item),\n        errorText: extension_1.getValidationTextExtension(item),\n        uploadedFiles: this.getAttachment(),\n        onRequestAttachmentLink: this.props.onRequestAttachmentLink,\n        helpButton: this.props.renderHelpButton(),\n        helpElement: this.props.renderHelpElement(),\n        maxFiles: extension_1.getMaxOccursExtensionValue(item),\n        minFiles: extension_1.getMinOccursExtensionValue(item),\n        attachmentMaxFileSize: this.props.attachmentMaxFileSize,\n        attachmentValidTypes: this.props.attachmentValidTypes,\n        item: item,\n        attachmentErrorMessage: this.props.attachmentErrorMessage\n      }, other)));\n    }\n  }\n\n}\n\nconst withCommonFunctionsComponent = with_common_functions_1.default(AttachmentComponent);\nconst connectedComponent = react_redux_1.connect(map_props_1.mapStateToProps, map_props_1.mapDispatchToProps, map_props_1.mergeProps)(withCommonFunctionsComponent);\nexports.default = connectedComponent;","map":null,"metadata":{},"sourceType":"script"}