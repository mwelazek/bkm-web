{"ast":null,"code":"/** Gets the Active key and Active paths for menu based on path from routes\n *\n * @param routes - The routes to get search the active route from\n * @param path - an array of menu location path\n */\nexport function getActivePath(path, routes) {\n  let activePaths = [];\n  let activeKey;\n  let openKey;\n\n  function mapPaths(menu) {\n    // Check for matching url\n    if (menu.url && path.includes(menu.url)) activeKey = menu.key; // Exact match\n\n    if (path === menu.url) activeKey = menu.key; // Check if the menu has children\n\n    if (menu.children) {\n      // Recursively call mapMenus on each child\n      for (const child of menu.children) {\n        // Exact Match\n        if (path === child.url) {\n          openKey = menu.key;\n          activeKey = child.key;\n        }\n\n        mapPaths(child);\n\n        if (openKey) {\n          break;\n        }\n      }\n\n      if (openKey) {\n        activePaths.push(menu.key);\n      }\n    }\n  }\n\n  for (const route of routes) {\n    if (activeKey === undefined) {\n      mapPaths(route);\n    }\n\n    if (activeKey) break;\n  }\n\n  activePaths = activePaths.reverse();\n  return {\n    activeKey,\n    activePaths\n  };\n}","map":{"version":3,"sources":["/home/teboho/opensrp-fhir-web-source/fhir-web/app/src/components/page/Sidebar/utils.tsx"],"names":["getActivePath","path","routes","activePaths","activeKey","openKey","mapPaths","menu","url","includes","key","children","child","push","route","undefined","reverse"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASA,aAAT,CAAuBC,IAAvB,EAAqCC,MAArC,EAAsD;AAC3D,MAAIC,WAAqB,GAAG,EAA5B;AACA,MAAIC,SAAJ;AACA,MAAIC,OAAJ;;AAEA,WAASC,QAAT,CAAkBC,IAAlB,EAA+B;AAC7B;AACA,QAAIA,IAAI,CAACC,GAAL,IAAYP,IAAI,CAACQ,QAAL,CAAcF,IAAI,CAACC,GAAnB,CAAhB,EAAyCJ,SAAS,GAAGG,IAAI,CAACG,GAAjB,CAFZ,CAG7B;;AACA,QAAIT,IAAI,KAAKM,IAAI,CAACC,GAAlB,EAAuBJ,SAAS,GAAGG,IAAI,CAACG,GAAjB,CAJM,CAK7B;;AACA,QAAIH,IAAI,CAACI,QAAT,EAAmB;AACjB;AACA,WAAK,MAAMC,KAAX,IAAoBL,IAAI,CAACI,QAAzB,EAAmC;AACjC;AACA,YAAIV,IAAI,KAAKW,KAAK,CAACJ,GAAnB,EAAwB;AACtBH,UAAAA,OAAO,GAAGE,IAAI,CAACG,GAAf;AACAN,UAAAA,SAAS,GAAGQ,KAAK,CAACF,GAAlB;AACD;;AACDJ,QAAAA,QAAQ,CAACM,KAAD,CAAR;;AACA,YAAIP,OAAJ,EAAa;AACX;AACD;AACF;;AACD,UAAIA,OAAJ,EAAa;AACXF,QAAAA,WAAW,CAACU,IAAZ,CAAiBN,IAAI,CAACG,GAAtB;AACD;AACF;AACF;;AAED,OAAK,MAAMI,KAAX,IAAoBZ,MAApB,EAA4B;AAC1B,QAAIE,SAAS,KAAKW,SAAlB,EAA6B;AAC3BT,MAAAA,QAAQ,CAACQ,KAAD,CAAR;AACD;;AACD,QAAIV,SAAJ,EAAe;AAChB;;AAEDD,EAAAA,WAAW,GAAGA,WAAW,CAACa,OAAZ,EAAd;AAEA,SAAO;AACLZ,IAAAA,SADK;AAELD,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { Route } from '../../../routes';\n\n/** Gets the Active key and Active paths for menu based on path from routes\n *\n * @param routes - The routes to get search the active route from\n * @param path - an array of menu location path\n */\n\nexport function getActivePath(path: string, routes: Route[]) {\n  let activePaths: string[] = [];\n  let activeKey: string | undefined;\n  let openKey: string | undefined;\n\n  function mapPaths(menu: Route) {\n    // Check for matching url\n    if (menu.url && path.includes(menu.url)) activeKey = menu.key;\n    // Exact match\n    if (path === menu.url) activeKey = menu.key;\n    // Check if the menu has children\n    if (menu.children) {\n      // Recursively call mapMenus on each child\n      for (const child of menu.children) {\n        // Exact Match\n        if (path === child.url) {\n          openKey = menu.key;\n          activeKey = child.key;\n        }\n        mapPaths(child);\n        if (openKey) {\n          break;\n        }\n      }\n      if (openKey) {\n        activePaths.push(menu.key);\n      }\n    }\n  }\n\n  for (const route of routes) {\n    if (activeKey === undefined) {\n      mapPaths(route);\n    }\n    if (activeKey) break;\n  }\n\n  activePaths = activePaths.reverse();\n\n  return {\n    activeKey,\n    activePaths,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}