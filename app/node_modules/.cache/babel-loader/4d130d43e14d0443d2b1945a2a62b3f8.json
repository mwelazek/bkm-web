{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport classNames from 'classnames';\nimport RcSlider from 'rc-slider';\nimport React from 'react';\nimport warning from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport SliderTooltip from './SliderTooltip';\nimport useStyle from './style';\n\nconst defaultFormatter = val => typeof val === 'number' ? val.toString() : '';\n\nconst Slider = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    range,\n    className,\n    rootClassName,\n    // Deprecated Props\n    tooltipPrefixCls: legacyTooltipPrefixCls,\n    tipFormatter: legacyTipFormatter,\n    tooltipVisible: legacyTooltipVisible,\n    getTooltipPopupContainer: legacyGetTooltipPopupContainer,\n    tooltipPlacement: legacyTooltipPlacement\n  } = props,\n        restProps = __rest(props, [\"prefixCls\", \"range\", \"className\", \"rootClassName\", \"tooltipPrefixCls\", \"tipFormatter\", \"tooltipVisible\", \"getTooltipPopupContainer\", \"tooltipPlacement\"]);\n\n  const {\n    getPrefixCls,\n    direction,\n    getPopupContainer\n  } = React.useContext(ConfigContext);\n  const [opens, setOpens] = React.useState({});\n\n  const toggleTooltipOpen = (index, open) => {\n    setOpens(prev => Object.assign(Object.assign({}, prev), {\n      [index]: open\n    }));\n  };\n\n  const getTooltipPlacement = (placement, vertical) => {\n    if (placement) {\n      return placement;\n    }\n\n    if (!vertical) {\n      return 'top';\n    }\n\n    return direction === 'rtl' ? 'left' : 'right';\n  };\n\n  const prefixCls = getPrefixCls('slider', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const cls = classNames(className, rootClassName, {\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, hashId); // make reverse default on rtl direction\n\n  if (direction === 'rtl' && !restProps.vertical) {\n    restProps.reverse = !restProps.reverse;\n  } // Range config\n\n\n  const [mergedRange, draggableTrack] = React.useMemo(() => {\n    if (!range) {\n      return [false];\n    }\n\n    return typeof range === 'object' ? [true, range.draggableTrack] : [true, false];\n  }, [range]); // Warning for deprecated usage\n\n  if (process.env.NODE_ENV !== 'production') {\n    [['tooltipPrefixCls', 'prefixCls'], ['getTooltipPopupContainer', 'getPopupContainer'], ['tipFormatter', 'formatter'], ['tooltipPlacement', 'placement'], ['tooltipVisible', 'open']].forEach(_ref => {\n      let [deprecatedName, newName] = _ref;\n      process.env.NODE_ENV !== \"production\" ? warning(!(deprecatedName in props), 'Slider', `\\`${deprecatedName}\\` is deprecated, please use \\`tooltip.${newName}\\` instead.`) : void 0;\n    });\n  }\n\n  const handleRender = (node, info) => {\n    var _a;\n\n    const {\n      index,\n      dragging\n    } = info;\n    const {\n      tooltip = {},\n      vertical\n    } = props;\n    const tooltipProps = Object.assign({}, tooltip);\n    const {\n      open: tooltipOpen,\n      placement: tooltipPlacement,\n      getPopupContainer: getTooltipPopupContainer,\n      prefixCls: customizeTooltipPrefixCls,\n      formatter: tipFormatter\n    } = tooltipProps;\n    let mergedTipFormatter;\n\n    if (tipFormatter || tipFormatter === null) {\n      mergedTipFormatter = tipFormatter;\n    } else if (legacyTipFormatter || legacyTipFormatter === null) {\n      mergedTipFormatter = legacyTipFormatter;\n    } else {\n      mergedTipFormatter = defaultFormatter;\n    }\n\n    const isTipFormatter = mergedTipFormatter ? opens[index] || dragging : false;\n    const open = (_a = tooltipOpen !== null && tooltipOpen !== void 0 ? tooltipOpen : legacyTooltipVisible) !== null && _a !== void 0 ? _a : tooltipOpen === undefined && isTipFormatter;\n    const passedProps = Object.assign(Object.assign({}, node.props), {\n      onMouseEnter: () => toggleTooltipOpen(index, true),\n      onMouseLeave: () => toggleTooltipOpen(index, false)\n    });\n    const tooltipPrefixCls = getPrefixCls('tooltip', customizeTooltipPrefixCls !== null && customizeTooltipPrefixCls !== void 0 ? customizeTooltipPrefixCls : legacyTooltipPrefixCls);\n    return /*#__PURE__*/React.createElement(SliderTooltip, {\n      prefixCls: tooltipPrefixCls,\n      title: mergedTipFormatter ? mergedTipFormatter(info.value) : '',\n      open: open,\n      placement: getTooltipPlacement(tooltipPlacement !== null && tooltipPlacement !== void 0 ? tooltipPlacement : legacyTooltipPlacement, vertical),\n      key: index,\n      overlayClassName: `${prefixCls}-tooltip`,\n      getPopupContainer: getTooltipPopupContainer || legacyGetTooltipPopupContainer || getPopupContainer\n    }, /*#__PURE__*/React.cloneElement(node, passedProps));\n  };\n\n  return wrapSSR( /*#__PURE__*/React.createElement(RcSlider, Object.assign({}, restProps, {\n    step: restProps.step,\n    range: mergedRange,\n    draggableTrack: draggableTrack,\n    className: cls,\n    ref: ref,\n    prefixCls: prefixCls,\n    handleRender: handleRender\n  })));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Slider.displayName = 'Slider';\n}\n\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}