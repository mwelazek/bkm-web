{"ast":null,"code":"import tabbable from 'tabbable';\n/**\n * Goes through an HTML element, and returns all its tabable elements with their current tabindex attribute\n * @param element: container which tabbbale goes through\n */\n\nexport const setTabIndex = element => {\n  const newPrevTabIndexes = [];\n  const updatedTabbableElements = tabbable(element);\n  updatedTabbableElements.forEach(el => {\n    if (el.hasAttribute('tabindex')) {\n      newPrevTabIndexes.push(el.tabIndex);\n    } else {\n      newPrevTabIndexes.push(null);\n    }\n\n    el.tabIndex = -1;\n  });\n  return {\n    tabbableElements: updatedTabbableElements,\n    previousTabIndexes: newPrevTabIndexes\n  };\n};\n/**\n * Resets tabIndex to its previous value so the expanded content is reachable again\n * @param tabbableElements: The array of tabbable Elements to reset\n * @param previousTabIndexes: The previous tabindex values to set back\n */\n\nexport const resetTabIndex = (tabbableElements, previousTabIndexes) => {\n  const updatedTabbableElements = tabbableElements;\n\n  if (!tabbableElements || tabbableElements.length < 1) {\n    return [];\n  }\n\n  updatedTabbableElements.forEach((el, i) => {\n    const currentTabIndex = previousTabIndexes[i];\n\n    if (currentTabIndex !== null) {\n      el.tabIndex = currentTabIndex;\n    } else {\n      el.removeAttribute('tabindex');\n    }\n  });\n  return updatedTabbableElements;\n};","map":null,"metadata":{},"sourceType":"module"}