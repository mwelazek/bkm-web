{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar moment_1 = __importDefault(require(\"moment\"));\n\nvar react_redux_1 = require(\"react-redux\");\n\nvar date_core_1 = require(\"@helsenorge/toolkit/components/molecules/time-input/date-core\");\n\nvar languages_1 = require(\"@helsenorge/core-utils/constants/languages\");\n\nvar newValue_1 = require(\"../../../actions/newValue\");\n\nvar extensions_1 = __importDefault(require(\"../../../constants/extensions\"));\n\nvar itemcontrol_1 = __importDefault(require(\"../../../constants/itemcontrol\"));\n\nvar extension_1 = require(\"../../../util/extension\");\n\nvar fhirpathHelper_1 = require(\"../../../util/fhirpathHelper\");\n\nvar index_1 = require(\"../../../util/index\");\n\nvar map_props_1 = require(\"../../../util/map-props\");\n\nvar with_common_functions_1 = __importDefault(require(\"../../with-common-functions\"));\n\nvar label_1 = __importDefault(require(\"../label\"));\n\nvar sublabel_1 = __importDefault(require(\"../sublabel\"));\n\nvar date_day_input_1 = require(\"./date-day-input\");\n\nvar date_month_input_1 = require(\"./date-month-input\");\n\nvar date_year_input_1 = require(\"./date-year-input\");\n\nvar DateComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(DateComponent, _React$Component);\n\n  var _super = _createSuper(DateComponent);\n\n  function DateComponent(props) {\n    var _this;\n\n    _classCallCheck(this, DateComponent);\n\n    _this = _super.call(this, props);\n\n    _this.onDateValueChange = function (newValue) {\n      var _a;\n\n      var _this$props = _this.props,\n          dispatch = _this$props.dispatch,\n          promptLoginMessage = _this$props.promptLoginMessage,\n          path = _this$props.path,\n          item = _this$props.item,\n          answer = _this$props.answer,\n          onAnswerChange = _this$props.onAnswerChange;\n      var existingAnswer = (answer === null || answer === void 0 ? void 0 : answer.valueDate) || '';\n\n      if (dispatch && newValue !== existingAnswer) {\n        (_a = dispatch(newValue_1.newDateValueAsync(_this.props.path, newValue, _this.props.item))) === null || _a === void 0 ? void 0 : _a.then(function (newState) {\n          return onAnswerChange(newState, path, item, {\n            valueDate: newValue\n          });\n        });\n\n        if (promptLoginMessage) {\n          promptLoginMessage();\n        }\n      }\n    };\n\n    _this.getLocaleFromLanguage = function () {\n      var _a;\n\n      if (((_a = _this.props.language) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'en-gb') {\n        return languages_1.LanguageLocales.ENGLISH;\n      }\n\n      return languages_1.LanguageLocales.NORWEGIAN;\n    };\n\n    _this.datepicker = React.createRef();\n    return _this;\n  }\n\n  _createClass(DateComponent, [{\n    key: \"getStringValue\",\n    value: function getStringValue() {\n      var answer = this.props.answer;\n\n      if (answer && answer.valueDate) {\n        return answer.valueDate;\n      }\n\n      if (answer && answer.valueDateTime) {\n        return answer.valueDateTime;\n      }\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var _this$props2 = this.props,\n          item = _this$props2.item,\n          answer = _this$props2.answer;\n\n      if (answer && answer.valueDate) {\n        return date_core_1.parseDate(String(answer.valueDate));\n      }\n\n      if (answer && answer.valueDateTime) {\n        return date_core_1.parseDate(String(answer.valueDateTime));\n      }\n\n      if (!item || !item.initial || item.initial.length === 0) {\n        return undefined;\n      }\n\n      if (!item.initial[0].valueDate && !item.initial[0].valueDateTime) {\n        return undefined;\n      }\n\n      if (item.initial[0].valueDate) {\n        return date_core_1.parseDate(String(item.initial[0].valueDate));\n      }\n\n      return date_core_1.parseDate(String(item.initial[0].valueDateTime));\n    }\n  }, {\n    key: \"getMaxDate\",\n    value: function getMaxDate() {\n      var maxDate = extension_1.getExtension(extensions_1.default.DATE_MAX_VALUE_URL, this.props.item);\n\n      if (maxDate && maxDate.valueString) {\n        var fhirPathExpression = fhirpathHelper_1.evaluateFhirpathExpressionToGetDate(this.props.item, maxDate.valueString);\n        return fhirPathExpression ? moment_1.default(fhirPathExpression) : undefined;\n      }\n\n      var maxDateWithExtension = this.getMaxDateWithExtension();\n      return maxDateWithExtension ? moment_1.default(maxDateWithExtension) : undefined;\n    }\n  }, {\n    key: \"getMaxDateWithExtension\",\n    value: function getMaxDateWithExtension() {\n      var maxDate = extension_1.getExtension(extensions_1.default.MAX_VALUE_URL, this.props.item);\n\n      if (maxDate && maxDate.valueDate) {\n        return date_core_1.parseDate(String(maxDate.valueDate));\n      } else if (maxDate && maxDate.valueDateTime) {\n        return date_core_1.parseDate(String(maxDate.valueDateTime));\n      } else if (maxDate && maxDate.valueInstant) {\n        return date_core_1.parseDate(String(maxDate.valueInstant));\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"getMinDate\",\n    value: function getMinDate() {\n      var minDate = extension_1.getExtension(extensions_1.default.DATE_MIN_VALUE_URL, this.props.item);\n\n      if (minDate && minDate.valueString) {\n        var fhirPathExpression = fhirpathHelper_1.evaluateFhirpathExpressionToGetDate(this.props.item, minDate.valueString);\n        return fhirPathExpression ? moment_1.default(fhirPathExpression) : undefined;\n      }\n\n      var minDateWithExtension = this.getMinDateWithExtension();\n      return minDateWithExtension ? moment_1.default(minDateWithExtension) : undefined;\n    }\n  }, {\n    key: \"getMinDateWithExtension\",\n    value: function getMinDateWithExtension() {\n      var minDate = extension_1.getExtension(extensions_1.default.MIN_VALUE_URL, this.props.item);\n\n      if (minDate && minDate.valueDate) {\n        return date_core_1.parseDate(String(minDate.valueDate));\n      } else if (minDate && minDate.valueDateTime) {\n        return date_core_1.parseDate(String(minDate.valueDateTime));\n      } else if (minDate && minDate.valueInstant) {\n        return date_core_1.parseDate(String(minDate.valueInstant));\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      var _a;\n\n      var responseItemHasChanged = this.props.responseItem !== nextProps.responseItem;\n      var helpItemHasChanged = this.props.isHelpOpen !== nextProps.isHelpOpen;\n      var resourcesHasChanged = JSON.stringify(this.props.resources) !== JSON.stringify(nextProps.resources);\n      var repeats = (_a = this.props.item.repeats) !== null && _a !== void 0 ? _a : false;\n      return responseItemHasChanged || helpItemHasChanged || resourcesHasChanged || repeats;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var date = this.getValue();\n      var subLabelText = index_1.getSublabelText(this.props.item, this.props.onRenderMarkdown);\n      var itemControls = extension_1.getItemControlExtensionValue(this.props.item);\n      var labelEl = React.createElement(label_1.default, {\n        item: this.props.item,\n        onRenderMarkdown: this.props.onRenderMarkdown\n      });\n      var subLabelEl = subLabelText ? React.createElement(sublabel_1.default, {\n        subLabelText: subLabelText\n      }) : undefined;\n      var element = undefined;\n\n      if (itemControls && itemControls.some(function (itemControl) {\n        return itemControl.code === itemcontrol_1.default.YEAR;\n      })) {\n        element = React.createElement(date_year_input_1.DateYearInput, Object.assign({\n          id: this.props.id,\n          pdf: this.props.pdf,\n          resources: this.props.resources,\n          label: labelEl,\n          subLabel: subLabelEl,\n          helpButton: this.props.renderHelpButton(),\n          helpElement: this.props.renderHelpElement(),\n          onDateValueChange: this.onDateValueChange,\n          className: this.props.className,\n          yearValue: date ? date.getFullYear() : undefined,\n          maxDate: this.getMaxDate(),\n          minDate: this.getMinDate()\n        }, this.props));\n      } else if (itemControls && itemControls.some(function (itemControl) {\n        return itemControl.code === itemcontrol_1.default.YEARMONTH;\n      })) {\n        var stringDate = this.getStringValue();\n        element = React.createElement(date_month_input_1.DateYearMonthInput, Object.assign({\n          id: this.props.id,\n          resources: this.props.resources,\n          label: labelEl,\n          locale: this.getLocaleFromLanguage(),\n          subLabel: subLabelEl,\n          helpButton: this.props.renderHelpButton(),\n          helpElement: this.props.renderHelpElement(),\n          onDateValueChange: this.onDateValueChange,\n          className: this.props.className,\n          yearMonthValue: stringDate,\n          maxDate: this.getMaxDate(),\n          minDate: this.getMinDate()\n        }, this.props));\n      } else {\n        element = React.createElement(date_day_input_1.DateDayInput, Object.assign({\n          id: this.props.id,\n          resources: this.props.resources,\n          locale: this.getLocaleFromLanguage(),\n          label: labelEl,\n          subLabel: subLabelEl,\n          datepickerRef: this.datepicker,\n          helpButton: this.props.renderHelpButton(),\n          helpElement: this.props.renderHelpElement(),\n          onDateValueChange: this.onDateValueChange,\n          validationErrorRenderer: this.props.validationErrorRenderer,\n          className: this.props.className,\n          dateValue: date,\n          maxDate: this.getMaxDate(),\n          minDate: this.getMinDate()\n        }, this.props));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"page_skjemautfyller__component page_skjemautfyller__component_date\"\n      }, element, this.props.renderDeleteButton('page_skjemautfyller__deletebutton--margin-top'), this.props.repeatButton, this.props.children ? React.createElement(\"div\", {\n        className: \"nested-fieldset nested-fieldset--full-height\"\n      }, this.props.children) : null);\n    }\n  }]);\n\n  return DateComponent;\n}(React.Component);\n\nDateComponent.defaultProps = {\n  path: []\n};\nvar withCommonFunctionsComponent = with_common_functions_1.default(DateComponent);\nvar connectedComponent = react_redux_1.connect(map_props_1.mapStateToProps, map_props_1.mapDispatchToProps, map_props_1.mergeProps)(withCommonFunctionsComponent);\nexports.default = connectedComponent;","map":null,"metadata":{},"sourceType":"script"}