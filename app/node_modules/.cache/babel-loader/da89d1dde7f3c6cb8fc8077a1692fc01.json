{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/*\n * This class manages the special functions used by some units.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\n\nvar UcumFunctions = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * Creates the singleton object that contains the list of functions used\n   * to convert special units.\n   */\n  function UcumFunctions() {\n    _classCallCheck(this, UcumFunctions);\n\n    // Create the hash containing the function pairs\n    this.funcs = {}; // Celsius - convert to Celsius from kelvin and from Celsius to kelvin\n    // where kelvin is the base unit for temperature\n\n    this.funcs['cel'] = {\n      cnvTo: function cnvTo(x) {\n        return x - 273.15;\n      },\n      cnvFrom: function cnvFrom(x) {\n        return x + 273.15;\n      }\n    }; // Fahrenheit - convert to Fahrenheit from kelvin and from Fahrenheit to\n    // kelvin - which is the base unit for temperature\n\n    this.funcs['degf'] = {\n      cnvTo: function cnvTo(x) {\n        return x - 459.67;\n      },\n      cnvFrom: function cnvFrom(x) {\n        return x + 459.67;\n      }\n    }; // Reaumur - convert between Reaumur and Kelvin.   Because of the way the\n    // calling code in the Units class is set up (in the convertFrom method),\n    // what is given here as the convertTo function is actually the convert\n    // from method and vice versa.\n    //this.funcs['degre'] = {cnvTo   : function(x){return x + 273.15;},\n    //                    cnvFrom : function(x){return x - 273.15;}};\n\n    this.funcs['degre'] = {\n      cnvTo: function cnvTo(x) {\n        return x - 273.15;\n      },\n      cnvFrom: function cnvFrom(x) {\n        return x + 273.15;\n      }\n    }; // pH - convert to pH from moles per liter and from moles per liter to pH\n    // where a mole is an amount of a substance (a count of particles)\n\n    this.funcs['ph'] = {\n      cnvTo: function cnvTo(x) {\n        return -Math.log(x) / Math.LN10;\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.pow(10, -x);\n      }\n    }; // ln - natural logarithm (base e 2.71828) - apply (cnvTo) and invert (cnvFrom)\n    // and 2ln - two times the natural logarithm\n\n    this.funcs['ln'] = {\n      cnvTo: function cnvTo(x) {\n        return Math.log(x);\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.exp(x);\n      }\n    };\n    this.funcs['2ln'] = {\n      cnvTo: function cnvTo(x) {\n        return 2 * Math.log(x);\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.exp(x / 2);\n      }\n    }; // lg - the decadic logarithm (base 10)\n\n    this.funcs['lg'] = {\n      cnvTo: function cnvTo(x) {\n        return Math.log(x) / Math.LN10;\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.pow(10, x);\n      }\n    };\n    this.funcs['10lg'] = {\n      cnvTo: function cnvTo(x) {\n        return 10 * Math.log(x) / Math.LN10;\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.pow(10, x / 10);\n      }\n    };\n    this.funcs['20lg'] = {\n      cnvTo: function cnvTo(x) {\n        return 20 * Math.log(x) / Math.LN10;\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.pow(10, x / 20);\n      }\n    }; // The plain text ucum units file uses '2lg'\n\n    this.funcs['2lg'] = {\n      cnvTo: function cnvTo(x) {\n        return 2 * Math.log(x) / Math.LN10;\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.pow(10, x / 2);\n      }\n    }; // The xml essence ucum file uses lgTimes2\n\n    this.funcs['lgtimes2'] = this.funcs['2lg']; // ld - dual logarithm (base 2)\n\n    this.funcs['ld'] = {\n      cnvTo: function cnvTo(x) {\n        return Math.log(x) / Math.LN2;\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.pow(2, x);\n      }\n    }; // tan - tangent\n\n    this.funcs['100tan'] = {\n      cnvTo: function cnvTo(x) {\n        return Math.tan(x) * 100;\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.atan(x / 100);\n      }\n    }; // the xml essence ucum file uses both 100tan and tanTimes100\n\n    this.funcs['tanTimes100'] = this.funcs['100tan']; // sqrt - square root\n\n    this.funcs['sqrt'] = {\n      cnvTo: function cnvTo(x) {\n        return Math.sqrt(x);\n      },\n      cnvFrom: function cnvFrom(x) {\n        return x * x;\n      }\n    }; // inv - inverse\n\n    this.funcs['inv'] = {\n      cnvTo: function cnvTo(x) {\n        return 1.0 / x;\n      },\n      cnvFrom: function cnvFrom(x) {\n        return 1.0 / x;\n      }\n    }; // homeopathic potency functions\n\n    this.funcs['hpX'] = {\n      cnvTo: function cnvTo(x) {\n        return -this.funcs['lg'](x);\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.pow(10, -x);\n      }\n    };\n    this.funcs['hpC'] = {\n      cnvTo: function cnvTo(x) {\n        return -this.func['ln'](x) / this.funcs['ln'](100);\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.pow(100, -x);\n      }\n    };\n    this.funcs['hpM'] = {\n      cnvTo: function cnvTo(x) {\n        return -this.funcs['ln'](x) / this.funcs['ln'](1000);\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.pow(1000, -x);\n      }\n    };\n    this.funcs['hpQ'] = {\n      cnvTo: function cnvTo(x) {\n        return -this.funcs['ln'](x) / this.funcs['ln'](50000);\n      },\n      cnvFrom: function cnvFrom(x) {\n        return Math.pow(50000, -x);\n      }\n    };\n  } // end of constructor\n\n  /**\n   * Returns the function with the name specified\n   *\n   * @param fname name of the function to be returned\n   * @return the function with the specified name\n   * @throws an error message if the function is not found\n   */\n\n\n  _createClass(UcumFunctions, [{\n    key: \"forName\",\n    value: function forName(fname) {\n      fname = fname.toLowerCase();\n      var f = this.funcs[fname];\n      if (f === null) throw new Error(\"Requested function \".concat(fname, \" is not defined\"));\n      return f;\n    }\n    /**\n     * Returns a flag indicating whether or not the function has been\n     * defined.\n     *\n     * @param fname name of the function in question\n     * @return true if it has been defined; false if not\n     */\n\n  }, {\n    key: \"isDefined\",\n    value: function isDefined(fname) {\n      fname = fname.toLowerCase();\n      return this.funcs[fname] !== null;\n    }\n  }]);\n\n  return UcumFunctions;\n}(); // end of UcumFunctions class\n\n\nvar _default = new UcumFunctions(); // one singleton instance\n\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}