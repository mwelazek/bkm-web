{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validationRulesFactory = exports.getPractitionerOptions = exports.getOrgTypeSelectOptions = exports.getOrgFormFields = exports.getAssignedPractsOptions = exports.generateOrgPayload = exports.FindAssignedLocations = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _constants = require(\"../../constants\");\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar _lodash = require(\"lodash\");\n\nvar _uuid = require(\"uuid\");\n\nvar _pkgConfig = require(\"@opensrp/pkg-config\");\n\nvar validationRulesFactory = function validationRulesFactory(t) {\n  return {\n    id: [{\n      type: 'string'\n    }],\n    identifier: [{\n      type: 'string'\n    }],\n    name: [{\n      type: 'string',\n      message: t('Must be a valid string')\n    }, {\n      required: true,\n      message: t('Required')\n    }],\n    alias: [{\n      type: 'string',\n      message: t('Must be a valid string')\n    }, {\n      required: false\n    }],\n    status: [{\n      type: 'boolean'\n    }, {\n      required: true,\n      message: t('Required')\n    }],\n    type: [{\n      type: 'string'\n    }, {\n      required: false\n    }],\n    members: [{\n      type: 'array'\n    }, {\n      required: false\n    }]\n  };\n};\n\nexports.validationRulesFactory = validationRulesFactory;\n\nvar getOrgFormFields = function getOrgFormFields(org) {\n  var _identifierObj$, _valueSetCodings$;\n\n  var assignedPractitioners = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!org) {\n    return {\n      type: 'team',\n      active: true\n    };\n  }\n\n  var id = org.id,\n      name = org.name,\n      alias = org.alias,\n      active = org.active,\n      identifier = org.identifier,\n      type = org.type;\n  var allTypeCodings = (0, _lodash.flatten)((type !== null && type !== void 0 ? type : []).map(function (codeConcept) {\n    var _codeConcept$coding;\n\n    return Object.values((_codeConcept$coding = codeConcept.coding) !== null && _codeConcept$coding !== void 0 ? _codeConcept$coding : {});\n  }));\n  var valueSetCodings = (0, _reactUtils.getObjLike)(allTypeCodings, 'system', _constants.organizationTypeValueSetUrl, true);\n  var identifierObj = (0, _reactUtils.getObjLike)(identifier, 'use', _reactUtils.IdentifierUseCodes.OFFICIAL);\n  var formFields = {\n    id: id,\n    identifier: (_identifierObj$ = identifierObj[0]) === null || _identifierObj$ === void 0 ? void 0 : _identifierObj$.value,\n    active: active,\n    name: name,\n    alias: alias === null || alias === void 0 ? void 0 : alias[0],\n    type: (_valueSetCodings$ = valueSetCodings[0]) === null || _valueSetCodings$ === void 0 ? void 0 : _valueSetCodings$.code,\n    members: assignedPractitioners.map(function (pract) {\n      var _pract$practitioner;\n\n      return (_pract$practitioner = pract.practitioner) === null || _pract$practitioner === void 0 ? void 0 : _pract$practitioner.reference;\n    })\n  };\n  return formFields;\n};\n\nexports.getOrgFormFields = getOrgFormFields;\n\nvar generateOrgPayload = function generateOrgPayload(values) {\n  var id = values.id,\n      rawIdentifier = values.identifier,\n      active = values.active,\n      name = values.name,\n      rawAlias = values.alias,\n      type = values.type;\n  var payload = {\n    resourceType: _constants.organizationResourceType,\n    active: !!active,\n    name: name,\n    id: id\n  };\n  var identifier = rawIdentifier;\n\n  if (!rawIdentifier) {\n    identifier = (0, _uuid.v4)();\n  }\n\n  payload.identifier = [{\n    value: identifier,\n    use: _reactUtils.IdentifierUseCodes.OFFICIAL\n  }];\n\n  if (rawAlias) {\n    payload.alias = [rawAlias];\n  }\n\n  if (type) {\n    payload.type = [{\n      coding: [{\n        code: type,\n        system: _constants.OrganizationTypeVS.system\n      }]\n    }];\n  }\n\n  if (id === undefined) {\n    payload.id = (0, _uuid.v4)();\n  }\n\n  return payload;\n};\n\nexports.generateOrgPayload = generateOrgPayload;\n\nvar getOrgTypeSelectOptions = function getOrgTypeSelectOptions() {\n  var system = _constants.OrganizationTypeVS.system,\n      codings = _constants.OrganizationTypeVS.codings;\n  return codings.map(function (coding) {\n    return {\n      label: coding.display,\n      value: coding.code,\n      system: system\n    };\n  });\n};\n\nexports.getOrgTypeSelectOptions = getOrgTypeSelectOptions;\n\nvar getAssignedPractsOptions = function getAssignedPractsOptions(roles) {\n  return roles.map(function (role) {\n    var practitioner = role.practitioner;\n    return {\n      label: practitioner === null || practitioner === void 0 ? void 0 : practitioner.display,\n      value: practitioner === null || practitioner === void 0 ? void 0 : practitioner.reference\n    };\n  });\n};\n\nexports.getAssignedPractsOptions = getAssignedPractsOptions;\n\nvar getPractitionerOptions = function getPractitionerOptions(practitioners, existingPractitionerRoles, allPractitionerRoles, assignmentStrategy) {\n  var allowedPractitioners = practitioners;\n  var rolesWithOrganizations = allPractitionerRoles.filter(function (practRole) {\n    var _practRole$organizati;\n\n    return (_practRole$organizati = practRole.organization) === null || _practRole$organizati === void 0 ? void 0 : _practRole$organizati.reference;\n  });\n  var rolesByPractReference = (0, _lodash.groupBy)(rolesWithOrganizations, 'practitioner.reference');\n\n  if (assignmentStrategy && assignmentStrategy === _pkgConfig.PractToOrgAssignmentStrategy.ONE_TO_ONE) {\n    allowedPractitioners = allowedPractitioners.filter(function (pract) {\n      var practReference = \"\".concat(pract.resourceType, \"/\").concat(pract.id);\n      return !rolesByPractReference[practReference];\n    });\n  }\n\n  var newPractitionerOptions = allowedPractitioners.map(function (pract) {\n    var nameObj = (0, _reactUtils.getObjLike)(pract.name, 'use', _constants.HumanNameUseCodes.OFFICIAL)[0];\n    var value = \"\".concat(_constants.practitionerResourceType, \"/\").concat(pract.id);\n    var label = (0, _reactUtils.parseFhirHumanName)(nameObj);\n    return {\n      value: value,\n      label: label !== null && label !== void 0 ? label : value\n    };\n  });\n  var existingPractitionerOptions = existingPractitionerRoles.map(function (role) {\n    var _role$practitioner, _role$practitioner2;\n\n    var value = (_role$practitioner = role.practitioner) === null || _role$practitioner === void 0 ? void 0 : _role$practitioner.reference;\n    var label = (_role$practitioner2 = role.practitioner) === null || _role$practitioner2 === void 0 ? void 0 : _role$practitioner2.display;\n    return {\n      value: value,\n      label: label !== null && label !== void 0 ? label : value\n    };\n  });\n  return [].concat((0, _toConsumableArray2[\"default\"])(newPractitionerOptions), (0, _toConsumableArray2[\"default\"])(existingPractitionerOptions));\n};\n\nexports.getPractitionerOptions = getPractitionerOptions;\n\nvar FindAssignedLocations = function FindAssignedLocations(orgAffiliations, id) {\n  var locations = [];\n  orgAffiliations.forEach(function (affiliation) {\n    var organization = affiliation.organization,\n        location = affiliation.location;\n    var orgReference = organization === null || organization === void 0 ? void 0 : organization.reference;\n\n    if (!orgReference) {\n      return;\n    }\n\n    if (\"\".concat(_constants.organizationResourceType, \"/\").concat(id) === orgReference) {\n      location === null || location === void 0 ? void 0 : location.forEach(function (loc) {\n        locations.push(loc);\n      });\n    }\n  });\n  return locations;\n};\n\nexports.FindAssignedLocations = FindAssignedLocations;","map":null,"metadata":{},"sourceType":"script"}