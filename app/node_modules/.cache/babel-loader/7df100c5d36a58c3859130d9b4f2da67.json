{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport ValidationError from '../form/validation-error';\nimport { Phrases, ErrorPhrases } from '../date-range-picker/date-range-picker-utils';\nimport { DateRangePicker } from '../date-range-picker';\nimport TimeInput from '../time-input';\nimport { getFullMomentDate, isFullDateTimeValid, getErrorString } from './date-time-picker-utils';\nimport DateTimePickerLegend from './date-time-picker-legend';\nimport toolkitstyles from './styles.module.scss';\nimport datepickerstyles from '../date-range-picker/styles.module.scss';\n\nvar DateTime = /*#__PURE__*/function (_React$Component) {\n  _inherits(DateTime, _React$Component);\n\n  var _super = _createSuper(DateTime);\n\n  function DateTime(props) {\n    var _this;\n\n    _classCallCheck(this, DateTime);\n\n    _this = _super.call(this, props);\n\n    _this.isValid = function () {\n      return _this.state.valid;\n    };\n\n    _this.areAllFieldsValid = function () {\n      if (_this.dateInputRef.current && _this.timeInputRef.current) {\n        return _this.dateInputRef.current.isValid() && _this.timeInputRef.current.isValid();\n      }\n\n      return true;\n    };\n\n    _this.validate = function (cb) {\n      var promises = [];\n      if (_this.dateInputRef && _this.dateInputRef.current) promises.push(_this.dateInputRef.current.validateField());\n      if (_this.timeInputRef && _this.timeInputRef.current) promises.push(_this.timeInputRef.current.validateField());\n      Promise.all(promises).then(function () {\n        var _this$state = _this.state,\n            date = _this$state.date,\n            time = _this$state.time;\n        var _this$props = _this.props,\n            isRequired = _this$props.isRequired,\n            minimumDateTime = _this$props.minimumDateTime,\n            maximumDateTime = _this$props.maximumDateTime;\n        var isTimeAndDateValid = _this.timeInputRef.current ? _this.timeInputRef.current.isValid() && _this.areAllFieldsValid() : false;\n\n        _this.setState({\n          valid: isFullDateTimeValid(date, time, isRequired, minimumDateTime, maximumDateTime, isTimeAndDateValid)\n        }, function () {\n          _this.notifyValidated();\n\n          if (cb) cb();\n        });\n      });\n    };\n\n    _this.validateField = function () {\n      _this.setState({\n        validated: true\n      });\n\n      return new Promise(function (resolve) {\n        _this.validate(resolve);\n      });\n    };\n\n    _this.validateOnlyDate = function (cb) {\n      var promises = [];\n      if (_this.dateInputRef && _this.dateInputRef.current) promises.push(_this.dateInputRef.current.validateField());\n      Promise.all(promises).then(function () {\n        var _this$state2 = _this.state,\n            date = _this$state2.date,\n            time = _this$state2.time;\n        var _this$props2 = _this.props,\n            isRequired = _this$props2.isRequired,\n            minimumDateTime = _this$props2.minimumDateTime,\n            maximumDateTime = _this$props2.maximumDateTime;\n        var isTimeValid = _this.timeInputRef.current ? _this.timeInputRef.current.isValid() : false;\n\n        _this.setState({\n          valid: isFullDateTimeValid(date, time, isRequired, minimumDateTime, maximumDateTime, isTimeValid)\n        }, function () {\n          _this.notifyValidated();\n\n          if (cb) cb();\n        });\n      });\n    };\n\n    _this.notifyValidated = function () {\n      _this.updateErrorMessage();\n\n      if (_this.props.onValidated) _this.props.onValidated(_this.state.valid);\n    };\n\n    _this.onChildDateValidated = function () {\n      if (!_this.state.validated) return;\n      var _this$state3 = _this.state,\n          date = _this$state3.date,\n          time = _this$state3.time;\n      var _this$props3 = _this.props,\n          isRequired = _this$props3.isRequired,\n          minimumDateTime = _this$props3.minimumDateTime,\n          maximumDateTime = _this$props3.maximumDateTime;\n\n      if (!_this.props.timeValue && time || _this.props.timeValue && time && _this.props.timeValue !== time) {\n        var isTimeValid = _this.timeInputRef.current ? _this.timeInputRef.current.isValid() && _this.areAllFieldsValid() : false;\n        var valid = isFullDateTimeValid(date, time, isRequired, minimumDateTime, maximumDateTime, isTimeValid);\n\n        _this.setState({\n          valid: valid\n        }, function () {\n          _this.notifyValidated();\n        });\n      }\n    };\n\n    _this.onDateBlur = function () {\n      var _this$state4 = _this.state,\n          date = _this$state4.date,\n          time = _this$state4.time,\n          validated = _this$state4.validated;\n      var onBlur = _this.props.onBlur;\n      if (validated) _this.validateOnlyDate(_this.notifyValidated);\n      var currentDateAndTime = getFullMomentDate(date, time);\n      if (onBlur && currentDateAndTime) onBlur(date, time);\n    };\n\n    _this.onTimeBlur = function () {\n      var _this$state5 = _this.state,\n          date = _this$state5.date,\n          time = _this$state5.time,\n          validated = _this$state5.validated;\n      var onBlur = _this.props.onBlur;\n      if (validated) _this.validate(_this.notifyValidated);\n      var currentDateAndTime = getFullMomentDate(date, time);\n      if (onBlur && currentDateAndTime) onBlur(date, time);\n    };\n\n    _this.onTimeChange = function (time) {\n      var date = _this.state.date;\n\n      _this.setState({\n        time: time\n      }, function () {\n        if (_this.props.onChange) _this.props.onChange(date, time);\n      });\n    };\n\n    _this.onDateChange = function (date) {\n      var time = _this.state.time;\n\n      _this.setState({\n        date: date\n      }, function () {\n        if (_this.props.onChange) _this.props.onChange(date, time);\n      });\n    };\n\n    _this.updateErrorMessage = function () {\n      var _this$state6 = _this.state,\n          date = _this$state6.date,\n          time = _this$state6.time,\n          valid = _this$state6.valid;\n      var _this$props4 = _this.props,\n          resources = _this$props4.resources,\n          minimumDateTime = _this$props4.minimumDateTime,\n          maximumDateTime = _this$props4.maximumDateTime,\n          isRequired = _this$props4.isRequired,\n          isDateRequired = _this$props4.isDateRequired,\n          isTimeRequired = _this$props4.isTimeRequired,\n          errorMessage = _this$props4.errorMessage;\n      var errorString = getErrorString({\n        date: date,\n        timeString: time,\n        valid: valid,\n        resources: resources,\n        minimumDateTime: minimumDateTime,\n        maximumDateTime: maximumDateTime,\n        isRequired: isRequired,\n        isDateRequired: isDateRequired,\n        isTimeRequired: isTimeRequired,\n        errorMessage: errorMessage,\n        dateFieldInstance: _this.dateInputRef.current,\n        timeFieldInstance: _this.timeInputRef.current\n      });\n\n      _this.setState({\n        errorString: errorString\n      });\n    };\n\n    _this.wrapperRef = React.createRef();\n    _this.dateInputRef = React.createRef();\n    _this.timeInputRef = React.createRef();\n    _this.state = {\n      valid: true,\n      validated: true,\n      date: props.dateValue,\n      time: props.timeValue\n    };\n    return _this;\n  }\n\n  _createClass(DateTime, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (this.props.dateValue && prevProps.dateValue && !prevProps.dateValue.isSame(this.props.dateValue) || this.props.timeValue && prevProps.timeValue && prevProps.timeValue !== this.props.timeValue) {\n        this.setState({\n          date: this.props.dateValue,\n          time: this.props.timeValue\n        }, function () {\n          _this2.validate();\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          id = _this$props5.id,\n          className = _this$props5.className,\n          locale = _this$props5.locale,\n          resources = _this$props5.resources,\n          legend = _this$props5.legend,\n          subLabel = _this$props5.subLabel,\n          requiredLabel = _this$props5.requiredLabel,\n          showRequiredLabel = _this$props5.showRequiredLabel,\n          optionalLabel = _this$props5.optionalLabel,\n          showOptionalLabel = _this$props5.showOptionalLabel,\n          dateClassName = _this$props5.dateClassName,\n          dateLabel = _this$props5.dateLabel,\n          datePlaceholder = _this$props5.datePlaceholder,\n          initialDate = _this$props5.initialDate,\n          minimumDateTime = _this$props5.minimumDateTime,\n          maximumDateTime = _this$props5.maximumDateTime,\n          isDateRequired = _this$props5.isDateRequired,\n          isDateDisabled = _this$props5.isDateDisabled,\n          timeClassName = _this$props5.timeClassName,\n          timeLabel = _this$props5.timeLabel,\n          isRequired = _this$props5.isRequired,\n          minimumHour = _this$props5.minimumHour,\n          maximumHour = _this$props5.maximumHour,\n          minimumMinute = _this$props5.minimumMinute,\n          maximumMinute = _this$props5.maximumMinute,\n          isTimeRequired = _this$props5.isTimeRequired,\n          isTimeDisabled = _this$props5.isTimeDisabled,\n          helpButton = _this$props5.helpButton,\n          helpElement = _this$props5.helpElement,\n          children = _this$props5.children;\n      var _this$state7 = this.state,\n          date = _this$state7.date,\n          time = _this$state7.time,\n          valid = _this$state7.valid,\n          errorString = _this$state7.errorString;\n      var classes = classNames('mol_validation', className, {\n        'mol_validation--active': !valid\n      });\n      return React.createElement(\"fieldset\", {\n        id: \"\".concat(id, \"-wrapper\")\n      }, React.createElement(\"div\", {\n        ref: this.wrapperRef,\n        className: classes\n      }, !valid && errorString && React.createElement(ValidationError, {\n        isValid: valid,\n        error: errorString\n      }), React.createElement(DateTimePickerLegend, {\n        legend: legend,\n        isRequired: isRequired,\n        requiredLabel: showRequiredLabel ? requiredLabel : undefined,\n        optionalLabel: showOptionalLabel ? optionalLabel : undefined,\n        helpButton: helpButton,\n        subLabel: subLabel\n      }), helpElement !== null && helpElement !== void 0 ? helpElement : null, React.createElement(\"div\", {\n        className: toolkitstyles.datetimepicker\n      }, React.createElement(\"div\", {\n        className: toolkitstyles.datetimepicker__date\n      }, React.createElement(DateRangePicker, {\n        ref: this.dateInputRef,\n        id: \"\".concat(id, \"-date\"),\n        type: 'single',\n        locale: locale,\n        resources: resources && resources.dateResources ? resources.dateResources : Phrases,\n        errorResources: resources && resources.dateErrorResources ? resources.dateErrorResources : ErrorPhrases,\n        singleDateValue: date,\n        label: dateLabel,\n        placeholder: datePlaceholder,\n        className: valid ? dateClassName : \"\".concat(dateClassName, \" \").concat(datepickerstyles['datepicker--haserror']),\n        initialDate: initialDate,\n        minimumDate: minimumDateTime,\n        maximumDate: maximumDateTime,\n        onDateChange: this.onDateChange,\n        onValidated: this.onChildDateValidated,\n        validationErrorRenderer: React.createElement(\"span\", null),\n        isRequired: isRequired || isDateRequired ? true : false,\n        isDisabled: isDateDisabled,\n        isValidationHidden: true\n      })), React.createElement(\"div\", {\n        className: toolkitstyles.datetimepicker__time\n      }, React.createElement(TimeInput, {\n        ref: this.timeInputRef,\n        id: \"\".concat(id, \"-time\"),\n        value: time,\n        className: \"\".concat(toolkitstyles.datetimepicker__time__timeinput, \" \").concat(timeClassName),\n        inputClassName: !valid ? 'atom_input--state_validationerror' : '',\n        legend: timeLabel,\n        onBlur: this.onTimeBlur,\n        onTimeChange: this.onTimeChange,\n        minHour: minimumHour,\n        maxHour: maximumHour,\n        minMinute: minimumMinute,\n        maxMinute: maximumMinute,\n        isRequired: isRequired || isTimeRequired ? true : false,\n        readOnly: isTimeDisabled,\n        resources: resources === null || resources === void 0 ? void 0 : resources.timeResources,\n        renderFieldset: true,\n        isValidationHidden: true\n      })), children)));\n    }\n  }]);\n\n  return DateTime;\n}(React.Component);\n\nexport { DateTime as default };\nDateTime.hnFormComponent = true;","map":null,"metadata":{},"sourceType":"module"}