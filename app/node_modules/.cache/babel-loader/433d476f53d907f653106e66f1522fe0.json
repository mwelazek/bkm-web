{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useMemo } from 'react';\n\nfunction route2item(route) {\n  const {\n    breadcrumbName,\n    children\n  } = route,\n        rest = __rest(route, [\"breadcrumbName\", \"children\"]);\n\n  const clone = Object.assign({\n    title: breadcrumbName\n  }, rest);\n\n  if (children) {\n    clone.menu = {\n      items: children.map(_a => {\n        var {\n          breadcrumbName: itemBreadcrumbName\n        } = _a,\n            itemProps = __rest(_a, [\"breadcrumbName\"]);\n\n        return Object.assign(Object.assign({}, itemProps), {\n          title: itemBreadcrumbName\n        });\n      })\n    };\n  }\n\n  return clone;\n}\n\nexport default function useItems(items, routes) {\n  return useMemo(() => {\n    if (items) {\n      return items;\n    }\n\n    if (routes) {\n      return routes.map(route2item);\n    }\n\n    return null;\n  }, [items, routes]);\n}","map":null,"metadata":{},"sourceType":"module"}