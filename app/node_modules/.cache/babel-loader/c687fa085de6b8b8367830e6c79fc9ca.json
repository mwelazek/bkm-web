{"ast":null,"code":"//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n//\n// This default implementation of {@link TokenFactory} creates\n// {@link CommonToken} objects.\n//\nvar CommonToken = require('./Token').CommonToken;\n\nfunction TokenFactory() {\n  return this;\n}\n\nfunction CommonTokenFactory(copyText) {\n  TokenFactory.call(this); // Indicates whether {@link CommonToken//setText} should be called after\n  // constructing tokens to explicitly set the text. This is useful for cases\n  // where the input stream might not be able to provide arbitrary substrings\n  // of text from the input after the lexer creates a token (e.g. the\n  // implementation of {@link CharStream//getText} in\n  // {@link UnbufferedCharStream} throws an\n  // {@link UnsupportedOperationException}). Explicitly setting the token text\n  // allows {@link Token//getText} to be called at any time regardless of the\n  // input stream implementation.\n  //\n  // <p>\n  // The default value is {@code false} to avoid the performance and memory\n  // overhead of copying text for every token unless explicitly requested.</p>\n  //\n\n  this.copyText = copyText === undefined ? false : copyText;\n  return this;\n}\n\nCommonTokenFactory.prototype = Object.create(TokenFactory.prototype);\nCommonTokenFactory.prototype.constructor = CommonTokenFactory; //\n// The default {@link CommonTokenFactory} instance.\n//\n// <p>\n// This token factory does not explicitly copy token text when constructing\n// tokens.</p>\n//\n\nCommonTokenFactory.DEFAULT = new CommonTokenFactory();\n\nCommonTokenFactory.prototype.create = function (source, type, text, channel, start, stop, line, column) {\n  var t = new CommonToken(source, type, channel, start, stop);\n  t.line = line;\n  t.column = column;\n\n  if (text !== null) {\n    t.text = text;\n  } else if (this.copyText && source[1] !== null) {\n    t.text = source[1].getText(start, stop);\n  }\n\n  return t;\n};\n\nCommonTokenFactory.prototype.createThin = function (type, text) {\n  var t = new CommonToken(null, type);\n  t.text = text;\n  return t;\n};\n\nexports.CommonTokenFactory = CommonTokenFactory;","map":null,"metadata":{},"sourceType":"script"}