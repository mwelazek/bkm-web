{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport classNames from 'classnames';\nimport pickAttrs from \"rc-util/es/pickAttrs\";\nimport * as React from 'react';\n\nfunction getBreadcrumbName(route, params) {\n  if (route.title === undefined) {\n    return null;\n  }\n\n  var paramsKeys = Object.keys(params).join('|');\n  return typeof route.title === 'object' ? route.title : String(route.title).replace(new RegExp(\":(\".concat(paramsKeys, \")\"), 'g'), function (replacement, key) {\n    return params[key] || replacement;\n  });\n}\n\nexport function renderItem(prefixCls, item, children, href) {\n  if (children === null || children === undefined) {\n    return null;\n  }\n\n  var className = item.className,\n      onClick = item.onClick,\n      restItem = __rest(item, [\"className\", \"onClick\"]);\n\n  var passedProps = Object.assign(Object.assign({}, pickAttrs(restItem, {\n    data: true,\n    aria: true\n  })), {\n    onClick: onClick\n  });\n\n  if (href !== undefined) {\n    return /*#__PURE__*/React.createElement(\"a\", Object.assign({}, passedProps, {\n      className: classNames(\"\".concat(prefixCls, \"-link\"), className),\n      href: href\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, passedProps, {\n    className: classNames(\"\".concat(prefixCls, \"-link\"), className)\n  }), children);\n}\nexport default function useItemRender(prefixCls, itemRender) {\n  var mergedItemRender = function mergedItemRender(item, params, routes, path, href) {\n    if (itemRender) {\n      return itemRender(item, params, routes, path);\n    }\n\n    var name = getBreadcrumbName(item, params);\n    return renderItem(prefixCls, item, name, href);\n  };\n\n  return mergedItemRender;\n}","map":null,"metadata":{},"sourceType":"module"}