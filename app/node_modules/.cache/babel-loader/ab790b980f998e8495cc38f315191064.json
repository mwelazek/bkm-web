{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport { Collapse } from 'react-collapse';\nimport { theme } from '@helsenorge/designsystem-react';\nimport { setTabIndex, resetTabIndex } from '@helsenorge/core-utils/tabbable-utils';\nimport { AnalyticsId } from '@helsenorge/core-utils/adobe-analytics';\nimport ChevronUp from '../../icons/ChevronUp';\nimport ChevronDown from '../../icons/ChevronDown';\nimport { Spinner } from '../../atoms/spinner';\nimport './styles.scss';\nlet count = 0;\nexport class ExpandableSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.scrollListener = () => {\n      const {\n        sticky,\n        showContent\n      } = this.state;\n\n      if (showContent && this.sectionElementRef && this.sectionElementRef.current && this.headerRef && this.headerRef.current) {\n        const sectionBox = this.sectionElementRef.current.getBoundingClientRect();\n        const headerHeight = this.headerRef.current.getBoundingClientRect().height;\n        const enteredSection = !sticky && sectionBox.top <= 0;\n\n        if (enteredSection) {\n          this.setSticky(headerHeight, sectionBox.width);\n        } else if (sticky && sectionBox.top > 0) {\n          this.removeSticky();\n        }\n\n        if (enteredSection || sticky) {\n          if (sectionBox.top <= -sectionBox.height + headerHeight) {\n            this.setState({\n              hasStickyClass: false\n            });\n          } else {\n            this.setState({\n              hasStickyClass: true\n            });\n          }\n        }\n      }\n    };\n\n    this.resizeListener = () => {\n      if (this.props.isSticky && this.sectionElementRef && this.sectionElementRef.current && this.headerRef && this.headerRef.current) {\n        const sectionWidth = this.sectionElementRef.current.getBoundingClientRect().width;\n        this.headerRef.current.style.width = `${sectionWidth}px`;\n      }\n    };\n\n    this.setSticky = (height, width) => {\n      this.setState({\n        sticky: true\n      });\n\n      if (this.headerRef && this.headerRef.current) {\n        this.headerRef.current.style.width = `${width}px`;\n      }\n\n      if (this.stickyPlaceholderRef && this.stickyPlaceholderRef.current) {\n        this.stickyPlaceholderRef.current.style.height = `${height}px`;\n      }\n    };\n\n    this.removeSticky = () => {\n      if (this.headerRef && this.headerRef.current) {\n        this.headerRef.current.style.width = '';\n      }\n\n      this.setState({\n        sticky: false\n      });\n    };\n\n    this.scanTabbableElements = isOpen => {\n      if (this.containerElementRef && this.containerElementRef.current) {\n        if (isOpen) {\n          this.forceUpdate();\n        } else {\n          const updatedTabbableContent = setTabIndex(this.containerElementRef.current);\n          this.setState({\n            tabbableElements: updatedTabbableContent.tabbableElements,\n            previousTabIndexes: updatedTabbableContent.previousTabIndexes\n          });\n        }\n      }\n    };\n\n    this.focus = () => {\n      if (this.buttonElementRef && this.buttonElementRef.current) {\n        this.buttonElementRef.current.focus();\n      }\n    };\n\n    this.toggleShowExpanded = e => {\n      const {\n        beforeOpenClose,\n        onExpand\n      } = this.props;\n      const {\n        previousTabIndexes,\n        tabbableElements,\n        showContent\n      } = this.state;\n      const isOpen = showContent ? showContent : false;\n\n      if (beforeOpenClose) {\n        if (beforeOpenClose(e, !isOpen) === false) {\n          return;\n        }\n      }\n\n      if (showContent && this.containerElementRef && this.containerElementRef.current) {\n        const updatedTabbableContent = setTabIndex(this.containerElementRef.current);\n        this.setState({\n          tabbableElements: updatedTabbableContent.tabbableElements,\n          previousTabIndexes: updatedTabbableContent.previousTabIndexes\n        });\n\n        if (this.state.sticky) {\n          this.removeSticky();\n        }\n      } else if (tabbableElements.length > 0) {\n        const updatedTabbableElements = resetTabIndex(tabbableElements, previousTabIndexes);\n        this.setState({\n          tabbableElements: updatedTabbableElements\n        });\n      }\n\n      this.focus();\n      this.setState({\n        showContent: !showContent\n      });\n\n      if (onExpand) {\n        onExpand();\n      }\n    };\n\n    this.buttonFocused = () => {\n      this.setState({\n        buttonFocused: true\n      });\n    };\n\n    this.buttonBlur = () => {\n      this.setState({\n        buttonFocused: false\n      });\n    };\n\n    this.getHeaderButtonText = () => {\n      const {\n        label,\n        labelOpen,\n        labelClosed,\n        labelHTML,\n        labelJSX\n      } = this.props;\n      const {\n        showContent\n      } = this.state;\n      const spanClass = 'mol_expandable-section__buttontext';\n\n      if (labelJSX) {\n        return React.createElement('span', {\n          className: spanClass\n        }, labelJSX);\n      } else if (labelHTML) {\n        return React.createElement('span', {\n          className: spanClass,\n          dangerouslySetInnerHTML: this.createMarkup(labelHTML)\n        });\n      } else if (labelOpen && showContent) {\n        return React.createElement('span', {\n          className: spanClass\n        }, labelOpen);\n      } else if (labelClosed && !showContent) {\n        return React.createElement('span', {\n          className: spanClass\n        }, labelClosed);\n      } else {\n        return React.createElement('span', {\n          className: spanClass\n        }, label);\n      }\n    };\n\n    this.sectionElementRef = React.createRef();\n    this.headerRef = React.createRef();\n    this.buttonElementRef = React.createRef();\n    this.containerElementRef = React.createRef();\n    this.stickyPlaceholderRef = React.createRef();\n    this.state = {\n      showContent: !!this.props.openFromStart,\n      buttonFocused: false,\n      tabbableElements: [],\n      previousTabIndexes: [],\n      sticky: false,\n      hasStickyClass: false\n    };\n    this.guid = `expander-section-${count++}`;\n  }\n\n  componentDidMount() {\n    this.scanTabbableElements(!!this.props.openFromStart);\n\n    if (this.props.isSticky) {\n      window.addEventListener('scroll', this.scrollListener);\n      window.addEventListener('resize', this.resizeListener);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.isSticky) {\n      window.removeEventListener('scroll', this.scrollListener);\n      window.removeEventListener('resize', this.resizeListener);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.isAsyncContentLoaded !== this.props.isAsyncContentLoaded && !!this.props.isAsyncContentLoaded) {\n      this.scanTabbableElements(!!this.props.openFromStart);\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.openFromStart !== nextProps.openFromStart) {\n      this.setState({\n        showContent: nextProps.openFromStart\n      });\n    }\n  }\n\n  createMarkup(htmlString) {\n    return {\n      __html: htmlString\n    };\n  }\n\n  render() {\n    const {\n      inlineButton,\n      expanderClassName,\n      smallArrow,\n      rightArrow,\n      rightText,\n      headerClassName,\n      buttonElementClassName,\n      noNestedLine,\n      className,\n      showSpinner,\n      headerTag,\n      description,\n      buttonId,\n      buttonTestId\n    } = this.props;\n    const {\n      showContent,\n      buttonFocused,\n      sticky,\n      hasStickyClass\n    } = this.state;\n    const expanderClasses = classNames({\n      'mol_expandable-section': true,\n      open: showContent\n    }, expanderClassName);\n    const expanderArrowClasses = classNames('mol_expandable-section__arrow', {\n      'mol_expandable-section__arrow--open': showContent\n    }, {\n      'mol_expandable-section__arrow--small': smallArrow || inlineButton\n    }, {\n      'mol_expandable-section__arrow--left': !rightArrow\n    }, {\n      'mol_expandable-section__arrow--right': rightArrow\n    });\n    const headerClasses = classNames({\n      'mol_expandable-section__header': !inlineButton\n    }, {\n      'mol_expandable-section__header--right': rightArrow && rightText\n    }, {\n      'mol_expandable-section__header--focused': buttonFocused\n    }, {\n      'mol_expandable-section__header--sticky': sticky && !!hasStickyClass\n    }, {\n      'mol_expandable-section__header--absolute': sticky && !hasStickyClass\n    }, headerClassName);\n    const buttonClasses = classNames({\n      'mol_expandable-section__button': true\n    }, {\n      'mol_expandable-section__button--inline': inlineButton\n    }, {\n      'mol_expandable-section__button--right': rightArrow\n    }, {\n      'mol_expandable-section__button--right-text': rightArrow && rightText\n    }, {\n      'mol_expandable-section__button--focused': buttonFocused\n    }, buttonElementClassName);\n    const containerClasses = classNames('mol_expandable-section__container', {\n      'mol_expandable-section__container--inline': inlineButton && !noNestedLine\n    }, {\n      'mol_expandable-section__container--right': rightArrow\n    }, className);\n    const spinner = showSpinner ? React.createElement(Spinner, {\n      local: true,\n      transparent: true,\n      mini: true\n    }) : null;\n    const headerButtonText = this.getHeaderButtonText();\n    const descriptionHtml = description ? React.createElement('span', {\n      dangerouslySetInnerHTML: this.createMarkup(description)\n    }) : null;\n    const buttonProps = {};\n\n    if (buttonId) {\n      buttonProps.id = buttonId;\n    }\n\n    const arrowElement = showContent ? React.createElement(ChevronUp, {\n      color: theme.palette.blueberry700\n    }) : React.createElement(ChevronDown, {\n      color: theme.palette.blueberry700\n    });\n    const buttonHtmlNode = React.createElement(\"button\", Object.assign({\n      type: \"button\",\n      className: buttonClasses,\n      onClick: this.toggleShowExpanded,\n      onFocus: this.buttonFocused,\n      onBlur: this.buttonBlur,\n      ref: this.buttonElementRef,\n      \"aria-expanded\": showContent,\n      \"aria-controls\": this.guid,\n      \"data-testid\": buttonTestId,\n      \"data-analyticsid\": AnalyticsId.ExpandableSection\n    }, buttonProps), headerButtonText, React.createElement(\"span\", {\n      className: expanderArrowClasses\n    }, arrowElement), spinner);\n    const headerComponent = React.createElement(headerTag ? headerTag : 'header', {\n      className: headerClasses,\n      ref: this.headerRef\n    }, buttonHtmlNode);\n    return React.createElement(\"section\", {\n      className: expanderClasses,\n      ref: this.sectionElementRef\n    }, headerComponent, this.props.buttonPostfix, this.state.sticky && React.createElement(\"div\", {\n      ref: this.stickyPlaceholderRef\n    }), React.createElement(\"div\", {\n      id: this.guid\n    }, React.createElement(Collapse, {\n      isOpened: showContent ? showContent : false\n    }, React.createElement(\"div\", {\n      className: containerClasses,\n      ref: this.containerElementRef\n    }, this.props.children, descriptionHtml))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}