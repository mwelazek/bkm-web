{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport ReactAutosuggest from 'react-autosuggest';\nimport { Label } from './../../atoms/label';\nimport ValidationError from '../form/validation-error';\nimport autosuggesttheme from './theme.module.scss';\nimport { isEmpty, hasInvalidCharacters } from '@helsenorge/core-utils/string-utils';\nexport default class Autosuggest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderSuggestion = suggestion => React.createElement(\"span\", null, suggestion.label, suggestion.optionalLabel && React.createElement(\"em\", null, \" \", suggestion.optionalLabel));\n\n    this.getSuggestionValue = suggestion => suggestion.label ? suggestion.label : '';\n\n    this.onChange = (e, params) => {\n      const incomingValue = params.newValue;\n\n      if (!this.props.noValidation && !this.validate(incomingValue)) {\n        this.setState({\n          isValid: false\n        });\n      } else {\n        this.setState({\n          isValid: true\n        });\n      }\n\n      this.props.onChange(e, params);\n    };\n\n    this.onBlur = (e, params) => {\n      if (!this.props.noValidation) {\n        this.setState({\n          validated: true\n        });\n      }\n\n      if (this.props.onBlur) this.props.onBlur(e, params);\n    };\n\n    this.onKeyDown = e => {\n      if (e.keyCode === 13) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n\n      if (this.props.onKeyDown) this.props.onKeyDown(e);\n    };\n\n    this.isValid = () => {\n      return this.state.isValid;\n    };\n\n    this.validate = incomingValue => {\n      const {\n        isRequired,\n        minLength,\n        maxLength,\n        noCharacterValidation\n      } = this.props;\n\n      if (isRequired && isEmpty(incomingValue)) {\n        return false;\n      }\n\n      if (!isRequired && isEmpty(incomingValue)) {\n        return true;\n      }\n\n      if (!noCharacterValidation) {\n        const valueLength = incomingValue.length;\n\n        if (!isEmpty(incomingValue) && hasInvalidCharacters(incomingValue)) {\n          return false;\n        }\n\n        if (!isEmpty(incomingValue) && minLength && valueLength < minLength) {\n          return false;\n        }\n\n        if (!isEmpty(incomingValue) && maxLength && valueLength > maxLength) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.validateField = () => {\n      const {\n        value,\n        onSubmitValidator\n      } = this.props;\n      return new Promise(resolve => {\n        if (onSubmitValidator) {\n          const isValid = onSubmitValidator() && this.validate(value);\n          this.setState({\n            isValid,\n            validated: true\n          });\n          resolve();\n        } else if (!this.validate(value)) {\n          this.setState({\n            isValid: false,\n            validated: true\n          });\n          resolve();\n        } else {\n          resolve();\n        }\n      });\n    };\n\n    this.renderErrorMessage = () => {\n      const {\n        noValidation,\n        errorMessage\n      } = this.props;\n      const {\n        isValid,\n        validated\n      } = this.state;\n\n      if (!noValidation && validated && errorMessage) {\n        return React.createElement(ValidationError, {\n          isValid: isValid,\n          error: errorMessage\n        });\n      }\n    };\n\n    this.autosuggestRef = React.createRef();\n    this.state = {\n      isValid: true,\n      validated: false\n    };\n  }\n\n  render() {\n    const {\n      id,\n      value,\n      suggestions,\n      className,\n      label,\n      subLabel,\n      placeholder,\n      type,\n      noValidation,\n      isRequired,\n      ariaLabel,\n      helpButton,\n      helpElement,\n      onSuggestionSelected,\n      onSuggestionsFetchRequested,\n      onSuggestionsClearRequested,\n      renderSuggestion,\n      focusInputOnSuggestionClick\n    } = this.props;\n    const {\n      validated,\n      isValid\n    } = this.state;\n    const inputProps = {\n      id,\n      value,\n      placeholder,\n      type: type,\n      'aria-label': ariaLabel,\n      required: isRequired,\n      maxLength: this.props.maxLength,\n      minLength: this.props.minLength,\n      onChange: this.onChange,\n      onKeyDown: this.onKeyDown,\n      onBlur: this.onBlur\n    };\n    const wrapperClasses = classNames(className, {\n      mol_validation: !noValidation,\n      'mol_validation--active': !noValidation && validated && !isValid\n    });\n    return React.createElement(\"div\", {\n      className: wrapperClasses,\n      id: `${id}-wrapper`\n    }, this.renderErrorMessage(), label && React.createElement(Label, {\n      labelText: label,\n      htmlFor: id,\n      sublabelText: subLabel,\n      helpButton: helpButton\n    }), helpElement ? helpElement : null, React.createElement(ReactAutosuggest, {\n      ref: this.autosuggestRef,\n      theme: autosuggesttheme,\n      suggestions: suggestions,\n      inputProps: inputProps,\n      onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: onSuggestionsClearRequested,\n      onSuggestionSelected: onSuggestionSelected,\n      getSuggestionValue: this.getSuggestionValue,\n      renderSuggestion: renderSuggestion ? renderSuggestion : this.renderSuggestion,\n      focusInputOnSuggestionClick: focusInputOnSuggestionClick || false\n    }));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}