{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport FormSubmitButton from './form-buttons/form-submit-button';\nimport FormCancelButton from './form-buttons/form-cancel-button';\nimport FormPauseButton from './form-buttons/form-pause-button';\nimport FormDraftButton from './form-buttons/form-draft-button';\nimport { Spinner } from '../../atoms/spinner';\nimport { ValidationSummaryPlacement } from './validationSummaryPlacement';\nimport ValidationSummary from './validation-summary';\nimport ValidationError from './validation-error';\nimport toolkitstyles from './styles.module.scss';\nimport './styles.scss';\n\nvar Form = /*#__PURE__*/function (_React$Component) {\n  _inherits(Form, _React$Component);\n\n  var _super = _createSuper(Form);\n\n  function Form(props) {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    _this = _super.call(this, props);\n\n    _this.areAllFieldsValid = function () {\n      for (var i = 0; i < _this.state.formComponents.length; i++) {\n        var child = _this.state.formComponents[i];\n        var childToValidate = child && child.getWrappedInstance ? child.getWrappedInstance() : child;\n\n        if (childToValidate && childToValidate.props && childToValidate.props.isValid && !childToValidate.props.isValid()) {\n          return false;\n        } else if (childToValidate && childToValidate.isValid && !childToValidate.isValid()) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    _this.onFormSubmit = function (cb) {\n      _this.setState({\n        submitted: true\n      }, function () {\n        _this.validateForm(function () {\n          if (_this.areAllFieldsValid()) {\n            cb();\n          } else {\n            _this.setState({\n              valid: false\n            });\n\n            if (_this.props.validationSummary && _this.props.validationSummary.enable && _this.validationSummaryRef.current) {\n              _this.validationSummaryRef.current.scrollIntoView();\n\n              _this.validationSummaryRef.current.focus();\n            }\n          }\n        });\n      });\n    };\n\n    _this.onChildValidated = function () {\n      if (_this.state.submitted) {\n        _this.setState({\n          valid: _this.areAllFieldsValid()\n        });\n      }\n    };\n\n    _this.isSubmitted = function () {\n      return _this.state.submitted;\n    };\n\n    _this.renderSpinner = function () {\n      if (_this.props.disabled) {\n        return React.createElement(Spinner, {\n          local: true\n        });\n      }\n    };\n\n    _this.addFormComponent = function (comp) {\n      _this.setState(function (_ref) {\n        var formComponents = _ref.formComponents;\n        formComponents.push(comp);\n        return {\n          formComponents: formComponents\n        };\n      });\n    };\n\n    _this.removeFormComponent = function (comp) {\n      _this.setState(function (_ref2) {\n        var formComponents = _ref2.formComponents;\n        var index = formComponents.indexOf(comp);\n        formComponents.splice(index, 1);\n        return {\n          formComponents: formComponents\n        };\n      }, function () {\n        if (!_this.state.valid && comp.isValid && !comp.isValid()) {\n          _this.onChildValidated();\n        }\n      });\n    };\n\n    _this.renderValidationSummary = function () {\n      if (_this.props.validationSummary && _this.props.validationSummary.enable) {\n        return React.createElement(\"div\", {\n          className: \"mol_validation-summary_wrapper\",\n          ref: _this.validationSummaryRef,\n          tabIndex: -1,\n          \"aria-atomic\": \"true\"\n        }, React.createElement(ValidationSummary, {\n          header: _this.props.validationSummary.header,\n          components: _this.state.formComponents,\n          submitted: _this.state.submitted\n        }));\n      }\n    };\n\n    _this.renderChildren = function () {\n      var children = _this.props.children;\n\n      if (!children) {\n        return null;\n      }\n\n      var childrenWithProp = React.Children.map(children, function (child) {\n        if (child) {\n          var childPreviousProps = typeof child.type === 'function' && child.props && child.props.children && child.props.children.props ? child.props.children.props : undefined;\n          var childProps = {\n            addFormComponent: _this.addFormComponent,\n            removeFormComponent: _this.removeFormComponent,\n            onValidated: _this.onChildValidated,\n            optionalLabel: _this.props.allowChildPropOverride && childPreviousProps && childPreviousProps.optionalLabel ? childPreviousProps.optionalLabel : _this.props.optionalLabel,\n            requiredLabel: _this.props.allowChildPropOverride && childPreviousProps && childPreviousProps.requiredLabel ? childPreviousProps.requiredLabel : _this.props.requiredLabel,\n            isSubmitted: _this.isSubmitted,\n            showOptionalLabel: _this.props.allowChildPropOverride && childPreviousProps && childPreviousProps.showOptionalLabel ? childPreviousProps.showOptionalLabel : _this.props.showOptionalLabel ? _this.props.showOptionalLabel : true,\n            showRequiredLabel: _this.props.showRequiredLabel && childPreviousProps && childPreviousProps.showRequiredLabel ? childPreviousProps.showRequiredLabel : _this.props.showRequiredLabel ? _this.props.showRequiredLabel : false\n          };\n          return React.cloneElement(child, typeof child.type === 'function' || typeof child.type === 'object' ? childProps : {});\n        }\n      });\n      return childrenWithProp;\n    };\n\n    _this.state = {\n      valid: true,\n      submitted: false,\n      formComponents: []\n    };\n    _this.validationSummaryRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"validateForm\",\n    value: function validateForm(cb) {\n      var promises = [];\n      this.state.formComponents.forEach(function (child) {\n        var childToValidate = child && child.getWrappedInstance ? child.getWrappedInstance() : child;\n\n        if (childToValidate && childToValidate.props && childToValidate.props.validateField) {\n          promises.push(childToValidate.props.validateField());\n        } else if (childToValidate && childToValidate.validateField) {\n          var returnedPromise = childToValidate.validateField();\n          promises.push(returnedPromise);\n        }\n      });\n\n      if (this.props.submitValidator) {\n        promises.push(this.props.submitValidator());\n      }\n\n      Promise.all(promises).then(cb);\n    }\n  }, {\n    key: \"renderErrorMessage\",\n    value: function renderErrorMessage() {\n      var isValid = true;\n\n      if (!this.state.valid && this.state.submitted) {\n        isValid = false;\n      }\n\n      return React.createElement(ValidationError, {\n        isValid: isValid,\n        error: this.props.errorMessage ? this.props.errorMessage : '',\n        className: \"mol_form__formerror\",\n        textClassName: \"mol_validation__formerrortext\",\n        testId: this.props.validationTestId\n      });\n    }\n  }, {\n    key: \"renderButtons\",\n    value: function renderButtons() {\n      var submitButton = React.createElement(FormSubmitButton, {\n        submitButtonText: this.props.submitButtonText,\n        submitButtonClasses: this.props.submitButtonClasses,\n        submitButtonLeftIcon: this.props.submitButtonLeftIcon,\n        submitButtonRightIcon: this.props.submitButtonRightIcon,\n        submitButtonType: this.props.submitButtonType,\n        submitButtonDisabled: this.props.submitButtonDisabled,\n        saving: this.props.saving,\n        saved: this.props.saved,\n        saveText: this.props.saveText,\n        savedText: this.props.savedText,\n        saveButtonOnClick: this.props.saveButtonOnClick,\n        onFormSubmit: this.onFormSubmit,\n        onSubmit: this.props.onSubmit,\n        saveButtonTestId: this.props.saveButtonTestId,\n        submitButtonTestId: this.props.submitButtonTestId\n      });\n      var cancelButton = React.createElement(FormCancelButton, {\n        cancelButtonText: this.props.cancelButtonText,\n        cancelButtonClasses: this.props.cancelButtonClasses,\n        cancelButtonLeft: this.props.cancelButtonLeft,\n        cancelButtonRight: this.props.cancelButtonRight,\n        cancelButtonType: this.props.cancelButtonType,\n        cancelButtonLeftIcon: this.props.cancelButtonLeftIcon,\n        cancelButtonRightIcon: this.props.cancelButtonRightIcon,\n        cancelButtonDisabled: this.props.cancelButtonDisabled,\n        onCancel: this.props.onCancel,\n        cancelButtonTestId: this.props.cancelButtonTestId\n      });\n      var pauseButton = React.createElement(FormPauseButton, {\n        pauseButtonText: this.props.pauseButtonText,\n        pauseButtonClasses: this.props.pauseButtonClasses,\n        pauseButtonType: this.props.pauseButtonType,\n        pauseButtonLevel: this.props.pauseButtonLevel,\n        pauseButtonLeftIcon: this.props.pauseButtonLeftIcon,\n        pauseButtonDisabled: this.props.pauseButtonDisabled,\n        onPause: this.props.onPause,\n        pauseButtonTestId: this.props.pauseButtonTestId\n      });\n      var draftButton = React.createElement(FormDraftButton, {\n        draftButtonText: this.props.draftButtonText,\n        draftButtonClasses: this.props.draftButtonClasses,\n        onFormSubmit: this.onFormSubmit,\n        onDraft: this.props.onDraft,\n        draftButtonTestId: this.props.draftButtonTestId\n      });\n\n      if (!submitButton && !cancelButton && !pauseButton && !draftButton) {\n        return null;\n      }\n\n      if (this.props.cancelButtonLeft) {\n        return React.createElement(\"div\", null, cancelButton, submitButton, draftButton, pauseButton);\n      }\n\n      if (this.props.cancelButtonRight) {\n        return React.createElement(\"div\", null, submitButton, draftButton, pauseButton, cancelButton);\n      }\n\n      return React.createElement(\"div\", null, submitButton, draftButton, cancelButton, pauseButton);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formClasses = classNames('mol_form', this.props.className);\n      var contentClasses = classNames('mol_form--content', this.props.contentClasses);\n      var validationSummaryPlacement = this.props.validationSummaryPlacement || ValidationSummaryPlacement.Top;\n      return React.createElement(\"form\", {\n        method: \"post\",\n        action: this.props.action,\n        onSubmit: function onSubmit(e) {\n          if (_this2.props.triggerPreventDefaultOnSubmit) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n\n          _this2.onFormSubmit(function () {\n            if (_this2.props.onSubmit) {\n              _this2.props.onSubmit(e);\n            }\n          });\n        },\n        className: formClasses\n      }, validationSummaryPlacement === ValidationSummaryPlacement.Top && this.renderValidationSummary(), React.createElement(\"div\", {\n        className: contentClasses\n      }, this.renderChildren()), validationSummaryPlacement === ValidationSummaryPlacement.Bottom && this.renderValidationSummary(), React.createElement(\"div\", {\n        className: \"\".concat(toolkitstyles.form__buttonwrapper, \" \").concat(this.props.buttonClasses)\n      }, this.renderErrorMessage(), this.renderButtons(), this.renderSpinner()));\n    }\n  }]);\n\n  return Form;\n}(React.Component);\n\nexport { Form as default };\nForm.defaultProps = {\n  action: '#',\n  submitButtonType: 'action',\n  cancelButtonType: 'action',\n  pauseButtonType: 'action',\n  pauseButtonLevel: 'tertiary'\n};","map":null,"metadata":{},"sourceType":"module"}