{"ast":null,"code":"// This file holds utility functions used in implementing the public functions.\nvar util = {};\n\nvar types = require('./types');\n\nvar ResourceNode = types.ResourceNode;\n/**\n *  Reports and error to the calling environment and stops processing.\n * @param message the error message\n * @param fnName the name of the function raising the error (optional)\n */\n\nutil.raiseError = function (message, fnName) {\n  fnName = fnName ? fnName + \": \" : \"\";\n  throw fnName + message;\n};\n/**\n *  Throws an exception if the collection contains more than one value.\n * @param collection the collection to be checked.\n * @param errorMsgPrefix An optional prefix for the error message to assist in\n *  debugging.\n */\n\n\nutil.assertAtMostOne = function (collection, errorMsgPrefix) {\n  if (collection.length > 1) {\n    util.raiseError(\"Was expecting no more than one element but got \" + JSON.stringify(collection), errorMsgPrefix);\n  }\n};\n/**\n *  Throws an exception if the data is not one of the expected types.\n * @param data the value to be checked.  This may be a ResourceNode.\n * @param types an array of the permitted types\n * @param errorMsgPrefix An optional prefix for the error message to assist in\n *  debugging.\n * @return the value that was checked.  If \"data\" was a ResourceNode, this will\n *  be the ReourceNode's data.\n */\n\n\nutil.assertType = function (data, types, errorMsgPrefix) {\n  var val = this.valData(data);\n\n  if (types.indexOf(typeof val) < 0) {\n    var typeList = types.length > 1 ? \"one of \" + types.join(\", \") : types[0];\n    util.raiseError(\"Found type '\" + typeof data + \"' but was expecting \" + typeList, errorMsgPrefix);\n  }\n\n  return val;\n};\n\nutil.isEmpty = function (x) {\n  return Array.isArray(x) && x.length == 0;\n};\n\nutil.isSome = function (x) {\n  return x !== null && x !== undefined && !util.isEmpty(x);\n};\n\nutil.isTrue = function (x) {\n  return x !== null && x !== undefined && (x === true || x.length == 1 && x[0] === true);\n};\n\nutil.isFalse = function (x) {\n  return x !== null && x !== undefined && (x === false || x.length == 1 && x[0] === false);\n};\n\nutil.isCapitalized = function (x) {\n  return x && x[0] === x[0].toUpperCase();\n};\n\nutil.flatten = function (x) {\n  return x.reduce(function (acc, x) {\n    if (Array.isArray(x)) {\n      // todo replace with array modification\n      acc = acc.concat(x);\n    } else {\n      acc.push(x);\n    }\n\n    return acc;\n  }, []);\n};\n\nutil.arraify = function (x) {\n  if (Array.isArray(x)) {\n    return x;\n  }\n\n  if (util.isSome(x)) {\n    return [x];\n  }\n\n  return [];\n};\n/**\n *  Returns the data value of the given parameter, which might be a ResourceNode.\n *  Otherwise, it returns the value that was passed in.\n */\n\n\nutil.valData = function (val) {\n  return val instanceof ResourceNode ? val.data : val;\n};\n/**\n * Prepares a string for insertion into a regular expression\n * @param {string} str\n * @return {string}\n */\n\n\nutil.escapeStringForRegExp = function (str) {\n  return str.replace(/[-[\\]{}()*+?.,\\\\/^$|#\\s]/g, '\\\\$&');\n};\n\nmodule.exports = util;","map":null,"metadata":{},"sourceType":"script"}