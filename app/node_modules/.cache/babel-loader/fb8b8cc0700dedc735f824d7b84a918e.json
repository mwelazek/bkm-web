{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultEditPatientProps = exports.PatientDetails = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _antd = require(\"antd\");\n\nvar _icons = require(\"@ant-design/icons\");\n\nvar _reactHelmet = require(\"react-helmet\");\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _fhirclient = _interopRequireDefault(require(\"fhirclient\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar _utils = require(\"../PatientsList/utils\");\n\nvar _DocumentReference = require(\"../DocumentReference\");\n\nvar _constants = require(\"../../constants\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _ResourceSchema = require(\"./ResourceSchema\");\n\nvar _utils2 = require(\"../..//helpers/utils\");\n\nvar _mls = require(\"../../mls\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar Header = _antd.Layout.Header,\n    Sider = _antd.Layout.Sider,\n    Content = _antd.Layout.Content;\nvar defaultEditPatientProps = {\n  fhirBaseURL: '',\n  patientBundleSize: 1000\n};\nexports.defaultEditPatientProps = defaultEditPatientProps;\n\nvar PatientDetails = function PatientDetails(props) {\n  var _data$entry, _resourceTypeMap$reso3, _resourcesSchema$reso;\n\n  var fhirBaseURL = props.fhirBaseURL,\n      patientBundleSize = props.patientBundleSize;\n\n  var _useParams = (0, _reactRouterDom.useParams)(),\n      patientId = _useParams.id;\n\n  var _useTranslation = (0, _mls.useTranslation)(),\n      t = _useTranslation.t;\n\n  var _React$useState = _react[\"default\"].useState(_constants.patientResourceType),\n      _React$useState2 = (0, _slicedToArray2[\"default\"])(_React$useState, 2),\n      resourceType = _React$useState2[0],\n      setResourceType = _React$useState2[1];\n\n  var _useQuery = (0, _reactQuery.useQuery)([_constants.patientResourceType, patientId], (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee() {\n    var token;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, _reactUtils.handleSessionOrTokenExpiry)();\n\n          case 2:\n            token = _context.sent;\n            _context.next = 5;\n            return _fhirclient[\"default\"].client(fhirBaseURL).request({\n              url: \"Patient/\".concat(patientId, \"/$everything?_count=\").concat(patientBundleSize),\n              headers: {\n                Authorization: \"Bearer \".concat(token)\n              }\n            });\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))),\n      error = _useQuery.error,\n      data = _useQuery.data,\n      isLoading = _useQuery.isLoading;\n\n  if (isLoading) {\n    return _react[\"default\"].createElement(_antd.Spin, {\n      size: \"large\",\n      className: \"custom-spinner\"\n    });\n  }\n\n  if (error) {\n    return _react[\"default\"].createElement(_reactUtils.BrokenPage, {\n      errorMessage: t('There was a problem fetching the patient')\n    });\n  }\n\n  var resourceTypeMap = {};\n\n  if (data && (_data$entry = data.entry) !== null && _data$entry !== void 0 && _data$entry.length) {\n    var _iterator = _createForOfIteratorHelper(data.entry),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var datum = _step.value;\n        var resourceTypeStr = datum.resource.resourceType;\n\n        if (!resourceTypeMap[resourceTypeStr]) {\n          resourceTypeMap[resourceTypeStr] = {\n            count: 1,\n            data: [datum.resource]\n          };\n        } else {\n          var _resourceTypeMap$reso, _resourceTypeMap$reso2;\n\n          var resourceCount = resourceTypeMap[resourceTypeStr].count + 1;\n          resourceTypeMap[resourceTypeStr] = {\n            count: resourceCount,\n            data: [].concat((0, _toConsumableArray2[\"default\"])((_resourceTypeMap$reso = (_resourceTypeMap$reso2 = resourceTypeMap[resourceTypeStr]) === null || _resourceTypeMap$reso2 === void 0 ? void 0 : _resourceTypeMap$reso2.data) !== null && _resourceTypeMap$reso !== void 0 ? _resourceTypeMap$reso : []), [datum.resource])\n          };\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  var resources = (_resourceTypeMap$reso3 = resourceTypeMap[resourceType]) === null || _resourceTypeMap$reso3 === void 0 ? void 0 : _resourceTypeMap$reso3.data;\n\n  var _ref2 = (_resourcesSchema$reso = _ResourceSchema.resourcesSchema[resourceType]) !== null && _resourcesSchema$reso !== void 0 ? _resourcesSchema$reso : {},\n      columnsFactory = _ref2.columns,\n      resourceParser = _ref2.resourceParser;\n\n  var columns = columnsFactory === null || columnsFactory === void 0 ? void 0 : columnsFactory(t);\n  var patientName = (0, _utils.getPatientName)(resourceTypeMap['Patient'].data[0]);\n  var currentPatient = resourceTypeMap['Patient'].data[0];\n  var gender = currentPatient.gender,\n      birthDate = currentPatient.birthDate;\n  var avatarLink = \"https://www.gravatar.com/avatar/\".concat(patientId, \"?s=50&r=any&default=identicon&forcedefault=1\");\n  return _react[\"default\"].createElement(_antd.Row, {\n    id: \"patient-details\"\n  }, _react[\"default\"].createElement(_antd.Col, {\n    span: 24\n  }, _react[\"default\"].createElement(\"section\", {\n    className: \"content-section\"\n  }, _react[\"default\"].createElement(_reactHelmet.Helmet, null, _react[\"default\"].createElement(\"title\", null, t('Patient Details'))), _react[\"default\"].createElement(\"div\", {\n    className: \"plan-avatar-detail-section\"\n  }, _react[\"default\"].createElement(_antd.Layout, {\n    className: \"patient-details-banner\"\n  }, _react[\"default\"].createElement(Sider, null, _react[\"default\"].createElement(_antd.Avatar, {\n    src: avatarLink,\n    className: \"patient-details-banner_avatar\"\n  })), _react[\"default\"].createElement(_antd.Layout, null, _react[\"default\"].createElement(Header, null, _react[\"default\"].createElement(\"h4\", null, patientName, ' ', currentPatient.deceasedBoolean || currentPatient.deceasedDateTime ? _react[\"default\"].createElement(_antd.Tag, {\n    color: \"red\"\n  }, t('Deceased')) : null)), _react[\"default\"].createElement(Content, null, function () {\n    var _ref3, _ref4, _ref5;\n\n    var columnarData = [(_ref3 = {}, (0, _defineProperty2[\"default\"])(_ref3, t('UUID'), (0, _get[\"default\"])(currentPatient, 'identifier.0.value')), (0, _defineProperty2[\"default\"])(_ref3, t('ID'), patientId), (0, _defineProperty2[\"default\"])(_ref3, t('Gender'), gender), _ref3), (_ref4 = {}, (0, _defineProperty2[\"default\"])(_ref4, t('Birth Date'), birthDate), (0, _defineProperty2[\"default\"])(_ref4, t('Phone'), (0, _get[\"default\"])(currentPatient, 'telecom.0.value')), (0, _defineProperty2[\"default\"])(_ref4, t('MRN'), 'Unknown'), _ref4), (_ref5 = {}, (0, _defineProperty2[\"default\"])(_ref5, t('Address'), (0, _get[\"default\"])(currentPatient, 'address.0.line.0') || 'N/A'), (0, _defineProperty2[\"default\"])(_ref5, t('Country'), (0, _get[\"default\"])(currentPatient, 'address.0.country')), _ref5)];\n    return _react[\"default\"].createElement(\"div\", {\n      className: \"patient-details__box\"\n    }, columnarData.map(function (columnData, idx) {\n      return _react[\"default\"].createElement(\"div\", {\n        className: \"patient-detail-section\",\n        key: idx\n      }, Object.entries(columnData).map(function (_ref6) {\n        var _ref7 = (0, _slicedToArray2[\"default\"])(_ref6, 2),\n            key = _ref7[0],\n            value = _ref7[1];\n\n        return _react[\"default\"].createElement(\"div\", {\n          key: key,\n          className: \"patient-detail__key-value\"\n        }, _react[\"default\"].createElement(\"span\", null, key, \": \"), _react[\"default\"].createElement(\"span\", null, value));\n      }));\n    }));\n  }())))), _react[\"default\"].createElement(_antd.Row, null, _react[\"default\"].createElement(_antd.Col, {\n    span: 6\n  }, _react[\"default\"].createElement(_antd.Menu, {\n    mode: \"vertical\",\n    style: {\n      width: 'auto'\n    },\n    defaultSelectedKeys: [resourceType],\n    selectedKeys: [resourceType]\n  }, Object.keys(resourceTypeMap).map(function (type) {\n    return _react[\"default\"].createElement(_antd.Menu.Item, {\n      key: type,\n      id: type,\n      onClick: function onClick(e) {\n        setResourceType(e.key);\n      }\n    }, type, ' ', _react[\"default\"].createElement(_antd.Badge, {\n      count: resourceTypeMap[type].count,\n      overflowCount: 500,\n      style: {\n        backgroundColor: '#777',\n        \"float\": 'right',\n        marginTop: '10px'\n      }\n    }));\n  }))), _react[\"default\"].createElement(_antd.Col, {\n    span: 18\n  }, _react[\"default\"].createElement(_antd.Card, {\n    title: _react[\"default\"].createElement(_react[\"default\"].Fragment, null, _react[\"default\"].createElement(\"span\", {\n      style: {\n        color: '#1890ff'\n      }\n    }, _react[\"default\"].createElement(_icons.IdcardOutlined, null), \" \", resourceType)),\n    bordered: false\n  }, function () {\n    if (resourceType === 'DocumentReference') {\n      return _react[\"default\"].createElement(_DocumentReference.DocumentReferenceDetails, {\n        fhirBaseApiUrl: fhirBaseURL,\n        documentResources: resourceTypeMap[resourceType].data\n      });\n    } else {\n      if (!columns || !resourceParser) {\n        return _react[\"default\"].createElement(_antd.Alert, {\n          message: t('Work in progress'),\n          type: \"info\"\n        });\n      }\n\n      return _react[\"default\"].createElement(_utils2.PatientDetailsTable, {\n        columns: columns,\n        resources: resources,\n        parseResource: resourceParser\n      });\n    }\n  }()))))));\n};\n\nexports.PatientDetails = PatientDetails;\nPatientDetails.defaultProps = defaultEditPatientProps;","map":null,"metadata":{},"sourceType":"script"}