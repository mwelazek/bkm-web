{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseKeycloakRoles = exports.parseFHirRoles = exports.adapter = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _toArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toArray\"));\n\nvar _constants = require(\"../constants\");\n\nvar _roleDefinition = require(\"../roleDefinition\");\n\nvar fhirVerbToPermitLookup = {\n  GET: _constants.Permit.READ,\n  POST: _constants.Permit.CREATE,\n  PUT: _constants.Permit.UPDATE,\n  DELETE: _constants.Permit.DELETE,\n  MANAGE: _constants.Permit.MANAGE\n};\n\nvar getFhirResourceString = function getFhirResourceString(rawResourceString) {\n  var matchedResource = _constants.FhirResources.filter(function (resource) {\n    return resource.toUpperCase() === rawResourceString.toUpperCase();\n  });\n\n  return matchedResource[0];\n};\n\nvar parseFHirRoles = function parseFHirRoles(role) {\n  var separator = '_';\n  var roleParts = role.split(separator);\n\n  if (roleParts.length < 2) {\n    return;\n  }\n\n  var _roleParts = (0, _toArray2[\"default\"])(roleParts),\n      verb = _roleParts[0],\n      rest = _roleParts.slice(1);\n\n  var rawResource = rest.join(separator);\n  var resource = getFhirResourceString(rawResource);\n  var permit = fhirVerbToPermitLookup[verb.toUpperCase()];\n\n  if (resource && permit) {\n    return new _roleDefinition.UserRole(resource, permit);\n  }\n};\n\nexports.parseFHirRoles = parseFHirRoles;\nvar keycloakRoleMappings = {\n  'realm-admin': new _roleDefinition.UserRole(['iam_group', 'iam_role', 'iam_user'], _constants.Permit.MANAGE),\n  'view-users': new _roleDefinition.UserRole(['iam_user'], _constants.Permit.READ),\n  'manage-users': new _roleDefinition.UserRole(['iam_group', 'iam_role', 'iam_user'], _constants.Permit.MANAGE),\n  'query-groups': new _roleDefinition.UserRole(['iam_group'], _constants.Permit.READ),\n  'query-users': new _roleDefinition.UserRole(['iam_user'], _constants.Permit.READ)\n};\n\nvar parseKeycloakRoles = function parseKeycloakRoles(stringRole) {\n  var lookedURole = keycloakRoleMappings[stringRole];\n  return lookedURole;\n};\n\nexports.parseKeycloakRoles = parseKeycloakRoles;\nvar defaultRoleData = {\n  realmAccess: [],\n  clientRoles: {}\n};\n\nvar adapter = function adapter() {\n  var _roles$realmAccess, _roles$clientRoles;\n\n  var roles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultRoleData;\n  var allRoleStrings = (_roles$realmAccess = roles.realmAccess) !== null && _roles$realmAccess !== void 0 ? _roles$realmAccess : [];\n  var invalidRoleStrings = [];\n  Object.values((_roles$clientRoles = roles.clientRoles) !== null && _roles$clientRoles !== void 0 ? _roles$clientRoles : {}).forEach(function (roleArray) {\n    allRoleStrings = [].concat((0, _toConsumableArray2[\"default\"])(allRoleStrings), (0, _toConsumableArray2[\"default\"])(roleArray));\n  });\n  var allRoles = [];\n  allRoleStrings.forEach(function (role) {\n    var asRole = parseKeycloakRoles(role);\n\n    if (asRole === undefined) {\n      asRole = parseFHirRoles(role);\n    }\n\n    if (asRole) {\n      allRoles.push(asRole);\n    } else {\n      invalidRoleStrings.push(role);\n    }\n  });\n\n  if (invalidRoleStrings.length > 0) {\n    console.warn(\"Could not understand the following roles: \".concat(invalidRoleStrings.join(', ')));\n  }\n\n  return _roleDefinition.UserRole.combineRoles(allRoles);\n};\n\nexports.adapter = adapter;","map":null,"metadata":{},"sourceType":"script"}