{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst itemType_1 = __importDefault(require(\"../constants/itemType\"));\n\nconst skjemautfyller_core_1 = require(\"../util/skjemautfyller-core\");\n\nconst generateQuestionnaireResponse_1 = require(\"./generateQuestionnaireResponse\");\n\nfunction createNewItem(qItem) {\n  const qrItem = generateQuestionnaireResponse_1.createQuestionnaireResponseItem(qItem);\n  synQuestionnaireResponseItem(qItem, qrItem);\n  return qrItem;\n}\n\nfunction copyItem(qItem, qrItem) {\n  synQuestionnaireResponseItem(qItem, qrItem);\n  return qrItem;\n}\n\nfunction syncQuestionnaireResponse(q, qr) {\n  const qrItemCopy = [];\n  const qrItems = createDictionary(qr.item || []);\n\n  for (const qItem of q.item || []) {\n    const linkId = qItem.linkId;\n\n    if (qrItems[linkId]) {\n      if (hasChanged(qItem, qrItems[linkId])) {\n        qrItemCopy.push(createNewItem(qItem));\n      } else {\n        for (const qrItem of qrItems[linkId]) {\n          qrItemCopy.push(copyItem(qItem, qrItem));\n        }\n      }\n    } else {\n      qrItemCopy.push(createNewItem(qItem));\n    }\n  }\n\n  qr.item = qrItemCopy;\n  return qr;\n}\n\nexports.syncQuestionnaireResponse = syncQuestionnaireResponse;\n\nfunction synQuestionnaireResponseItem(qItem, qrItem) {\n  const qrItemCopy = [];\n  const qrAnswerItemCopy = [];\n  const qrItems = createDictionary(qrItem.item || []);\n  const qrAnswerItems = createDictionary(qrItem.answer && qrItem.answer[0].item ? qrItem.answer[0].item : []);\n\n  for (const subQItem of qItem.item || []) {\n    const linkId = subQItem.linkId;\n\n    if (qrItems[linkId]) {\n      if (hasChanged(subQItem, qrItems[linkId])) {\n        qrItemCopy.push(createNewItem(subQItem));\n      } else {\n        for (const subQrItem of qrItems[linkId]) {\n          qrItemCopy.push(copyItem(subQItem, subQrItem));\n        }\n      }\n    } else if (qrAnswerItems[linkId]) {\n      if (hasChanged(subQItem, qrAnswerItems[linkId])) {\n        qrAnswerItemCopy.push(createNewItem(subQItem));\n      } else {\n        for (const subQrItem of qrAnswerItems[linkId]) {\n          qrAnswerItemCopy.push(copyItem(subQItem, subQrItem));\n        }\n      }\n    } else {\n      const newQrItem = createNewItem(subQItem);\n\n      if (qItem.type == itemType_1.default.GROUP) {\n        qrItemCopy.push(newQrItem);\n      } else {\n        qrAnswerItemCopy.push(newQrItem);\n      }\n    }\n  }\n\n  if (qrItemCopy.length > 0) {\n    qrItem.item = qrItemCopy;\n  } else {\n    delete qrItem.item;\n  }\n\n  if (qrAnswerItemCopy.length > 0) {\n    if (!qrItem.answer) {\n      qrItem.answer = [];\n    }\n\n    if (!qrItem.answer[0]) {\n      qrItem.answer.push({});\n    }\n\n    qrItem.answer[0].item = qrAnswerItemCopy;\n  } else {\n    if (qrItem.answer && qrItem.answer.length > 0) {\n      delete qrItem.answer[0].item;\n    }\n  }\n}\n\nfunction hasChanged(qItem, qrItems) {\n  const qrItemWithAnswer = qrItems.find(it => it.answer && it.answer.some(a => skjemautfyller_core_1.hasAnswer(a)));\n  if (!qrItemWithAnswer || !qrItemWithAnswer.answer) return false;\n  const answer = qrItemWithAnswer.answer.find(it => skjemautfyller_core_1.hasAnswer(it));\n\n  if (!answer) {\n    return false;\n  }\n\n  return !itemTypeMatchesAnswerValue(qItem.type, answer);\n}\n\nfunction itemTypeMatchesAnswerValue(type, answer) {\n  switch (type) {\n    case itemType_1.default.ATTATCHMENT:\n      return skjemautfyller_core_1.hasAttachmentAnswer(answer);\n\n    case itemType_1.default.BOOLEAN:\n      return skjemautfyller_core_1.hasBooleanAnswer(answer);\n\n    case itemType_1.default.CHOICE:\n      return skjemautfyller_core_1.hasCodingAnswer(answer);\n\n    case itemType_1.default.DATE:\n      return skjemautfyller_core_1.hasDateAnswer(answer);\n\n    case itemType_1.default.DATETIME:\n      return skjemautfyller_core_1.hasDateTimeAnswer(answer);\n\n    case itemType_1.default.DECIMAL:\n      return skjemautfyller_core_1.hasDecimalAnswer(answer);\n\n    case itemType_1.default.DISPLAY:\n    case itemType_1.default.GROUP:\n      return false;\n\n    case itemType_1.default.INTEGER:\n      return skjemautfyller_core_1.hasIntegerAnswer(answer);\n\n    case itemType_1.default.OPENCHOICE:\n      return skjemautfyller_core_1.hasCodingAnswer(answer) || skjemautfyller_core_1.hasStringAnswer(answer);\n\n    case itemType_1.default.QUANTITY:\n      return skjemautfyller_core_1.hasQuantityAnswer(answer);\n\n    case itemType_1.default.STRING:\n    case itemType_1.default.TEXT:\n      return skjemautfyller_core_1.hasStringAnswer(answer);\n\n    case itemType_1.default.TIME:\n      return skjemautfyller_core_1.hasTimeAnswer(answer);\n\n    default:\n      return false;\n  }\n}\n\nfunction createDictionary(qrItems) {\n  const dictionary = {};\n\n  for (const item of qrItems) {\n    const linkId = transform(item.linkId);\n\n    if (!dictionary[linkId]) {\n      dictionary[linkId] = [];\n    }\n\n    dictionary[linkId].push(Object.assign(Object.assign({}, item), {\n      linkId: linkId\n    }));\n  }\n\n  return dictionary;\n}\n\nfunction transform(linkId) {\n  return linkId.split('^')[0];\n}","map":null,"metadata":{},"sourceType":"script"}