{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _classCallCheck = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar newValue_1 = require(\"../actions/newValue\");\n\nvar itemcontrol_1 = __importDefault(require(\"../constants/itemcontrol\"));\n\nvar choice_1 = require(\"./choice\");\n\nvar skjemautfyller_core_1 = require(\"./skjemautfyller-core\");\n\nvar ItemAndPath = /*#__PURE__*/_createClass(function ItemAndPath(item, path) {\n  _classCallCheck(this, ItemAndPath);\n\n  this.item = item;\n  this.path = path;\n});\n\nvar ActionRequester = /*#__PURE__*/function () {\n  function ActionRequester(questionnaire, questionnaireResponse) {\n    _classCallCheck(this, ActionRequester);\n\n    this.actions = [];\n    this.questionnaire = questionnaire;\n    this.questionnaireResponse = questionnaireResponse;\n  }\n\n  _createClass(ActionRequester, [{\n    key: \"addIntegerAnswer\",\n    value: function addIntegerAnswer(linkId, value) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var itemAndPath = this.getItemAndPath(linkId, index);\n\n      if (itemAndPath) {\n        this.actions.push(newValue_1.newIntegerValue(itemAndPath.path, value, itemAndPath.item));\n      }\n    }\n  }, {\n    key: \"clearIntegerAnswer\",\n    value: function clearIntegerAnswer(linkId) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.addIntegerAnswer(linkId, Number.NaN, index);\n    }\n  }, {\n    key: \"addDecimalAnswer\",\n    value: function addDecimalAnswer(linkId, value) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var itemAndPath = this.getItemAndPath(linkId, index);\n\n      if (itemAndPath) {\n        this.actions.push(newValue_1.newDecimalValue(itemAndPath.path, value, itemAndPath.item));\n      }\n    }\n  }, {\n    key: \"clearDecimalAnswer\",\n    value: function clearDecimalAnswer(linkId) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.addDecimalAnswer(linkId, Number.NaN, index);\n    }\n  }, {\n    key: \"addChoiceAnswer\",\n    value: function addChoiceAnswer(linkId, value) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var itemAndPath = this.getItemAndPath(linkId, index);\n\n      if (itemAndPath) {\n        this.actions.push(newValue_1.newCodingValue(itemAndPath.path, value, itemAndPath.item, this.isCheckbox(itemAndPath.item)));\n      }\n    }\n  }, {\n    key: \"removeChoiceAnswer\",\n    value: function removeChoiceAnswer(linkId, value) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var itemAndPath = this.getItemAndPath(linkId, index);\n\n      if (itemAndPath && this.isCheckbox(itemAndPath.item)) {\n        this.actions.push(newValue_1.removeCodingValue(itemAndPath.path, value, itemAndPath.item));\n      }\n    }\n  }, {\n    key: \"addOpenChoiceAnswer\",\n    value: function addOpenChoiceAnswer(linkId, value) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var itemAndPath = this.getItemAndPath(linkId, index);\n\n      if (itemAndPath) {\n        if (typeof value === 'string') {\n          this.actions.push(newValue_1.newCodingStringValue(itemAndPath.path, value, itemAndPath.item));\n        } else {\n          this.actions.push(newValue_1.newCodingValue(itemAndPath.path, value, itemAndPath.item, this.isCheckbox(itemAndPath.item)));\n        }\n      }\n    }\n  }, {\n    key: \"removeOpenChoiceAnswer\",\n    value: function removeOpenChoiceAnswer(linkId, value) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var itemAndPath = this.getItemAndPath(linkId, index);\n\n      if (itemAndPath) {\n        if (typeof value === 'string') {\n          this.actions.push(newValue_1.removeCodingStringValue(itemAndPath.path, itemAndPath.item));\n        } else if (this.isCheckbox(itemAndPath.item)) {\n          this.actions.push(newValue_1.removeCodingValue(itemAndPath.path, value, itemAndPath.item));\n        }\n      }\n    }\n  }, {\n    key: \"addBooleanAnswer\",\n    value: function addBooleanAnswer(linkId, value) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var itemAndPath = this.getItemAndPath(linkId, index);\n\n      if (itemAndPath) {\n        this.actions.push(newValue_1.newBooleanValue(itemAndPath.path, value, itemAndPath.item));\n      }\n    }\n  }, {\n    key: \"clearBooleanAnswer\",\n    value: function clearBooleanAnswer(linkId) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.addBooleanAnswer(linkId, false, index);\n    }\n  }, {\n    key: \"addDateAnswer\",\n    value: function addDateAnswer(linkId, value) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var itemAndPath = this.getItemAndPath(linkId, index);\n\n      if (itemAndPath) {\n        this.actions.push(newValue_1.newDateValue(itemAndPath.path, value, itemAndPath.item));\n      }\n    }\n  }, {\n    key: \"clearDateAnswer\",\n    value: function clearDateAnswer(linkId) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.addDateAnswer(linkId, '', index);\n    }\n  }, {\n    key: \"addTimeAnswer\",\n    value: function addTimeAnswer(linkId, value) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var itemAndPath = this.getItemAndPath(linkId, index);\n\n      if (itemAndPath) {\n        this.actions.push(newValue_1.newTimeValue(itemAndPath.path, value, itemAndPath.item));\n      }\n    }\n  }, {\n    key: \"clearTimeAnswer\",\n    value: function clearTimeAnswer(linkId) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.addTimeAnswer(linkId, '', index);\n    }\n  }, {\n    key: \"addDateTimeAnswer\",\n    value: function addDateTimeAnswer(linkId, value) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var itemAndPath = this.getItemAndPath(linkId, index);\n\n      if (itemAndPath) {\n        this.actions.push(newValue_1.newDateTimeValue(itemAndPath.path, value, itemAndPath.item));\n      }\n    }\n  }, {\n    key: \"clearDateTimeAnswer\",\n    value: function clearDateTimeAnswer(linkId) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.addDateTimeAnswer(linkId, '', index);\n    }\n  }, {\n    key: \"addQuantityAnswer\",\n    value: function addQuantityAnswer(linkId, value) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var itemAndPath = this.getItemAndPath(linkId, index);\n\n      if (itemAndPath) {\n        this.actions.push(newValue_1.newQuantityValue(itemAndPath.path, value, itemAndPath.item));\n      }\n    }\n  }, {\n    key: \"clearQuantityAnswer\",\n    value: function clearQuantityAnswer(linkId) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.addQuantityAnswer(linkId, {}, index);\n    }\n  }, {\n    key: \"addStringAnswer\",\n    value: function addStringAnswer(linkId, value) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var itemAndPath = this.getItemAndPath(linkId, index);\n\n      if (itemAndPath) {\n        this.actions.push(newValue_1.newStringValue(itemAndPath.path, value, itemAndPath.item));\n      }\n    }\n  }, {\n    key: \"clearStringAnswer\",\n    value: function clearStringAnswer(linkId) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.addStringAnswer(linkId, '', index);\n    }\n  }, {\n    key: \"getActions\",\n    value: function getActions() {\n      return this.actions;\n    }\n  }, {\n    key: \"getItemAndPath\",\n    value: function getItemAndPath(linkId, index) {\n      var item = skjemautfyller_core_1.getQuestionnaireDefinitionItem(linkId, this.questionnaire.item);\n      var itemsAndPaths = skjemautfyller_core_1.getResponseItemAndPathWithLinkId(linkId, this.questionnaireResponse);\n\n      if (!item || itemsAndPaths.length - 1 < index || !itemsAndPaths[index].path) {\n        return;\n      }\n\n      return new ItemAndPath(item, itemsAndPaths[index].path);\n    }\n  }, {\n    key: \"isCheckbox\",\n    value: function isCheckbox(item) {\n      return choice_1.getItemControlValue(item) === itemcontrol_1.default.CHECKBOX;\n    }\n  }]);\n\n  return ActionRequester;\n}();\n\nexports.ActionRequester = ActionRequester;","map":null,"metadata":{},"sourceType":"script"}