{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport CheckCircleFilled from \"@ant-design/icons/es/icons/CheckCircleFilled\";\nimport CloseCircleFilled from \"@ant-design/icons/es/icons/CloseCircleFilled\";\nimport ExclamationCircleFilled from \"@ant-design/icons/es/icons/ExclamationCircleFilled\";\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport classNames from 'classnames';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport isVisible from \"rc-util/es/Dom/isVisible\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { Row } from '../../grid';\nimport FormItemInput from '../FormItemInput';\nimport FormItemLabel from '../FormItemLabel';\nimport { FormContext, FormItemInputContext, NoStyleItemContext } from '../context';\nimport useDebounce from '../hooks/useDebounce';\nconst iconMap = {\n  success: CheckCircleFilled,\n  warning: ExclamationCircleFilled,\n  error: CloseCircleFilled,\n  validating: LoadingOutlined\n};\nexport default function ItemHolder(props) {\n  const {\n    prefixCls,\n    className,\n    rootClassName,\n    style,\n    help,\n    errors,\n    warnings,\n    validateStatus,\n    meta,\n    hasFeedback,\n    hidden,\n    children,\n    fieldId,\n    required,\n    isRequired,\n    onSubItemMetaChange\n  } = props,\n        restProps = __rest(props, [\"prefixCls\", \"className\", \"rootClassName\", \"style\", \"help\", \"errors\", \"warnings\", \"validateStatus\", \"meta\", \"hasFeedback\", \"hidden\", \"children\", \"fieldId\", \"required\", \"isRequired\", \"onSubItemMetaChange\"]);\n\n  const itemPrefixCls = `${prefixCls}-item`;\n  const {\n    requiredMark\n  } = React.useContext(FormContext); // ======================== Margin ========================\n\n  const itemRef = React.useRef(null);\n  const debounceErrors = useDebounce(errors);\n  const debounceWarnings = useDebounce(warnings);\n  const hasHelp = help !== undefined && help !== null;\n  const hasError = !!(hasHelp || errors.length || warnings.length);\n  const isOnScreen = !!itemRef.current && isVisible(itemRef.current);\n  const [marginBottom, setMarginBottom] = React.useState(null);\n  useLayoutEffect(() => {\n    if (hasError && itemRef.current) {\n      // The element must be part of the DOMTree to use getComputedStyle\n      // https://stackoverflow.com/questions/35360711/getcomputedstyle-returns-a-cssstyledeclaration-but-all-properties-are-empty-on-a\n      const itemStyle = getComputedStyle(itemRef.current);\n      setMarginBottom(parseInt(itemStyle.marginBottom, 10));\n    }\n  }, [hasError, isOnScreen]);\n\n  const onErrorVisibleChanged = nextVisible => {\n    if (!nextVisible) {\n      setMarginBottom(null);\n    }\n  }; // ======================== Status ========================\n\n\n  const getValidateState = function () {\n    let isDebounce = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let status = '';\n\n    const _errors = isDebounce ? debounceErrors : meta.errors;\n\n    const _warnings = isDebounce ? debounceWarnings : meta.warnings;\n\n    if (validateStatus !== undefined) {\n      status = validateStatus;\n    } else if (meta.validating) {\n      status = 'validating';\n    } else if (_errors.length) {\n      status = 'error';\n    } else if (_warnings.length) {\n      status = 'warning';\n    } else if (meta.touched || hasFeedback && meta.validated) {\n      // success feedback should display when pass hasFeedback prop and current value is valid value\n      status = 'success';\n    }\n\n    return status;\n  };\n\n  const mergedValidateStatus = getValidateState();\n  const formItemStatusContext = React.useMemo(() => {\n    let feedbackIcon;\n\n    if (hasFeedback) {\n      const IconNode = mergedValidateStatus && iconMap[mergedValidateStatus];\n      feedbackIcon = IconNode ? /*#__PURE__*/React.createElement(\"span\", {\n        className: classNames(`${itemPrefixCls}-feedback-icon`, `${itemPrefixCls}-feedback-icon-${mergedValidateStatus}`)\n      }, /*#__PURE__*/React.createElement(IconNode, null)) : null;\n    }\n\n    return {\n      status: mergedValidateStatus,\n      errors,\n      warnings,\n      hasFeedback,\n      feedbackIcon,\n      isFormItemInput: true\n    };\n  }, [mergedValidateStatus, hasFeedback]); // ======================== Render ========================\n\n  const itemClassName = classNames(itemPrefixCls, className, rootClassName, {\n    [`${itemPrefixCls}-with-help`]: hasHelp || debounceErrors.length || debounceWarnings.length,\n    // Status\n    [`${itemPrefixCls}-has-feedback`]: mergedValidateStatus && hasFeedback,\n    [`${itemPrefixCls}-has-success`]: mergedValidateStatus === 'success',\n    [`${itemPrefixCls}-has-warning`]: mergedValidateStatus === 'warning',\n    [`${itemPrefixCls}-has-error`]: mergedValidateStatus === 'error',\n    [`${itemPrefixCls}-is-validating`]: mergedValidateStatus === 'validating',\n    [`${itemPrefixCls}-hidden`]: hidden\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: itemClassName,\n    style: style,\n    ref: itemRef\n  }, /*#__PURE__*/React.createElement(Row, Object.assign({\n    className: `${itemPrefixCls}-row`\n  }, omit(restProps, ['_internalItemRender', 'colon', 'dependencies', 'extra', 'fieldKey', 'getValueFromEvent', 'getValueProps', 'htmlFor', 'id', 'initialValue', 'isListField', 'label', 'labelAlign', 'labelCol', 'labelWrap', 'messageVariables', 'name', 'normalize', 'noStyle', 'preserve', 'requiredMark', 'rules', 'shouldUpdate', 'trigger', 'tooltip', 'validateFirst', 'validateTrigger', 'valuePropName', 'wrapperCol'])), /*#__PURE__*/React.createElement(FormItemLabel, Object.assign({\n    htmlFor: fieldId\n  }, props, {\n    requiredMark: requiredMark,\n    required: required !== null && required !== void 0 ? required : isRequired,\n    prefixCls: prefixCls\n  })), /*#__PURE__*/React.createElement(FormItemInput, Object.assign({}, props, meta, {\n    errors: debounceErrors,\n    warnings: debounceWarnings,\n    prefixCls: prefixCls,\n    status: mergedValidateStatus,\n    help: help,\n    marginBottom: marginBottom,\n    onErrorVisibleChanged: onErrorVisibleChanged\n  }), /*#__PURE__*/React.createElement(NoStyleItemContext.Provider, {\n    value: onSubItemMetaChange\n  }, /*#__PURE__*/React.createElement(FormItemInputContext.Provider, {\n    value: formItemStatusContext\n  }, children)))), !!marginBottom && /*#__PURE__*/React.createElement(\"div\", {\n    className: `${itemPrefixCls}-margin-offset`,\n    style: {\n      marginBottom: -marginBottom\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}