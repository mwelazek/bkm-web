{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport * as uuid from 'uuid';\nimport { theme } from '@helsenorge/designsystem-react';\nimport designsystemtypography from '@helsenorge/designsystem-react/scss/typography.module.scss';\nimport Close from '../../icons/Close';\nimport AlertInfo from '../../icons/AlertInfo';\nimport AlertWarning from '../../icons/AlertWarning';\nimport AlertError from '../../icons/AlertError';\nimport AlertSuccess from '../../icons/AlertSuccess';\nimport { FunctionButton } from '../buttons/function-button';\nimport Description from './description';\nimport './styles.scss';\nconst assistiveDelay = 300;\nexport default class MessageBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onExpanderClick = e => {\n      e.preventDefault();\n      const expanded = this.state.expanded;\n      this.setState({\n        expanded: !expanded\n      });\n    };\n\n    const hiddenAssistive = this.props.type === 'error' || this.isClientServiceError();\n\n    if (hiddenAssistive) {\n      this.hideForAssistive();\n    }\n\n    this.messageBoxTitle = React.createRef();\n    this.state = {\n      expanded: false,\n      hiddenAssistive,\n      headerId: uuid.v4(),\n      type: null\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.focus && this.messageBoxTitle.current) {\n      this.messageBoxTitle.current.focus();\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      type\n    } = nextProps;\n\n    if (type === 'error' && type !== prevState.type) {\n      return Object.assign(Object.assign({}, prevState), {\n        type,\n        hiddenAssistive: true\n      });\n    } else {\n      return Object.assign(Object.assign({}, prevState), {\n        type\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.type !== 'error' && this.state.type === 'error') {\n      this.hideForAssistive();\n    }\n  }\n\n  setupClientServiceFault(title, description) {\n    if (title && description) {\n      return null;\n    }\n\n    let fault = {\n      Title: '',\n      Body: ''\n    };\n    const clientFault = this.props.clientServiceFault;\n\n    if (clientFault) {\n      if (clientFault.ErrorMessage) {\n        fault = clientFault.ErrorMessage;\n      } else if (clientFault.WarningMessage) {\n        fault = clientFault.WarningMessage;\n      } else if (clientFault.InformationMessage) {\n        fault = clientFault.InformationMessage;\n      }\n    }\n\n    return fault;\n  }\n\n  hideForAssistive() {\n    setTimeout(() => {\n      this.setState({\n        hiddenAssistive: false\n      });\n    }, assistiveDelay);\n  }\n\n  isMessageBoxTypePropsSet() {\n    return this.props.type === 'info' || this.props.type === 'alert' || this.props.type === 'error';\n  }\n\n  isClientServiceError() {\n    if (this.isMessageBoxTypePropsSet()) {\n      return false;\n    }\n\n    if (!this.props.clientServiceFault) {\n      return false;\n    }\n\n    if (this.props.clientServiceFault.ErrorMessage) {\n      return true;\n    }\n\n    return !(!this.props.clientServiceFault || !this.props.clientServiceFault.ErrorMessage);\n  }\n\n  isClientServiceWarn() {\n    if (this.isMessageBoxTypePropsSet()) {\n      return false;\n    }\n\n    if (!this.props.clientServiceFault) {\n      return false;\n    }\n\n    if (this.props.clientServiceFault.WarningMessage) {\n      return true;\n    }\n\n    return !(!this.props.clientServiceFault || !this.props.clientServiceFault.WarningMessage);\n  }\n\n  isClientServiceInfo() {\n    if (this.isMessageBoxTypePropsSet()) {\n      return false;\n    }\n\n    if (!this.props.clientServiceFault) {\n      return false;\n    }\n\n    if (this.props.clientServiceFault.InformationMessage) {\n      return true;\n    }\n\n    return !(!this.props.clientServiceFault || !this.props.clientServiceFault.InformationMessage);\n  }\n\n  insertHelsenorgeUrl(tekst) {\n    return tekst;\n  }\n\n  render() {\n    const isInfo = this.props.type === 'info' || this.isClientServiceInfo();\n    const isAlert = this.props.type === 'alert' || this.isClientServiceWarn();\n    const isError = this.props.type === 'error' || this.isClientServiceError();\n    const isSuccess = this.props.type === 'success';\n    const isThirdParty = this.props.type === 'thirdparty';\n    const tabIndex = this.props.noTabIndex ? undefined : -1;\n    let title;\n\n    if (!!this.props.title) {\n      title = React.createElement(\"strong\", {\n        className: \"atom_messagebox__heading\",\n        id: this.props.hasUniqueId ? this.state.headerId : undefined,\n        tabIndex: this.props.focus ? 0 : tabIndex,\n        ref: this.messageBoxTitle,\n        dangerouslySetInnerHTML: {\n          __html: this.insertHelsenorgeUrl(this.props.title)\n        }\n      });\n    }\n\n    let description;\n\n    if (!!this.props.description) {\n      description = React.createElement(Description, {\n        description: this.props.description,\n        isThirdParty: isThirdParty,\n        maxlength: this.props.maxlength,\n        expanded: this.state.expanded,\n        readMoreButtonText: this.props.readMoreButtonText,\n        onExpanderClick: this.onExpanderClick\n      });\n    }\n\n    let plea;\n\n    if (!!this.props.plea) {\n      plea = React.createElement(\"p\", null, React.createElement(\"strong\", null, this.props.plea));\n    }\n\n    let timestamp;\n\n    if (!!this.props.timestamp) {\n      timestamp = React.createElement(\"p\", {\n        className: \"errortimestamp\"\n      }, this.props.timestamp);\n    }\n\n    if (this.props.clientServiceFault) {\n      const fault = this.setupClientServiceFault(title, description);\n\n      if (fault && !title) {\n        const tabIndex = this.props.noTabIndex ? undefined : -1;\n        title = React.createElement(\"strong\", {\n          className: \"atom_messagebox__heading\",\n          id: this.props.hasUniqueId ? this.state.headerId : undefined,\n          tabIndex: this.props.focus ? 0 : tabIndex,\n          ref: this.messageBoxTitle,\n          dangerouslySetInnerHTML: {\n            __html: fault.Title\n          }\n        });\n      }\n\n      if (fault && !this.props.description) {\n        description = React.createElement(\"p\", {\n          className: `atom_messagebox__description ${designsystemtypography['anchorlink-wrapper']}`,\n          dangerouslySetInnerHTML: {\n            __html: fault.Body\n          }\n        });\n      }\n    }\n\n    let closeButton;\n\n    if (this.props.onClose) {\n      closeButton = React.createElement(FunctionButton, {\n        secondary: true,\n        className: \"atom_functionbutton--close\",\n        svgIcon: React.createElement(Close, null),\n        onClick: this.props.onClose,\n        ariaLabel: \"Lukk\"\n      });\n    }\n\n    let svgIcon = React.createElement(AlertInfo, {\n      color: theme.palette.kiwi900,\n      className: \"atom_messagebox__icon\"\n    });\n\n    if (isError) {\n      svgIcon = React.createElement(AlertError, {\n        color: theme.palette.cherry600,\n        className: \"atom_messagebox__icon\"\n      });\n    } else if (isSuccess) {\n      svgIcon = React.createElement(AlertSuccess, {\n        className: \"atom_messagebox__icon\"\n      });\n    } else if (isAlert) {\n      svgIcon = React.createElement(AlertWarning, {\n        className: \"atom_messagebox__icon\"\n      });\n    }\n\n    const classes = classNames({\n      lvl1: !!description,\n      lvl2: !description,\n      error: isError,\n      alert: isAlert,\n      info: isInfo,\n      success: isSuccess,\n      thirdparty: isThirdParty,\n      'with-expander': isThirdParty && this.props.maxlength !== undefined && this.props.maxlength > 0,\n      'has-full-bleed': this.props.fullBleed,\n      'has-close-button': !!this.props.onClose\n    }, this.props.className);\n    const assistive = {};\n\n    if (this.props.role) {\n      assistive.role = this.props.role;\n    } else if (isError) {\n      assistive.role = 'alert';\n      assistive['aria-atomic'] = 'true';\n    }\n\n    const messageboxContent = this.props.messageboxContent;\n    const hiddenAssistive = this.state.hiddenAssistive ? null : React.createElement(\"span\", null);\n    const contentClasses = classNames({\n      content: true,\n      'content--full-bleed': this.props.fullBleed,\n      open: this.state.expanded\n    });\n    const content = React.createElement(\"div\", null, title, description, plea, timestamp, messageboxContent, closeButton, hiddenAssistive);\n    return React.createElement(\"div\", Object.assign({\n      id: this.props.id,\n      className: `atom_messagebox ${classes}`,\n      \"data-testid\": this.props.testId\n    }, assistive), React.createElement(\"div\", {\n      className: \"content-wrapper\"\n    }, !this.props.fullBleed && svgIcon, React.createElement(\"div\", {\n      className: contentClasses,\n      role: \"region\"\n    }, this.props.fullBleed && svgIcon, content)), this.props.children ? React.createElement(\"div\", {\n      className: \"children-wrapper\"\n    }, this.props.children) : false);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}