{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommodityForm = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _antd = require(\"antd\");\n\nvar _constants = require(\"../../constants\");\n\nvar _notifications = require(\"@opensrp/notifications\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar _reactRouter = require(\"react-router\");\n\nvar _utils = require(\"./utils\");\n\nvar _mls = require(\"../../mls\");\n\nvar FormItem = _antd.Form.Item;\nvar defaultProps = {\n  initialValues: {},\n  disabled: []\n};\n\nvar CommodityForm = function CommodityForm(props) {\n  var fhirBaseUrl = props.fhirBaseUrl,\n      initialValues = props.initialValues,\n      disabled = props.disabled,\n      cancelUrl = props.cancelUrl,\n      successUrl = props.successUrl,\n      postSuccess = props.postSuccess;\n  var queryClient = (0, _reactQuery.useQueryClient)();\n  var history = (0, _reactRouter.useHistory)();\n\n  var _useTranslation = (0, _mls.useTranslation)(),\n      t = _useTranslation.t;\n\n  var goTo = function goTo() {\n    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#';\n    return history.push(url);\n  };\n\n  var _useMutation = (0, _reactQuery.useMutation)(function (values) {\n    var payload = (0, _utils.generateGroupPayload)(values, initialValues);\n    return (0, _utils.postPutGroup)(fhirBaseUrl, payload);\n  }, {\n    onError: function onError(err) {\n      (0, _notifications.sendErrorNotification)(err.message);\n    },\n    onSuccess: function () {\n      var _onSuccess = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee(createdGroup) {\n        var isEdit;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                (0, _notifications.sendSuccessNotification)(t('Commodity updated successfully'));\n                isEdit = !!initialValues.id;\n                _context.next = 4;\n                return postSuccess === null || postSuccess === void 0 ? void 0 : postSuccess(createdGroup, isEdit)[\"catch\"](function (err) {\n                  (0, _notifications.sendErrorNotification)(err.message);\n                });\n\n              case 4:\n                queryClient.refetchQueries([_constants.groupResourceType])[\"catch\"](function () {\n                  (0, _notifications.sendInfoNotification)(t('Failed to refresh data, please refresh the page'));\n                });\n                goTo(successUrl);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onSuccess(_x) {\n        return _onSuccess.apply(this, arguments);\n      }\n\n      return onSuccess;\n    }()\n  }),\n      mutate = _useMutation.mutate,\n      isLoading = _useMutation.isLoading;\n\n  var statusOptions = [{\n    label: t('Active'),\n    value: true\n  }, {\n    label: t('Disabled'),\n    value: false\n  }];\n  var unitsOfMEasureOptions = (0, _utils.getUnitOfMeasureOptions)();\n  var typeOptions = (0, _utils.getGroupTypeOptions)();\n  var validationRules = (0, _utils.validationRulesFactory)(t);\n  return _react[\"default\"].createElement(_antd.Form, (0, _extends2[\"default\"])({\n    requiredMark: false\n  }, _reactUtils.formItemLayout, {\n    onFinish: function onFinish(values) {\n      mutate(values);\n    },\n    initialValues: initialValues\n  }), _react[\"default\"].createElement(FormItem, {\n    hidden: true,\n    id: \"id\",\n    name: _constants.id,\n    label: t('Commodity Id')\n  }, _react[\"default\"].createElement(_antd.Input, {\n    placeholder: t('(Auto generated)'),\n    disabled: true\n  })), _react[\"default\"].createElement(FormItem, {\n    hidden: true,\n    id: \"identifier\",\n    name: _constants.identifier,\n    label: t('Identifier')\n  }, _react[\"default\"].createElement(_antd.Input, {\n    placeholder: t('(Auto generated)'),\n    disabled: true\n  })), _react[\"default\"].createElement(FormItem, {\n    id: _constants.name,\n    name: _constants.name,\n    rules: validationRules[_constants.name],\n    label: t('Enter Commodity name')\n  }, _react[\"default\"].createElement(_antd.Input, {\n    disabled: disabled.includes(_constants.name),\n    placeholder: t('Name')\n  })), _react[\"default\"].createElement(FormItem, {\n    id: _constants.active,\n    rules: validationRules[_constants.active],\n    name: _constants.active,\n    label: t('Select Commodity status')\n  }, _react[\"default\"].createElement(_antd.Radio.Group, {\n    disabled: disabled.includes(_constants.active),\n    options: statusOptions\n  })), _react[\"default\"].createElement(FormItem, {\n    id: _constants.type,\n    name: _constants.type,\n    rules: validationRules[_constants.type],\n    label: t('Select Commodity Type')\n  }, _react[\"default\"].createElement(_antd.Select, {\n    disabled: disabled.includes(_constants.type),\n    placeholder: t('Select Commodity type'),\n    options: typeOptions,\n    showSearch: true,\n    filterOption: _utils.groupSelectfilterFunction\n  })), _react[\"default\"].createElement(FormItem, {\n    id: _constants.unitOfMeasure,\n    name: _constants.unitOfMeasure,\n    rules: validationRules[_constants.unitOfMeasure],\n    label: t('Select the unit of measure')\n  }, _react[\"default\"].createElement(_antd.Select, {\n    disabled: disabled.includes(_constants.unitOfMeasure),\n    placeholder: t('Select the unit of measure'),\n    options: unitsOfMEasureOptions,\n    showSearch: true,\n    filterOption: _utils.groupSelectfilterFunction\n  })), _react[\"default\"].createElement(FormItem, _reactUtils.tailLayout, _react[\"default\"].createElement(_antd.Space, null, _react[\"default\"].createElement(_antd.Button, {\n    type: \"primary\",\n    id: \"submit-button\",\n    disabled: isLoading,\n    htmlType: \"submit\"\n  }, isLoading ? t('Saving') : t('save')), _react[\"default\"].createElement(_antd.Button, {\n    id: \"cancel-button\",\n    onClick: function onClick() {\n      goTo(cancelUrl);\n    }\n  }, t('Cancel')))));\n};\n\nexports.CommodityForm = CommodityForm;\nCommodityForm.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"script"}