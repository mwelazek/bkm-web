{"ast":null,"code":"/**\n * Returnerer dagens dato i yyyy--mm-dd format\n */\nexport var todaysDate = function todaysDate() {\n  var today = new Date();\n  var dd = String(today.getDate());\n  var mm = String(today.getMonth() + 1);\n  var yyyy = today.getFullYear();\n  return yyyy + '-' + mm + '-' + dd;\n};\n/**\n * Returnerer dato i Javascript Date format\n * @param date i Javascript Date format eller ISO8601\n */\n\nexport var toDate = function toDate(date) {\n  var dateObject;\n\n  if (date instanceof Date) {\n    dateObject = new Date(date.getTime());\n  } else {\n    dateObject = new Date(date);\n  }\n\n  return dateObject;\n};\n/**\n * Returnerer max offset mellom januar og juli\n * @param today dagens dato i Javascript Date format\n */\n\nexport var standardTimezoneOffset = function standardTimezoneOffset(today) {\n  var jan = new Date(today.getFullYear(), 0, 1);\n  var jul = new Date(today.getFullYear(), 6, 1);\n  return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n};\n/**\n * Returnerer om dagen i dag er i daglyssparingsperiode\n * @param today dagens dato i Javascript Date format\n */\n\nexport var isDaylightSavingTime = function isDaylightSavingTime(today) {\n  return today.getTimezoneOffset() < standardTimezoneOffset(today);\n};\n/**\n * Returnerer '+02:00' eller '+01:00' avhengig av avstanden med UTC tid\n */\n\nexport var serverOffsetFromUTC = function serverOffsetFromUTC() {\n  var now = new Date();\n  return isDaylightSavingTime(now) ? '+02:00' : '+01:00';\n};\n/**\n * Returnerer number avhengig av avstanden med UTC tid\n * @param date  dato i Javascript Date format - default er new Date\n */\n\nexport var serverTimezoneOffset = function serverTimezoneOffset() {\n  var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  return isDaylightSavingTime(date) ? -120 * 60000 : -60 * 60000;\n};\n/**\n * Returnerer tidsonen avhengig av offset til UTC\n * @param local dagens dato i ISO8601 format\n */\n\nexport var addServerTimezone = function addServerTimezone(local) {\n  if (local.indexOf('+') !== -1 && local.indexOf('+') !== -1) {\n    return local;\n  }\n\n  return local + serverOffsetFromUTC();\n};\n/**\n * Returnerer riktig dato for serveren i Javascript Date format\n * @param date i Javascript Date format eller ISO8601\n */\n\nexport var toServerDate = function toServerDate(date) {\n  var dateObject;\n\n  if (date instanceof Date) {\n    dateObject = new Date(date.getTime());\n  } else {\n    dateObject = new Date(addServerTimezone(date));\n  }\n\n  return dateObject;\n};\n/**\n * Returnerer dato til ISO format\n * @param date i Javascript Date format\n */\n\nexport var toLocalISOString = function toLocalISOString(date) {\n  var adjusted = new Date(date).getTime() - serverTimezoneOffset();\n  var isoDate = new Date(adjusted).toISOString();\n  return isoDate.substring(0, isoDate.lastIndexOf('.'));\n};\n/**\n * Returnerer dato i ISO format med riktig tillegg\n * @param target i ISO format\n * @param originalStart i ISO format\n * @param originalStop i ISO format\n */\n\nexport var addDifference = function addDifference(target, originalStart, originalStop) {\n  var diff = new Date(originalStop).getTime() - new Date(originalStart).getTime();\n  var end = new Date(addServerTimezone(target)).getTime() + diff;\n  var theEnd = new Date(end);\n  return toLocalISOString(theEnd);\n};\n/**\n * Returnerer måned i en string\n * @param monthNumber tall til ønsket måned (array start med 0)\n * @param resources objeckt med strenger { monthNameJanuary: '', monthNameFebruary: '', ...}\n */\n\nexport var getMonthNameFromMonthNumber = function getMonthNameFromMonthNumber(monthNumber, resources) {\n  var monthName;\n\n  switch (monthNumber) {\n    case 0:\n      monthName = resources.monthNameJanuary;\n      break;\n\n    case 1:\n      monthName = resources.monthNameFebruary;\n      break;\n\n    case 2:\n      monthName = resources.monthNameMarch;\n      break;\n\n    case 3:\n      monthName = resources.monthNameApril;\n      break;\n\n    case 4:\n      monthName = resources.monthNameMay;\n      break;\n\n    case 5:\n      monthName = resources.monthNameJune;\n      break;\n\n    case 6:\n      monthName = resources.monthNameJuly;\n      break;\n\n    case 7:\n      monthName = resources.monthNameAugust;\n      break;\n\n    case 8:\n      monthName = resources.monthNameSeptember;\n      break;\n\n    case 9:\n      monthName = resources.monthNameOctober;\n      break;\n\n    case 10:\n      monthName = resources.monthNameNovember;\n      break;\n\n    case 11:\n      monthName = resources.monthNameDecember;\n      break;\n\n    default:\n      monthName = '';\n  }\n\n  return monthName ? monthName.toLowerCase() : '';\n};\n/**\n * Returnerer måned i en string\n * @param date dato i Javascript Date format\n * @param resources objeckt med strenger { monthNameJanuary: '', monthNameFebruary: '', ...}\n */\n\nexport var getMonthName = function getMonthName(date, resources) {\n  var month = date.getMonth();\n  return getMonthNameFromMonthNumber(month, resources);\n};\n/**\n * Returnerer dato med måned i en string (eks.: 13. april 2020)\n * @param dateString dato i string format\n * @param resources objeckt med strenger { monthNameJanuary: '', monthNameFebruary: '', ...}\n */\n\nexport var getFormattedDateString = function getFormattedDateString(dateString, resources) {\n  if (dateString === null || dateString === undefined || dateString === '') {\n    return null;\n  }\n\n  var date = new Date(dateString);\n  var monthName = getMonthName(date, resources);\n  return date.getDate() + '. ' + monthName + ' ' + date.getFullYear();\n};\n\nvar padStr = function padStr(index) {\n  return index < 10 ? \"0\".concat(index) : \"\".concat(index);\n};\n/**\n * Returnerer full dato string (eks.: 13. april 2020)\n * @param dateString dato i Javascript Dato format, string eller ISO\n * @param resources objeckt med strenger { monthNameJanuary: '', monthNameFebruary: '', ...}\n */\n\n\nexport var dateToString = function dateToString(date, resources) {\n  var dateObject = toDate(date);\n  var month = dateObject.getMonth();\n  var monthName = getMonthNameFromMonthNumber(month, resources);\n  return \"\".concat(padStr(dateObject.getDate()), \". \").concat(monthName, \" \").concat(dateObject.getFullYear());\n};\n/**\n * Returnerer full time string (00:00)\n * @param date dato i Javascript Dato format\n */\n\nexport var timeToString = function timeToString(date) {\n  return \"\".concat(padStr(date.getHours()), \":\").concat(padStr(date.getMinutes()));\n};\n/**\n * Returnerer timer (12) fra en timeString (12:00)\n * @param timeString string som splittes på separatoren\n * @param sparator string som brukes til å splitte timeString\n */\n\nexport var getHoursFromTimeString = function getHoursFromTimeString(timeString, separator) {\n  if (!timeString || timeString === 'undefined') {\n    return '';\n  }\n\n  return timeString.split(separator)[0];\n};\n/**\n * Returnerer timinuttermer (52) på en timeString (12:52)\n * @param timeString string som splittes på separatoren\n * @param sparator string som brukes til å splitte timeString\n */\n\nexport var getMinutesFromTimeString = function getMinutesFromTimeString(timeString, separator) {\n  if (!timeString || timeString === 'undefined') {\n    return '';\n  }\n\n  return timeString.split(separator)[1];\n}; //////////////// To-DO: MANGLENEDE TESTER ETTER DET PUNKTET\n\n/**\n * Returnerer true hvis datoen er før i dag\n * @param time ISO eller JS date\n */\n\nexport var beforeToday = function beforeToday(time) {\n  var input = toDate(time);\n  var today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return input.getTime() < today.getTime();\n};\n/**\n * Returnerer true hvis datoen er før nå\n * @param time ISO eller JS date\n */\n\nexport var beforeNow = function beforeNow(time) {\n  var input = toServerDate(time);\n  var today = new Date();\n  return input.getTime() < today.getTime();\n};\n/**\n * Returnerer true hvis datoen er etter i dag\n * @param time ISO eller JS date\n */\n\nexport var afterToday = function afterToday(time) {\n  var input = toDate(time);\n  var today = new Date();\n  var tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);\n  tomorrow.setHours(0, 0, 0, 0);\n  return input.getTime() > tomorrow.getTime();\n};\n/**\n * Returnerer true hvis datoen er i dag\n * @param time ISO eller JS date\n */\n\nexport var isToday = function isToday(time) {\n  var input = toDate(time);\n  var today = new Date();\n  today.setHours(0, 0, 0, 0);\n  var compare = input;\n  compare.setHours(0, 0, 0, 0);\n  return compare.getTime() === today.getTime();\n};\n/**\n * Returnerer true hvis datoen er tidligere i dag\n * @param time ISO eller JS date\n */\n\nexport var earlierToday = function earlierToday(time) {\n  return isToday(time) && beforeNow(time);\n};\n/**\n * Returnerer true hvis dato a er før dato b\n * @param a ISO eller JS date date som skal sammenlignes\n * @param b ISO eller JS date date som skal sammenlignes\n */\n\nexport var isBefore = function isBefore(a, b) {\n  var earlier = toDate(a);\n  var later = toDate(b);\n  return earlier.getTime() < later.getTime();\n};","map":null,"metadata":{},"sourceType":"module"}