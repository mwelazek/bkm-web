{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport jssGlobal from 'jss-plugin-global';\nimport { create as createJss } from 'jss';\nimport { log } from '@helsenorge/core-utils/logger';\nimport aria from '@helsenorge/core-utils/aria-hidden';\nimport RenderToBody from '@helsenorge/core-utils/hoc/render-to-body';\nimport keyCode from '@helsenorge/core-utils/constants/key-code';\nimport { handleIOSSafariUA } from '@helsenorge/core-utils/user-agents-utils';\nimport TrapFocus from '@helsenorge/core-utils/trapfocus';\nimport Close from '../../icons/Close';\nimport Alert from '../../icons/Alert';\nimport { ActionButton } from '../../atoms/buttons/action-button';\nimport { FunctionButton } from '../../atoms/buttons/function-button';\nimport toolkitstyles from './styles.module.scss';\nimport './styles.scss';\nconst lightboxes = [];\nlet lightboxCount = 0;\nconst jss = createJss({\n  plugins: [jssGlobal()]\n});\nconst printSheet = jss.createStyleSheet({\n  '@global body > *:not(.toolkit-lightbox)': {\n    display: 'none'\n  }\n}, {\n  media: 'print'\n});\nexport class Lightbox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.close = evt => {\n      if (evt) {\n        evt.stopPropagation();\n        evt.nativeEvent && evt.nativeEvent.stopImmediatePropagation();\n      }\n\n      if (this.props.onClose) {\n        this.props.onClose();\n      }\n    };\n\n    this.addPreventScrollToParentLightbox = () => {\n      if (this.containerRef.current) {\n        let parent = this.containerRef.current.parentElement;\n\n        while (parent) {\n          if (parent.classList.contains('toolkit-lightbox')) {\n            parent.classList.add('preventscroll');\n            break;\n          }\n\n          parent = parent.parentElement;\n        }\n      }\n    };\n\n    this.focusOnLightboxContainer = () => {\n      if (this.props.isVisible) {\n        this.setState({\n          containerTabIndex: 0\n        }, () => {\n          if (this.containerRef.current) {\n            this.containerRef.current.focus();\n            this.prevAriaHiddens = aria.setAriaHidden(this.containerRef.current);\n            this.trapFocus = new TrapFocus(this.containerRef.current);\n          }\n        });\n      }\n    };\n\n    this.mount = () => {\n      var _a;\n\n      if (document.body.classList.contains('preventscroll')) {\n        this.addPreventScrollToParentLightbox();\n      } else {\n        document.body.classList.add('preventscroll');\n      }\n\n      this.focusOnLightboxContainer();\n      (_a = this.containerRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener('click', this.clickListener, false);\n      document.addEventListener('keydown', this.keyListener);\n      handleIOSSafariUA();\n      lightboxes.push(this.lightboxId);\n      this.props.printable && printSheet.attach();\n      this.setState({\n        containerTabIndex: this.props.isVisible ? 0 : -1\n      });\n    };\n\n    this.unMount = () => {\n      var _a;\n\n      if (this.prevAriaHiddens !== undefined) {\n        aria.resetAriaHidden(this.prevAriaHiddens);\n      }\n\n      setTimeout(function () {\n        if (document.body.classList.contains('preventscroll') && document.querySelectorAll('.toolkit-lightbox').length === 0) {\n          document.body.classList.remove('preventscroll');\n        }\n      }, 50);\n\n      if (this.trapFocus !== undefined && this.trapFocus !== null) {\n        this.trapFocus.deactivate();\n        this.trapFocus = undefined;\n      }\n\n      (_a = this.containerRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('click', this.clickListener, false);\n      document.removeEventListener('keydown', this.keyListener);\n      const lightbox = document.querySelector('.toolkit-lightbox');\n\n      if (lightbox) {\n        lightbox.classList.remove('preventscroll');\n      }\n\n      const removed = lightboxes.pop();\n\n      if (removed !== this.lightboxId) {\n        log('Lightbox stack is corrupted');\n      }\n\n      this.props.printable && printSheet.detach();\n    };\n\n    this.clickListener = evt => {\n      if (evt.target && this.containerRef.current === evt.target && !this.props.noAbort) {\n        evt.stopPropagation();\n        this.close();\n      }\n    };\n\n    this.keyListener = e => {\n      if (e.keyCode === keyCode.ESC && !this.props.noAbort) {\n        e.stopPropagation();\n\n        if (lightboxes[lightboxes.length - 1] === this.lightboxId) {\n          this.close();\n        }\n      }\n    };\n\n    this.onContainerBlur = () => {\n      this.setState({\n        containerTabIndex: -1\n      });\n    };\n\n    this.lightboxId = lightboxCount++;\n    this.overlayRef = React.createRef();\n    this.containerRef = React.createRef();\n    this.state = {\n      containerTabIndex: 0\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isVisible) {\n      this.mount();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.isVisible && !this.props.isVisible) {\n      this.unMount();\n    } else if (!prevProps.isVisible && this.props.isVisible) {\n      this.mount();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unMount();\n  }\n\n  scrollTo(scrollPosition) {\n    if (this.containerRef.current) {\n      this.containerRef.current.scrollTop = scrollPosition;\n    }\n  }\n\n  render() {\n    const {\n      wrapperClassName,\n      contentClassName,\n      buttonWrapperClassName,\n      closeButtonClassName,\n      buttonWrapperContent,\n      isProsessHjelpenAvailable,\n      actionCancelButton,\n      noCloseButton,\n      hasAlertIcon,\n      isVisible,\n      isContentHidden,\n      small,\n      medium,\n      large,\n      noPadding,\n      noAbort,\n      printable,\n      energize,\n      children,\n      lightboxTestId,\n      actionButtonTestId,\n      functionButtonTestId,\n      ariaLabel,\n      ariaLabelledBy\n    } = this.props;\n    const closeText = 'Lukk';\n    const lightboxContainerClasses = classNames({\n      'toolkit-lightbox': true,\n      [`${toolkitstyles.lightbox__container}`]: true,\n      [`${toolkitstyles['lightbox__container--lowerzindex']}`]: isProsessHjelpenAvailable\n    }, wrapperClassName);\n    const lightboxContentClasses = classNames({\n      [`${toolkitstyles.lightbox__content}`]: true,\n      [`${toolkitstyles['lightbox__content--small']}`]: small,\n      [`${toolkitstyles['lightbox__content--medium']}`]: medium,\n      [`${toolkitstyles['lightbox__content--large']}`]: large,\n      [`${toolkitstyles['lightbox__content--nopadding']}`]: noPadding\n    }, contentClassName);\n    const placeholderClasses = classNames({\n      [`${toolkitstyles.lightbox__closebuttonplaceholder}`]: true,\n      [`${toolkitstyles['lightbox__closebuttonplaceholder--smaller']}`]: !noPadding && (small || medium || large),\n      [`${toolkitstyles['lightbox__closebuttonplaceholder--larger']}`]: noPadding && (small || medium || large)\n    }, wrapperClassName);\n    let actionButton = null;\n    let closeButton = null;\n\n    if (!noCloseButton) {\n      actionButton = React.createElement(ActionButton, {\n        onClick: this.close,\n        className: toolkitstyles.lightbox__buttonwrapper__actionbutton,\n        tertiary: !!actionCancelButton,\n        testId: actionButtonTestId\n      }, closeText);\n    }\n\n    if (!noAbort) {\n      closeButton = React.createElement(FunctionButton, {\n        className: `${toolkitstyles.lightbox__closebutton} ${closeButtonClassName ? closeButtonClassName : ''}`,\n        onClick: this.close,\n        svgIcon: React.createElement(Close, null),\n        secondary: true,\n        ariaLabel: closeText,\n        testId: functionButtonTestId\n      });\n    }\n\n    let hideStyle;\n\n    if (isContentHidden) {\n      hideStyle = {\n        display: 'none'\n      };\n    }\n\n    const content = isVisible ? React.createElement(\"div\", {\n      className: \"toolkit-lightbox\",\n      \"data-testid\": lightboxTestId\n    }, React.createElement(\"div\", {\n      className: `${toolkitstyles.lightbox__overlay} ${isProsessHjelpenAvailable ? toolkitstyles['lightbox__overlay--lowerzindex'] : ''}`,\n      ref: this.overlayRef\n    }), React.createElement(\"div\", {\n      className: lightboxContainerClasses,\n      style: hideStyle,\n      ref: this.containerRef\n    }, React.createElement(\"div\", {\n      role: \"dialog\",\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      tabIndex: this.state.containerTabIndex,\n      \"aria-hidden\": !isVisible,\n      className: lightboxContentClasses,\n      onBlur: this.onContainerBlur\n    }, hasAlertIcon && React.createElement(Alert, {\n      tabIndex: -1,\n      size: 'large',\n      className: toolkitstyles.lightbox__alerticon\n    }), !noAbort ? React.createElement(\"div\", {\n      className: placeholderClasses\n    }) : null, closeButton, children, (actionButton || buttonWrapperContent) && React.createElement(\"div\", {\n      className: `${toolkitstyles['lightbox__buttonwrapper']} ${buttonWrapperClassName ? buttonWrapperClassName : ''}`\n    }, actionButton, buttonWrapperContent)))) : null;\n    return energize || printable ? React.createElement(RenderToBody, {\n      printable: printable\n    }, content) : content;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}