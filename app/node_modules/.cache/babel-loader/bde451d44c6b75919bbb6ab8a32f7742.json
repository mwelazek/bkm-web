{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HealthCareAddEdit = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactHelmet = require(\"react-helmet\");\n\nvar _Form = require(\"./Form\");\n\nvar _reactRouter = require(\"react-router\");\n\nvar _constants = require(\"../../constants\");\n\nvar _fhirTeamManagement = require(\"@opensrp/fhir-team-management\");\n\nvar _notifications = require(\"@opensrp/notifications\");\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar _antd = require(\"antd\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _utils = require(\"./utils\");\n\nvar _mls = require(\"../../mls\");\n\nvar HealthCareAddEdit = function HealthCareAddEdit(props) {\n  var _healthCareService$da, _organizations$data;\n\n  var fhirBaseUrl = props.fhirBaseURL;\n\n  var _useParams = (0, _reactRouter.useParams)(),\n      resourceId = _useParams.id;\n\n  var _useTranslation = (0, _mls.useTranslation)(),\n      t = _useTranslation.t;\n\n  var healthCareService = (0, _reactQuery.useQuery)([_constants.healthCareServiceResourceType, resourceId], (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee() {\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new _reactUtils.FHIRServiceClass(fhirBaseUrl, _constants.healthCareServiceResourceType).read(resourceId));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), {\n    enabled: !!resourceId\n  });\n  var organizations = (0, _reactQuery.useQuery)([_fhirTeamManagement.organizationResourceType], function () {\n    return (0, _reactUtils.loadAllResources)(fhirBaseUrl, _fhirTeamManagement.organizationResourceType);\n  }, {\n    select: function select(res) {\n      return (0, _reactUtils.getResourcesFromBundle)(res);\n    },\n    onError: function onError() {\n      return (0, _notifications.sendErrorNotification)(t('Unable to fetch organizations'));\n    }\n  });\n\n  if (!healthCareService.isIdle && healthCareService.isLoading || organizations.isLoading) {\n    return _react[\"default\"].createElement(_antd.Spin, {\n      size: \"large\",\n      className: \"custom-spinner\"\n    });\n  }\n\n  if (healthCareService.error && !healthCareService.data) {\n    return _react[\"default\"].createElement(_reactUtils.BrokenPage, {\n      errorMessage: healthCareService.error.message\n    });\n  }\n\n  var initialValues = (0, _utils.getHealthCareFormFields)(healthCareService.data);\n  var pageTitle = healthCareService.data ? t('Edit team | {{name}}', {\n    name: (_healthCareService$da = healthCareService.data.name) !== null && _healthCareService$da !== void 0 ? _healthCareService$da : ''\n  }) : t('Create team');\n  return _react[\"default\"].createElement(\"section\", {\n    className: \"content-section\"\n  }, _react[\"default\"].createElement(_reactHelmet.Helmet, null, _react[\"default\"].createElement(\"title\", null, pageTitle)), _react[\"default\"].createElement(_reactUtils.PageHeader, {\n    title: pageTitle\n  }), _react[\"default\"].createElement(\"div\", {\n    className: \"bg-white p-5\"\n  }, _react[\"default\"].createElement(_Form.HealthCareForm, {\n    fhirBaseUrl: fhirBaseUrl,\n    initialValues: initialValues,\n    organizations: (_organizations$data = organizations.data) !== null && _organizations$data !== void 0 ? _organizations$data : [],\n    cancelUrl: _constants.LIST_HEALTHCARE_URL,\n    successUrl: _constants.LIST_HEALTHCARE_URL\n  })));\n};\n\nexports.HealthCareAddEdit = HealthCareAddEdit;","map":null,"metadata":{},"sourceType":"script"}