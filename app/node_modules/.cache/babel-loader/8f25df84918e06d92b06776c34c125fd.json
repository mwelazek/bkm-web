{"ast":null,"code":"import classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport genPurePanel from '../_util/PurePanel';\nimport { ConfigContext } from '../config-provider/context';\nimport Popover from '../popover';\nimport theme from '../theme';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useColorState from './hooks/useColorState';\nimport useStyle from './style/index';\nimport { customizePrefixCls, generateColor } from './util';\n\nconst ColorPicker = props => {\n  const {\n    value,\n    defaultValue,\n    format,\n    allowClear = false,\n    presets,\n    children,\n    trigger = 'click',\n    open,\n    disabled,\n    placement = 'bottomLeft',\n    arrow = true,\n    style,\n    className,\n    rootClassName,\n    styles,\n    onFormatChange,\n    onChange,\n    onOpenChange,\n    getPopupContainer,\n    autoAdjustOverflow = true\n  } = props;\n  const {\n    getPrefixCls,\n    direction\n  } = useContext(ConfigContext);\n  const {\n    token\n  } = theme.useToken();\n  const [colorValue, setColorValue] = useColorState(token.colorPrimary, {\n    value,\n    defaultValue\n  });\n  const [popupOpen, setPopupOpen] = useMergedState(false, {\n    value: open,\n    postState: openData => !disabled && openData,\n    onChange: onOpenChange\n  });\n  const [colorCleared, setColorCleared] = useState(false);\n  const prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction\n  };\n  const mergeRootCls = classNames(rootClassName, rtlCls);\n  const mergeCls = classNames(mergeRootCls, className, hashId);\n  const mergePopupCls = classNames(prefixCls, rtlCls);\n  const popupAllowCloseRef = useRef(true);\n\n  const handleChange = (data, type, pickColor) => {\n    let color = generateColor(data);\n\n    if (colorCleared) {\n      setColorCleared(false);\n      const hsba = color.toHsb(); // ignore alpha slider\n\n      if (colorValue.toHsb().a === 0 && type !== 'alpha') {\n        hsba.a = 1;\n        color = generateColor(hsba);\n      }\n    }\n\n    if (!value) {\n      setColorValue(color);\n    } // Only for drag-and-drop color picking\n\n\n    if (pickColor) {\n      popupAllowCloseRef.current = false;\n    }\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(color, color.toHexString());\n  };\n\n  const handleClear = clear => {\n    setColorCleared(clear);\n  };\n\n  const handleChangeComplete = () => {\n    popupAllowCloseRef.current = true;\n  };\n\n  const popoverProps = {\n    open: popupOpen,\n    trigger,\n    placement,\n    arrow,\n    rootClassName,\n    getPopupContainer,\n    autoAdjustOverflow\n  };\n  const colorBaseProps = {\n    prefixCls,\n    color: colorValue,\n    allowClear,\n    colorCleared,\n    disabled,\n    presets,\n    format,\n    onFormatChange\n  };\n  useEffect(() => {\n    if (colorCleared) {\n      setPopupOpen(false);\n    }\n  }, [colorCleared]);\n  return wrapSSR( /*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    onOpenChange: visible => {\n      if (popupAllowCloseRef.current) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(ColorPickerPanel, Object.assign({}, colorBaseProps, {\n      onChange: handleChange,\n      onChangeComplete: handleChangeComplete,\n      onClear: handleClear\n    })),\n    overlayClassName: mergePopupCls\n  }, popoverProps), children || /*#__PURE__*/React.createElement(ColorTrigger, {\n    open: popupOpen,\n    className: mergeCls,\n    style: style,\n    color: colorValue,\n    prefixCls: prefixCls,\n    disabled: disabled,\n    colorCleared: colorCleared\n  })));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\n\nconst PurePanel = genPurePanel(ColorPicker, 'color-picker',\n/* istanbul ignore next */\nprefixCls => prefixCls, props => Object.assign(Object.assign({}, props), {\n  placement: 'bottom',\n  autoAdjustOverflow: false\n}));\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;","map":null,"metadata":{},"sourceType":"module"}