{"ast":null,"code":"const util = require(\"./utilities\");\n\nconst {\n  ResourceNode\n} = require(\"./types\");\n\nlet makeResNode = ResourceNode.makeResNode;\nvar engine = {};\n\nengine.children = function (coll) {\n  let model = this.model; // \"this\" is the context object\n\n  return coll.reduce(function (acc, x) {\n    let d = util.valData(x);\n    x = makeResNode(x);\n\n    if (typeof d === 'object') {\n      for (var prop of Object.keys(d)) {\n        var v = d[prop];\n        var childPath = x.path + '.' + prop;\n\n        if (model) {\n          let defPath = model.pathsDefinedElsewhere[childPath];\n          if (defPath) childPath = defPath;\n        }\n\n        if (Array.isArray(v)) {\n          acc.push.apply(acc, v.map(n => makeResNode(n, childPath)));\n        } else {\n          acc.push(makeResNode(v, childPath));\n        }\n      }\n\n      return acc;\n    } else {\n      return acc;\n    }\n  }, []);\n};\n\nengine.descendants = function (coll) {\n  var ch = engine.children.call(this, coll); // \"this\" is the context object\n\n  var res = [];\n\n  while (ch.length > 0) {\n    res.push.apply(res, ch);\n    ch = engine.children.call(this, ch);\n  }\n\n  return res;\n};\n\nmodule.exports = engine;","map":null,"metadata":{},"sourceType":"script"}