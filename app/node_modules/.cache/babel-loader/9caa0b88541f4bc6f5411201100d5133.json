{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar react_redux_1 = require(\"react-redux\");\n\nvar newValue_1 = require(\"../../../actions/newValue\");\n\nvar extension_1 = require(\"../../../util/extension\");\n\nvar index_1 = require(\"../../../util/index\");\n\nvar map_props_1 = require(\"../../../util/map-props\");\n\nvar with_common_functions_1 = __importDefault(require(\"../../with-common-functions\"));\n\nvar label_1 = __importDefault(require(\"../label\"));\n\nvar sublabel_1 = __importDefault(require(\"../sublabel\"));\n\nvar textview_1 = __importDefault(require(\"../textview\"));\n\nvar attachmenthtml_1 = __importDefault(require(\"./attachmenthtml\"));\n\nvar AttachmentComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(AttachmentComponent, _React$Component);\n\n  var _super = _createSuper(AttachmentComponent);\n\n  function AttachmentComponent() {\n    var _this;\n\n    _classCallCheck(this, AttachmentComponent);\n\n    _this = _super.apply(this, arguments);\n\n    _this.onUpload = function (files, cb) {\n      var _this$props = _this.props,\n          uploadAttachment = _this$props.uploadAttachment,\n          path = _this$props.path,\n          item = _this$props.item,\n          onAnswerChange = _this$props.onAnswerChange;\n\n      if (uploadAttachment) {\n        var _iterator = _createForOfIteratorHelper(files),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var file = _step.value;\n\n            var onSuccess = function onSuccess(uploadedFile, attachment) {\n              var _a;\n\n              if (_this.props.dispatch && attachment) {\n                (_a = _this.props.dispatch(newValue_1.newAttachmentAsync(_this.props.path, attachment, _this.props.item, index_1.isRepeat(_this.props.item)))) === null || _a === void 0 ? void 0 : _a.then(function (newState) {\n                  return onAnswerChange(newState, path, item, {\n                    valueAttachment: attachment\n                  });\n                });\n              }\n\n              cb(true, null, uploadedFile);\n            };\n\n            var onError = function onError(errorMessage) {\n              cb(false, errorMessage);\n            };\n\n            uploadAttachment([file], onSuccess, onError);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    };\n\n    _this.onDelete = function (fileId, cb) {\n      var _this$props2 = _this.props,\n          onDeleteAttachment = _this$props2.onDeleteAttachment,\n          path = _this$props2.path,\n          item = _this$props2.item,\n          onAnswerChange = _this$props2.onAnswerChange;\n\n      if (onDeleteAttachment) {\n        var onSuccess = function onSuccess() {\n          var _a;\n\n          if (_this.props.dispatch) {\n            var attachment = {\n              url: fileId\n            };\n            (_a = _this.props.dispatch(newValue_1.removeAttachmentAsync(_this.props.path, attachment, _this.props.item))) === null || _a === void 0 ? void 0 : _a.then(function (newState) {\n              return onAnswerChange(newState, path, item, {\n                valueAttachment: attachment\n              });\n            });\n          }\n\n          cb(true, null);\n        };\n\n        var onError = function onError(errormessage) {\n          cb(false, errormessage);\n        };\n\n        onDeleteAttachment(fileId, onSuccess, onError);\n      }\n    };\n\n    _this.getButtonText = function () {\n      var buttonText = '';\n      var resources = _this.props.resources;\n\n      if (resources && resources.uploadButtonText) {\n        buttonText = resources.uploadButtonText;\n      }\n\n      return buttonText;\n    };\n\n    _this.getAttachment = function () {\n      var answer = _this.props.answer;\n\n      if (Array.isArray(answer)) {\n        return answer.map(function (v) {\n          return {\n            id: v.valueAttachment && v.valueAttachment.url ? v.valueAttachment.url : -1,\n            name: v.valueAttachment && v.valueAttachment.title ? v.valueAttachment.title : ''\n          };\n        });\n      } else {\n        if (answer && answer.valueAttachment && answer.valueAttachment.url) {\n          return [{\n            id: answer.valueAttachment.url,\n            name: answer.valueAttachment.title ? answer.valueAttachment.title : ''\n          }];\n        }\n      }\n\n      return [];\n    };\n\n    _this.getPdfValue = function () {\n      var attachments = _this.getAttachment();\n\n      if (attachments) {\n        return attachments.map(function (v) {\n          return v.name;\n        }).join(', ');\n      } else if (_this.props.resources) {\n        return _this.props.resources.ikkeBesvart;\n      }\n\n      return '';\n    };\n\n    return _this;\n  }\n\n  _createClass(AttachmentComponent, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      var _a;\n\n      var responseItemHasChanged = this.props.responseItem !== nextProps.responseItem;\n      var helpItemHasChanged = this.props.isHelpOpen !== nextProps.isHelpOpen;\n      var resourcesHasChanged = JSON.stringify(this.props.resources) !== JSON.stringify(nextProps.resources);\n      var attachmentErrorMessageHasChanged = this.props.attachmentErrorMessage !== nextProps.attachmentErrorMessage;\n      var repeats = (_a = this.props.item.repeats) !== null && _a !== void 0 ? _a : false;\n      return responseItemHasChanged || helpItemHasChanged || resourcesHasChanged || attachmentErrorMessageHasChanged || repeats;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          pdf = _a.pdf,\n          id = _a.id,\n          item = _a.item,\n          resources = _a.resources,\n          onOpenAttachment = _a.onOpenAttachment,\n          onRenderMarkdown = _a.onRenderMarkdown,\n          other = __rest(_a, [\"pdf\", \"id\", \"item\", \"resources\", \"onOpenAttachment\", \"onRenderMarkdown\"]);\n\n      var subLabelText = index_1.getSublabelText(item, onRenderMarkdown);\n\n      if (pdf || index_1.isReadOnly(item)) {\n        return React.createElement(textview_1.default, {\n          id: id,\n          item: item,\n          value: this.getPdfValue(),\n          onRenderMarkdown: onRenderMarkdown\n        }, this.props.children);\n      } else {\n        return React.createElement(React.Fragment, null, React.createElement(attachmenthtml_1.default, Object.assign({\n          onUpload: this.onUpload,\n          onDelete: this.onDelete,\n          onOpen: onOpenAttachment,\n          id: index_1.getId(id),\n          label: React.createElement(label_1.default, {\n            item: item,\n            onRenderMarkdown: onRenderMarkdown\n          }),\n          subLabel: subLabelText ? React.createElement(sublabel_1.default, {\n            subLabelText: subLabelText\n          }) : undefined,\n          uploadButtonText: this.getButtonText(),\n          resources: resources,\n          isRequired: index_1.isRequired(item),\n          multiple: index_1.isRepeat(item),\n          errorText: extension_1.getValidationTextExtension(item),\n          uploadedFiles: this.getAttachment(),\n          onRequestAttachmentLink: this.props.onRequestAttachmentLink,\n          helpButton: this.props.renderHelpButton(),\n          helpElement: this.props.renderHelpElement(),\n          maxFiles: extension_1.getMaxOccursExtensionValue(item),\n          minFiles: extension_1.getMinOccursExtensionValue(item),\n          attachmentMaxFileSize: this.props.attachmentMaxFileSize,\n          attachmentValidTypes: this.props.attachmentValidTypes,\n          item: item,\n          attachmentErrorMessage: this.props.attachmentErrorMessage\n        }, other)));\n      }\n    }\n  }]);\n\n  return AttachmentComponent;\n}(React.Component);\n\nvar withCommonFunctionsComponent = with_common_functions_1.default(AttachmentComponent);\nvar connectedComponent = react_redux_1.connect(map_props_1.mapStateToProps, map_props_1.mapDispatchToProps, map_props_1.mergeProps)(withCommonFunctionsComponent);\nexports.default = connectedComponent;","map":null,"metadata":{},"sourceType":"script"}