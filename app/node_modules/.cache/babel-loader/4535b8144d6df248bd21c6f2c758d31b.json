{"ast":null,"code":"import { warning } from 'rc-util';\nimport { getShadowRoot } from \"rc-util/es/Dom/shadow\";\nimport raf from \"rc-util/es/raf\";\nimport * as React from 'react';\nimport { getWin } from \"../util\";\nexport default function useWinClick(open, clickToHide, targetEle, popupEle, mask, maskClosable, inPopupOrChild, triggerOpen) {\n  var openRef = React.useRef(open); // Window click to hide should be lock to avoid trigger lock immediately\n\n  var lockRef = React.useRef(false);\n\n  if (openRef.current !== open) {\n    lockRef.current = true;\n    openRef.current = open;\n  }\n\n  React.useEffect(function () {\n    var id = raf(function () {\n      lockRef.current = false;\n    });\n    return function () {\n      raf.cancel(id);\n    };\n  }, [open]); // Click to hide is special action since click popup element should not hide\n\n  React.useEffect(function () {\n    if (clickToHide && popupEle && (!mask || maskClosable)) {\n      var clickInside = false; // User may mouseDown inside and drag out of popup and mouse up\n      // Record here to prevent close\n\n      var onWindowMouseDown = function onWindowMouseDown(_ref) {\n        var target = _ref.target;\n        clickInside = inPopupOrChild(target);\n      };\n\n      var onWindowClick = function onWindowClick(_ref2) {\n        var target = _ref2.target;\n\n        if (!lockRef.current && openRef.current && !clickInside && !inPopupOrChild(target)) {\n          triggerOpen(false);\n        }\n      };\n\n      var win = getWin(popupEle);\n      win.addEventListener('mousedown', onWindowMouseDown);\n      win.addEventListener('click', onWindowClick); // shadow root\n\n      var targetShadowRoot = getShadowRoot(targetEle);\n\n      if (targetShadowRoot) {\n        targetShadowRoot.addEventListener('mousedown', onWindowMouseDown);\n        targetShadowRoot.addEventListener('click', onWindowClick);\n      } // Warning if target and popup not in same root\n\n\n      if (process.env.NODE_ENV !== 'production') {\n        var _targetEle$getRootNod, _popupEle$getRootNode;\n\n        var targetRoot = targetEle === null || targetEle === void 0 ? void 0 : (_targetEle$getRootNod = targetEle.getRootNode) === null || _targetEle$getRootNod === void 0 ? void 0 : _targetEle$getRootNod.call(targetEle);\n        var popupRoot = (_popupEle$getRootNode = popupEle.getRootNode) === null || _popupEle$getRootNode === void 0 ? void 0 : _popupEle$getRootNode.call(popupEle);\n        warning(targetRoot === popupRoot, \"trigger element and popup element should in same shadow root.\");\n      }\n\n      return function () {\n        win.removeEventListener('mousedown', onWindowMouseDown);\n        win.removeEventListener('click', onWindowClick);\n\n        if (targetShadowRoot) {\n          targetShadowRoot.removeEventListener('mousedown', onWindowMouseDown);\n          targetShadowRoot.removeEventListener('click', onWindowClick);\n        }\n      };\n    }\n  }, [clickToHide, targetEle, popupEle, mask, maskClosable]);\n}","map":null,"metadata":{},"sourceType":"module"}