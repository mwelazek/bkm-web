{"ast":null,"code":"/**\n * Returnerer true når en streng er null, undefined eller tom\n * @param s - streng som skal sjekkes\n */\nexport const isEmpty = string => {\n  if (string && string.trim) string = string.trim();\n  return string === '' || string === null || string === undefined;\n};\n/**\n * Returnerer true når strengen inneholder følgende symboler: \"!#¤%=?`´^¨~*:;£${[\\]}|§€><\\|\n * @param s - streng som skal sjekkes\n */\n\nexport const hasInvalidCharacters = s => {\n  return /[\"\"!#¤%=?`´^¨~*:;£${[\\]}|§€><\\|]/.test(s);\n};\n/**\n * Returnerer en streng med uppercase på første bokstav\n * @param s - streng å konvertere\n */\n\nexport const capitalize = s => {\n  const capitalized = s.charAt(0).toUpperCase() + s.substring(1);\n  return capitalized;\n};\n/**\n * Returnerer en streng uten uppercase på første bokstav\n * @param s - streng å konvertere\n */\n\nexport const decapitalize = s => {\n  const decapitalized = s.charAt(0).toLowerCase() + s.substring(1);\n  return decapitalized;\n};\n/**\n * Returns true if the input corresponds with a norwegian phone number format\n * @param phoneNumber - string or number of the phone number\n */\n\nexport const isNorwegianPhoneNumber = phoneNumber => {\n  const regexString = '^(0047|[+]47)?[4|9][0-9]{7,7}$';\n  return new RegExp(regexString, 'i').test(phoneNumber.toString().replace(new RegExp(' ', 'g'), ''));\n};\n/**\n * Returns a new string where plaeholders {number} have been replaced by items\n * ex: 'my string {0} ' where 0 will be replaced by the first element in  args array\n * Note: The order of elements in string decide what order it should be replaced, not number!\n * @param s - string to format\n * @param args is a array in order you want them replaced ex: ['foo', 'bar']\n * @param allowEmptyStrings if '' is allowed or not\n */\n\nexport const format = (s, args, allowEmptyStrings) => {\n  return s.replace(/{(\\d+)}/g, function replace(match, number) {\n    if (allowEmptyStrings) {\n      return args[number];\n    }\n\n    return args[number] ? args[number] : match;\n  });\n};\nconst regexTagsRule = /<.*?>/g;\nconst regexEmoticonsRule = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n/**\n * Returns en Array med alle html tags som er funnet i en string <...></...>\n * @param s - string som skal sjekkes\n */\n\nexport const invalidNodes = s => {\n  const tagsMatches = s.match(regexTagsRule);\n  const tags = tagsMatches ? tagsMatches.map(i => i.toString()) : [];\n  const emoticonsMatches = s.match(regexEmoticonsRule);\n  const emoticons = emoticonsMatches ? emoticonsMatches.map(i => i.toString()) : [];\n  return tags.concat(emoticons);\n};\n/**\n * Returns true når strengen ikke inneholder emoticon og tags\n * @param s - string som skal sjekkes\n */\n\nexport const isValid = s => {\n  return !regexTagsRule.test(s) && !regexEmoticonsRule.test(s);\n};","map":null,"metadata":{},"sourceType":"module"}