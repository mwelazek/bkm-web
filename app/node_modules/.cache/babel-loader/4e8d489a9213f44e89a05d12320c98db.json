{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass HttpError extends Error {\n  constructor(response) {\n    super(`${response.status} ${response.statusText}\\nURL: ${response.url}`);\n    this.name = \"HttpError\";\n    this.response = response;\n    this.statusCode = response.status;\n    this.status = response.status;\n    this.statusText = response.statusText;\n  }\n\n  async parse() {\n    if (!this.response.bodyUsed) {\n      try {\n        const type = this.response.headers.get(\"Content-Type\") || \"text/plain\";\n\n        if (type.match(/\\bjson\\b/i)) {\n          let body = await this.response.json();\n\n          if (body.error) {\n            this.message += \"\\n\" + body.error;\n\n            if (body.error_description) {\n              this.message += \": \" + body.error_description;\n            }\n          } else {\n            this.message += \"\\n\\n\" + JSON.stringify(body, null, 4);\n          }\n        } else if (type.match(/^text\\//i)) {\n          let body = await this.response.text();\n\n          if (body) {\n            this.message += \"\\n\\n\" + body;\n          }\n        }\n      } catch (_a) {// ignore\n      }\n    }\n\n    return this;\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      statusCode: this.statusCode,\n      status: this.status,\n      statusText: this.statusText,\n      message: this.message\n    };\n  }\n\n}\n\nexports.default = HttpError;","map":null,"metadata":{},"sourceType":"script"}