{"ast":null,"code":"// Contains the FHIRPath Aggregate functions.\n// (Section 7 of the FHIRPath 2.0.0 (N1) specification).\nvar engine = {};\n\nvar math = require(\"./math\");\n\nvar equality = require(\"./equality\");\n\nvar util = require('./utilities');\n\nengine.aggregateMacro = function (data, expr, initialValue) {\n  var _this = this;\n\n  return data.reduce(function (total, x, i) {\n    _this.$index = i;\n    return _this.$total = expr(x);\n  }, this.$total = initialValue);\n};\n\nengine.countFn = function (x) {\n  if (x && x.length) {\n    return x.length;\n  } else {\n    return 0;\n  }\n}; // Shortcut for \"value.aggregate($this+$total, 0)\"\n\n\nengine.sumFn = function (data) {\n  var _this2 = this;\n\n  return engine.aggregateMacro.apply(this, [data, function ($this) {\n    return math.plus(util.arraify($this), util.arraify(_this2.$total));\n  }, 0]);\n}; // Shortcut for \"value.aggregate(iif($total.empty(), $this, iif($this < $total, $this, $total)))\"\n\n\nengine.minFn = function (data) {\n  var _this3 = this;\n\n  return engine.aggregateMacro.apply(this, [data, function (curr) {\n    var $this = util.arraify(curr);\n    var $total = util.arraify(_this3.$total);\n    return util.isEmpty($total) ? $this : equality.lt($this, $total) ? $this : $total;\n  }]);\n}; // Shortcut for \"value.aggregate(iif($total.empty(), $this, iif($this > $total, $this, $total)))\"\n\n\nengine.maxFn = function (data) {\n  var _this4 = this;\n\n  return engine.aggregateMacro.apply(this, [data, function (curr) {\n    var $this = util.arraify(curr);\n    var $total = util.arraify(_this4.$total);\n    return util.isEmpty($total) ? $this : equality.gt($this, $total) ? $this : $total;\n  }]);\n}; // Shortcut for \"value.sum()/value.count()\"\n\n\nengine.avgFn = function (data) {\n  return math.div(engine.sumFn(data), engine.countFn(data));\n};\n\nmodule.exports = engine;","map":null,"metadata":{},"sourceType":"script"}