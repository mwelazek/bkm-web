{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport { Label } from './../../atoms/label';\nimport { Spinner } from './../spinner';\nimport ValidationError from './../../molecules/form/validation-error';\nimport toolkitstyles from './styles.module.scss';\nexport class SafeTextarea extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setSize = props => {\n      const {\n        size,\n        maxlength\n      } = props;\n\n      if (size) {\n        this.setState({\n          size\n        });\n      } else if (maxlength) {\n        if (maxlength < 250) {\n          this.setState({\n            size: 'small'\n          });\n        } else if (maxlength < 500) {\n          this.setState({\n            size: 'medium'\n          });\n        } else {\n          this.setState({\n            size: 'large'\n          });\n        }\n      } else {\n        this.setState({\n          size: 'medium'\n        });\n      }\n    };\n\n    this.validator = value => {\n      const overMaxlength = this.isValueOverMaxLength(value);\n      const underMinlength = this.isValueUnderMinLength(value);\n\n      if (overMaxlength || underMinlength) {\n        return false;\n      } else if (this.props.validator) {\n        return this.props.validator(value);\n      } else {\n        return true;\n      }\n    };\n\n    this.isValueOverMaxLength = value => {\n      return this.props.maxlength && value ? value.replace(/(\\r\\n|\\n|\\r)/g, '-').length > this.props.maxlength : false;\n    };\n\n    this.isValueUnderMinLength = value => {\n      return this.props.minlength && value ? value.length < this.props.minlength : false;\n    };\n\n    this.validate = value => {\n      return new Promise(resolve => {\n        const validatedCB = () => {\n          resolve();\n        };\n\n        this.setState({\n          valid: this.validator(value) && this.isValidIfRequired(value)\n        }, validatedCB);\n      });\n    };\n\n    this.onBlur = event => {\n      const target = event.target;\n      this.setState({\n        focused: false,\n        blurred: true,\n        valid: this.validator(target.value),\n        validated: true\n      });\n\n      if (this.props.onBlur) {\n        this.props.onBlur(event);\n      }\n    };\n\n    this.onChange = event => {\n      const target = event.target;\n      this.handleOnChange(target.value, () => {\n        if (this.props.onChange) this.props.onChange(event);\n      });\n    };\n\n    this.handleOnChange = (value, notify) => {\n      this.setState({\n        value,\n        valid: this.validator(value),\n        validated: this.isValueOverMaxLength(value) ? true : this.state.validated\n      });\n\n      if (notify) {\n        notify();\n      }\n    };\n\n    this.notifyValidated = () => {\n      if (this.props.onValidated) {\n        this.props.onValidated(this.state.valid);\n      }\n    };\n\n    this.validateField = () => {\n      this.setState({\n        validated: true\n      });\n      return this.validate(this.state.value);\n    };\n\n    this.isValidIfRequired = value => {\n      if (this.props.isRequired) {\n        return value !== null && value !== undefined && value.toString().trim() !== '';\n      }\n\n      return true;\n    };\n\n    this.isValid = () => {\n      return this.state.valid;\n    };\n\n    this.onFocus = event => {\n      this.setState({\n        focused: true\n      });\n\n      if (this.props.onFocus) {\n        this.props.onFocus(event);\n      }\n    };\n\n    this.focus = () => {\n      if (this.textareaRef.current) {\n        this.textareaRef.current.focus();\n      }\n    };\n\n    this.createMarkupForFancyDescription = html => {\n      let content = '';\n\n      if (html !== null && html !== undefined) {\n        content = html;\n      }\n\n      return {\n        __html: content\n      };\n    };\n\n    this.renderSubLabel = () => {\n      var _a;\n\n      if (this.props.subLabel) {\n        return this.props.subLabel;\n      } else if (this.props.maxlength && !this.props.hideLengthLabel) {\n        return ((_a = this.props.maxLengthText) === null || _a === void 0 ? void 0 : _a.replace('{0}', this.props.maxlength.toString())) || `Maksimum ${this.props.maxlength} tegn`;\n      }\n\n      return undefined;\n    };\n\n    this.renderLabel = () => {\n      const {\n        id,\n        helpButton,\n        label,\n        showLabel,\n        isRequired,\n        requiredLabel,\n        showRequiredLabel,\n        optionalLabel,\n        showOptionalLabel\n      } = this.props;\n\n      if (!showLabel || !id) {\n        return null;\n      }\n\n      const reqLabel = isRequired && requiredLabel && showRequiredLabel ? React.createElement(\"em\", null, \" \", requiredLabel) : '';\n      const optLabel = !isRequired && optionalLabel && showOptionalLabel ? React.createElement(\"em\", null, \" \", optionalLabel) : '';\n      const labelText = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n        dangerouslySetInnerHTML: this.createMarkupForFancyDescription(label)\n      }), reqLabel, optLabel);\n      return React.createElement(Label, {\n        htmlFor: id,\n        labelText: labelText,\n        sublabelText: this.renderSubLabel(),\n        helpButton: helpButton\n      });\n    };\n\n    this.renderHelp = () => {\n      if (this.props.helpElement) {\n        return this.props.helpElement;\n      }\n    };\n\n    this.renderErrorMessage = () => {\n      const {\n        isRequired,\n        requiredErrorMessage,\n        errorMessage\n      } = this.props;\n      const {\n        valid,\n        validated,\n        value\n      } = this.state;\n\n      if (!validated) {\n        return null;\n      }\n\n      let error;\n\n      if (!valid) {\n        if (isRequired && !this.isValidIfRequired(value) && requiredErrorMessage) {\n          error = typeof requiredErrorMessage === 'string' ? requiredErrorMessage : requiredErrorMessage(value);\n        } else if (errorMessage) {\n          error = typeof errorMessage === 'string' ? errorMessage : errorMessage(value);\n        } else {\n          error = 'Ugyldig verdi';\n        }\n\n        if (this.isValueOverMaxLength(value)) {\n          error = this.props.stringOverMaxLengthError ? this.props.stringOverMaxLengthError : 'Du har skrevet for mange tegn. GjÃ¸r teksten kortere.';\n        }\n      }\n\n      if (!error) {\n        return null;\n      }\n\n      return React.createElement(ValidationError, {\n        isValid: valid,\n        error: error\n      });\n    };\n\n    this.textareaRef = React.createRef();\n    this.state = {\n      focused: false,\n      value: undefined,\n      blurred: false,\n      valid: true,\n      validated: false\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.setSize(this.props);\n  }\n\n  componentDidMount() {\n    const {\n      value\n    } = this.props;\n    this.setState({\n      value\n    }, () => {\n      if (value === '' || value === null || value === undefined) {\n        return;\n      } else {\n        this.validateField();\n      }\n    });\n\n    if (this.props.autoFocus) {\n      const position = this.props.value ? this.props.value.length : 0;\n\n      if (this.textareaRef.current && typeof this.textareaRef.current.setSelectionRange === 'function') {\n        this.textareaRef.current.setSelectionRange(position, position);\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    var _a;\n\n    if (!this.state.focused) {\n      this.setState({\n        value: nextProps.value\n      });\n    }\n\n    if (this.props.size !== nextProps.size || this.props.maxlength !== nextProps.maxlength) {\n      this.setSize(nextProps);\n    }\n\n    if (this.props.validateOnExternalUpdate && nextProps.value !== this.props.value) {\n      this.handleOnChange((_a = nextProps.value) !== null && _a !== void 0 ? _a : '');\n    }\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    if (prevState.valid !== this.state.valid) {\n      this.notifyValidated();\n    }\n  }\n\n  render() {\n    const {\n      maxlength,\n      loading,\n      isRequired,\n      minlength,\n      id,\n      rows,\n      placeholder,\n      autoFocus,\n      disabled,\n      ariaLabel,\n      readOnly,\n      children,\n      wrapperClasses,\n      charCounterClasses\n    } = this.props;\n    const {\n      value,\n      valid,\n      validated,\n      size\n    } = this.state;\n    const counterPrefixText = '/';\n    const counterInfixText = 'av';\n    const counterSuffixText = ' tegn brukt';\n    const isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n    const isChrome = !!window.chrome;\n    const isWeird = isSafari || isChrome;\n    let counter;\n\n    if (!!maxlength) {\n      let length = 0;\n\n      if (value) {\n        length = isWeird ? value.replace(/(\\r\\n|\\n|\\r)/g, '-').length : value.length;\n      }\n\n      let progress = 0;\n\n      if (maxlength) {\n        progress = length / maxlength;\n      }\n\n      const ariaLevel = progress > 0.75 ? 'polite' : 'off';\n      const lengthClasses = classNames({\n        [toolkitstyles['safetextarea__char-counter__length']]: true,\n        [toolkitstyles['safetextarea__char-counter__length--invalid']]: !!maxlength && length > maxlength\n      });\n      counter = React.createElement(\"div\", {\n        className: `${toolkitstyles['safetextarea__char-counter']}${!!charCounterClasses ? ` ${charCounterClasses}` : ''}`,\n        \"aria-live\": ariaLevel,\n        \"aria-atomic\": \"true\"\n      }, React.createElement(\"span\", {\n        className: lengthClasses\n      }, length), React.createElement(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, counterPrefixText), React.createElement(\"span\", {\n        className: toolkitstyles['safetextarea__char-counter__hidden-text']\n      }, counterInfixText), maxlength, React.createElement(\"span\", {\n        className: toolkitstyles['safetextarea__char-counter__hidden-text']\n      }, counterSuffixText));\n    }\n\n    let spinner = null;\n\n    if (loading) {\n      spinner = React.createElement(Spinner, {\n        inline: true,\n        mini: true\n      });\n    }\n\n    let required = false;\n\n    if (isRequired) {\n      required = isRequired;\n    }\n\n    const textAreaClasses = classNames({\n      [toolkitstyles.safetextarea__textarea]: true,\n      [toolkitstyles['safetextarea__textarea--state_validationerror']]: !valid && validated,\n      [toolkitstyles['safetextarea__textarea--small']]: size === 'small',\n      [toolkitstyles['safetextarea__textarea--medium']]: size === 'medium',\n      [toolkitstyles['safetextarea__textarea--large']]: size === 'large'\n    });\n    const classes = classNames('mol_validation', {\n      'mol_validation--active': !valid && validated\n    }, wrapperClasses);\n    const ariaInvalid = {};\n\n    if (validated) {\n      ariaInvalid['aria-invalid'] = !valid;\n    }\n\n    return React.createElement(\"div\", {\n      className: classes,\n      id: `${id}-wrapper`\n    }, this.renderErrorMessage(), this.renderLabel(), this.renderHelp(), React.createElement(\"textarea\", Object.assign({\n      id: id,\n      ref: this.textareaRef,\n      value: value || '',\n      className: textAreaClasses,\n      style: {\n        resize: 'none'\n      },\n      minLength: minlength,\n      rows: rows,\n      placeholder: placeholder,\n      onChange: this.onChange,\n      onBlur: this.onBlur,\n      onFocus: this.onFocus,\n      autoFocus: autoFocus,\n      disabled: disabled,\n      required: required,\n      \"aria-required\": required,\n      \"aria-label\": ariaLabel,\n      \"data-testid\": this.props.testId,\n      readOnly: readOnly\n    }, ariaInvalid)), React.createElement(\"div\", {\n      className: toolkitstyles['safetextarea__printable-textarea-content']\n    }, value), spinner, counter, children);\n  }\n\n}\nSafeTextarea.hnFormComponent = true;\nexport default SafeTextarea;","map":null,"metadata":{},"sourceType":"module"}