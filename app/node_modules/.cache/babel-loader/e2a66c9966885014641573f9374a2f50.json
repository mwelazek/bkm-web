{"ast":null,"code":"import * as ReactDOM from 'react-dom';\nimport moment from 'moment';\nimport { isInclusivelyBeforeDay, isInclusivelyAfterDay } from '@helsenorge/core-utils/moment-utils';\nimport { warn } from '@helsenorge/core-utils/logger';\nexport var isNextMonthValid = function isNextMonthValid(date, maximumDate) {\n  var nextMonth = moment(date);\n  nextMonth.add(1, 'month').date(1);\n  return isMaximumDateValid(nextMonth, maximumDate);\n};\nexport var isPrevMonthValid = function isPrevMonthValid(date, minimumDate) {\n  var prevMonth = moment(date);\n  prevMonth.subtract(1, 'month').endOf('month');\n  return isMinimumDateValid(prevMonth, minimumDate);\n};\nexport var isMinimumDateValid = function isMinimumDateValid(date, minimumDate) {\n  var isMinimumDateValid = true;\n\n  if (minimumDate) {\n    isMinimumDateValid = isInclusivelyAfterDay(date, minimumDate);\n  }\n\n  return isMinimumDateValid;\n};\nexport var isMaximumDateValid = function isMaximumDateValid(date, maximumDate) {\n  var isMaximumDateValid = true;\n\n  if (maximumDate) {\n    isMaximumDateValid = isInclusivelyBeforeDay(date, maximumDate);\n  }\n\n  return isMaximumDateValid;\n};\nexport var isOutsideRange = function isOutsideRange(date, minimumDate, maximumDate) {\n  var isMinValid = isMinimumDateValid(date, minimumDate);\n  var isMaxValid = isMaximumDateValid(date, maximumDate);\n  return !(isMinValid && isMaxValid);\n};\nexport var validateSingleDate = function validateSingleDate(airbnbSingleDatepickerRef, date, id, required, errorPhrases, minimumDate, maximumDate, dateValidator) {\n  var isSingleDateValid = true;\n  var errorString;\n  var inputValue;\n\n  try {\n    var datepickerElement = ReactDOM.findDOMNode(airbnbSingleDatepickerRef.current);\n\n    if (datepickerElement) {\n      var dpInput = datepickerElement.getElementsByClassName('DateInput_input');\n      inputValue = dpInput[0].value;\n    }\n\n    if (required) {\n      isSingleDateValid = date ? moment(date).isValid() : false;\n\n      if (!isSingleDateValid) {\n        errorString = errorPhrases.errorRequiredDate;\n      }\n    } else {\n      isSingleDateValid = date === null || moment(date).isValid();\n\n      if (!isSingleDateValid) {\n        errorString = errorPhrases.errorInvalidDate;\n      }\n    }\n\n    if (date === null && !!inputValue) {\n      isSingleDateValid = false;\n      var inputMoment = moment(inputValue, 'DD.MM.YYYY');\n      var isMinValid = isMinimumDateValid(inputMoment, minimumDate);\n      var isMaxValid = isMaximumDateValid(inputMoment, maximumDate);\n\n      if (!inputMoment.isValid()) {\n        errorString = errorPhrases.errorInvalidDate;\n      } else if (!isMinValid) {\n        errorString = \"\".concat(errorPhrases.errorBeforeMinDate, \": \").concat(minimumDate === null || minimumDate === void 0 ? void 0 : minimumDate.format('DD.MM.YYYY'));\n      } else if (!isMaxValid) {\n        errorString = \"\".concat(errorPhrases.errorAfterMaxDate, \": \").concat(maximumDate === null || maximumDate === void 0 ? void 0 : maximumDate.format('DD.MM.YYYY'));\n      } else {\n        errorString = errorPhrases.errorInvalidDate;\n      }\n    } else if (date && isSingleDateValid) {\n      var _isMinValid = isMinimumDateValid(date, minimumDate);\n\n      var _isMaxValid = isMaximumDateValid(date, maximumDate);\n\n      if (!_isMinValid) {\n        isSingleDateValid = false;\n        errorString = \"\".concat(errorPhrases.errorBeforeMinDate, \": \").concat(minimumDate === null || minimumDate === void 0 ? void 0 : minimumDate.format('DD.MM.YYYY'));\n      } else if (!_isMaxValid) {\n        isSingleDateValid = false;\n        errorString = \"\".concat(errorPhrases.errorAfterMaxDate, \": \").concat(maximumDate === null || maximumDate === void 0 ? void 0 : maximumDate.format('DD.MM.YYYY'));\n      }\n    }\n\n    if (date && isSingleDateValid && dateValidator) {\n      var isValidObject = dateValidator(id, date);\n      isSingleDateValid = isValidObject.isValid;\n      errorString = isValidObject.errorString || errorPhrases.errorInvalidDate;\n    }\n  } catch (e) {\n    warn(\"Det skjedde en feil ved validering av datoen i DateRangePicker. Dette kan skyldes Airbnb Datepicker med verdi \".concat(date, \" eller React-dom som pr\\xF8ver \\xE5 hente  ReactDOM.findDOMNode(this.airbnbSingleDatepickerRef.current)\"));\n  }\n\n  return {\n    isSingleDateValid: isSingleDateValid,\n    errorString: errorString\n  };\n};\nexport var validateRangeDate = function validateRangeDate(airbnbDateRangepickerRef, startDate, endDate, id, required, errorPhrases, minimumDate, maximumDate, minimumPeriod, dateValidator) {\n  var isRangeDateValid = true;\n  var errorString;\n  var inputValueStart;\n  var inputValueEnd;\n\n  try {\n    var dp = ReactDOM.findDOMNode(airbnbDateRangepickerRef.current);\n\n    if (dp) {\n      var dpInput = dp.getElementsByClassName('DateInput_input');\n      inputValueStart = dpInput[0].value;\n      inputValueEnd = dpInput[1].value;\n    }\n\n    if (required) {\n      isRangeDateValid = startDate && endDate ? moment(startDate).isValid() && moment(endDate).isValid() : false;\n\n      if (!isRangeDateValid) {\n        errorString = errorPhrases.errorRequiredDateRange;\n      }\n    } else {\n      var isStartDateValid = startDate === null || moment(startDate).isValid();\n      var isEndDateValid = endDate === null || moment(endDate).isValid();\n      isRangeDateValid = isStartDateValid && isEndDateValid;\n\n      if (!(isStartDateValid && isEndDateValid)) {\n        errorString = errorPhrases.errorInvalidDateRange;\n      }\n    }\n\n    if (startDate === null && !!inputValueStart) {\n      isRangeDateValid = false;\n      var inputMomentStart = moment(inputValueStart, 'DD.MM.YYYY');\n      var isMinValid = isMinimumDateValid(inputMomentStart, minimumDate);\n      var isMaxValid = isMaximumDateValid(inputMomentStart, maximumDate);\n\n      if (!inputMomentStart.isValid()) {\n        errorString = errorPhrases.errorInvalidDateRange;\n      } else if (!isMinValid) {\n        errorString = errorPhrases.errorBeforeMinDate;\n      } else if (!isMaxValid) {\n        errorString = errorPhrases.errorAfterMaxDate;\n      } else if (minimumPeriod && endDate && Math.abs(moment(inputValueStart, 'DD.MM.YYYY').diff(endDate, 'days')) + 1 < minimumPeriod) {\n        errorString = errorPhrases.errorInvalidMinimumNights + minimumPeriod;\n      } else {\n        errorString = errorPhrases.errorInvalidDateRange;\n      }\n    } else if (endDate === null && !!inputValueEnd) {\n      isRangeDateValid = false;\n      var inputMomentEnd = moment(inputValueEnd, 'DD.MM.YYYY');\n\n      var _isMinValid2 = isMinimumDateValid(inputMomentEnd, minimumDate);\n\n      var _isMaxValid2 = isMaximumDateValid(inputMomentEnd, maximumDate);\n\n      if (!inputMomentEnd.isValid()) {\n        errorString = errorPhrases.errorInvalidDateRange;\n      } else if (!_isMinValid2) {\n        errorString = errorPhrases.errorBeforeMinDate;\n      } else if (!_isMaxValid2) {\n        errorString = errorPhrases.errorAfterMaxDate;\n      } else if (minimumPeriod && startDate && Math.abs(startDate.diff(moment(inputValueEnd, 'DD.MM.YYYY'), 'days')) + 1 < minimumPeriod) {\n        errorString = errorPhrases.errorInvalidMinimumNights + minimumPeriod;\n      } else {\n        errorString = errorPhrases.errorInvalidDateRange;\n      }\n    } else if (startDate && endDate && isRangeDateValid) {\n      var _isMinValid3 = isMinimumDateValid(startDate, minimumDate);\n\n      var _isMaxValid3 = isMaximumDateValid(endDate, maximumDate);\n\n      if (!_isMinValid3) {\n        isRangeDateValid = false;\n        errorString = errorPhrases.errorBeforeMinDate;\n      } else if (!_isMaxValid3) {\n        isRangeDateValid = false;\n        errorString = errorPhrases.errorAfterMaxDate;\n      } else if (minimumPeriod && Math.abs(startDate.diff(endDate, 'days')) + 1 < minimumPeriod) {\n        isRangeDateValid = false;\n        errorString = errorPhrases.errorInvalidMinimumNights + minimumPeriod;\n      }\n    }\n\n    if (startDate && endDate && isRangeDateValid && dateValidator) {\n      var isValidObject = dateValidator(id, startDate, endDate);\n      isRangeDateValid = isValidObject.isValid;\n      errorString = isValidObject.errorString || errorPhrases.errorInvalidDateRange;\n    }\n  } catch (e) {\n    warn(\"Det skjedde en feil ved validering av datoen i DateRangePicker. Dette kan skyldes Airbnb Datepicker med verdi \".concat(startDate, \" og \").concat(endDate, \" eller React-dom som pr\\xF8ver \\xE5 hente  ReactDOM.findDOMNode(this.airbnbSingleDatepickerRef.current)\"));\n  }\n\n  return {\n    isRangeDateValid: isRangeDateValid,\n    errorString: errorString\n  };\n};","map":null,"metadata":{},"sourceType":"module"}