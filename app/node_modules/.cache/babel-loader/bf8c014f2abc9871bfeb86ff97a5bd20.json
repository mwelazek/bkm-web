{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ColorBlock } from '@rc-component/color-picker';\nimport classNames from 'classnames';\nimport React, { forwardRef, useMemo } from 'react';\nimport ColorClear from './ColorClear';\nconst ColorTrigger = /*#__PURE__*/forwardRef((props, ref) => {\n  const {\n    color,\n    prefixCls,\n    open,\n    colorCleared,\n    disabled,\n    className\n  } = props,\n        rest = __rest(props, [\"color\", \"prefixCls\", \"open\", \"colorCleared\", \"disabled\", \"className\"]);\n\n  const colorTriggerPrefixCls = `${prefixCls}-trigger`;\n  const containerNode = useMemo(() => colorCleared ? /*#__PURE__*/React.createElement(ColorClear, {\n    prefixCls: prefixCls\n  }) : /*#__PURE__*/React.createElement(ColorBlock, {\n    prefixCls: prefixCls,\n    color: color.toRgbString()\n  }), [color, colorCleared, prefixCls]);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: ref,\n    className: classNames(colorTriggerPrefixCls, className, {\n      [`${colorTriggerPrefixCls}-active`]: open,\n      [`${colorTriggerPrefixCls}-disabled`]: disabled\n    })\n  }, rest), containerNode);\n});\nexport default ColorTrigger;","map":null,"metadata":{},"sourceType":"module"}