{"ast":null,"code":"import * as ReactDOM from 'react-dom';\nimport moment from 'moment';\nimport { isInclusivelyBeforeDay, isInclusivelyAfterDay } from '@helsenorge/core-utils/moment-utils';\nimport { warn } from '@helsenorge/core-utils/logger';\nexport const isNextMonthValid = (date, maximumDate) => {\n  const nextMonth = moment(date);\n  nextMonth.add(1, 'month').date(1);\n  return isMaximumDateValid(nextMonth, maximumDate);\n};\nexport const isPrevMonthValid = (date, minimumDate) => {\n  const prevMonth = moment(date);\n  prevMonth.subtract(1, 'month').endOf('month');\n  return isMinimumDateValid(prevMonth, minimumDate);\n};\nexport const isMinimumDateValid = (date, minimumDate) => {\n  let isMinimumDateValid = true;\n\n  if (minimumDate) {\n    isMinimumDateValid = isInclusivelyAfterDay(date, minimumDate);\n  }\n\n  return isMinimumDateValid;\n};\nexport const isMaximumDateValid = (date, maximumDate) => {\n  let isMaximumDateValid = true;\n\n  if (maximumDate) {\n    isMaximumDateValid = isInclusivelyBeforeDay(date, maximumDate);\n  }\n\n  return isMaximumDateValid;\n};\nexport const isOutsideRange = (date, minimumDate, maximumDate) => {\n  const isMinValid = isMinimumDateValid(date, minimumDate);\n  const isMaxValid = isMaximumDateValid(date, maximumDate);\n  return !(isMinValid && isMaxValid);\n};\nexport const validateSingleDate = (airbnbSingleDatepickerRef, date, id, required, errorPhrases, minimumDate, maximumDate, dateValidator) => {\n  let isSingleDateValid = true;\n  let errorString;\n  let inputValue;\n\n  try {\n    const datepickerElement = ReactDOM.findDOMNode(airbnbSingleDatepickerRef.current);\n\n    if (datepickerElement) {\n      const dpInput = datepickerElement.getElementsByClassName('DateInput_input');\n      inputValue = dpInput[0].value;\n    }\n\n    if (required) {\n      isSingleDateValid = date ? moment(date).isValid() : false;\n\n      if (!isSingleDateValid) {\n        errorString = errorPhrases.errorRequiredDate;\n      }\n    } else {\n      isSingleDateValid = date === null || moment(date).isValid();\n\n      if (!isSingleDateValid) {\n        errorString = errorPhrases.errorInvalidDate;\n      }\n    }\n\n    if (date === null && !!inputValue) {\n      isSingleDateValid = false;\n      const inputMoment = moment(inputValue, 'DD.MM.YYYY');\n      const isMinValid = isMinimumDateValid(inputMoment, minimumDate);\n      const isMaxValid = isMaximumDateValid(inputMoment, maximumDate);\n\n      if (!inputMoment.isValid()) {\n        errorString = errorPhrases.errorInvalidDate;\n      } else if (!isMinValid) {\n        errorString = `${errorPhrases.errorBeforeMinDate}: ${minimumDate === null || minimumDate === void 0 ? void 0 : minimumDate.format('DD.MM.YYYY')}`;\n      } else if (!isMaxValid) {\n        errorString = `${errorPhrases.errorAfterMaxDate}: ${maximumDate === null || maximumDate === void 0 ? void 0 : maximumDate.format('DD.MM.YYYY')}`;\n      } else {\n        errorString = errorPhrases.errorInvalidDate;\n      }\n    } else if (date && isSingleDateValid) {\n      const isMinValid = isMinimumDateValid(date, minimumDate);\n      const isMaxValid = isMaximumDateValid(date, maximumDate);\n\n      if (!isMinValid) {\n        isSingleDateValid = false;\n        errorString = `${errorPhrases.errorBeforeMinDate}: ${minimumDate === null || minimumDate === void 0 ? void 0 : minimumDate.format('DD.MM.YYYY')}`;\n      } else if (!isMaxValid) {\n        isSingleDateValid = false;\n        errorString = `${errorPhrases.errorAfterMaxDate}: ${maximumDate === null || maximumDate === void 0 ? void 0 : maximumDate.format('DD.MM.YYYY')}`;\n      }\n    }\n\n    if (date && isSingleDateValid && dateValidator) {\n      const isValidObject = dateValidator(id, date);\n      isSingleDateValid = isValidObject.isValid;\n      errorString = isValidObject.errorString || errorPhrases.errorInvalidDate;\n    }\n  } catch (e) {\n    warn(`Det skjedde en feil ved validering av datoen i DateRangePicker. Dette kan skyldes Airbnb Datepicker med verdi ${date} eller React-dom som prøver å hente  ReactDOM.findDOMNode(this.airbnbSingleDatepickerRef.current)`);\n  }\n\n  return {\n    isSingleDateValid,\n    errorString\n  };\n};\nexport const validateRangeDate = (airbnbDateRangepickerRef, startDate, endDate, id, required, errorPhrases, minimumDate, maximumDate, minimumPeriod, dateValidator) => {\n  let isRangeDateValid = true;\n  let errorString;\n  let inputValueStart;\n  let inputValueEnd;\n\n  try {\n    const dp = ReactDOM.findDOMNode(airbnbDateRangepickerRef.current);\n\n    if (dp) {\n      const dpInput = dp.getElementsByClassName('DateInput_input');\n      inputValueStart = dpInput[0].value;\n      inputValueEnd = dpInput[1].value;\n    }\n\n    if (required) {\n      isRangeDateValid = startDate && endDate ? moment(startDate).isValid() && moment(endDate).isValid() : false;\n\n      if (!isRangeDateValid) {\n        errorString = errorPhrases.errorRequiredDateRange;\n      }\n    } else {\n      const isStartDateValid = startDate === null || moment(startDate).isValid();\n      const isEndDateValid = endDate === null || moment(endDate).isValid();\n      isRangeDateValid = isStartDateValid && isEndDateValid;\n\n      if (!(isStartDateValid && isEndDateValid)) {\n        errorString = errorPhrases.errorInvalidDateRange;\n      }\n    }\n\n    if (startDate === null && !!inputValueStart) {\n      isRangeDateValid = false;\n      const inputMomentStart = moment(inputValueStart, 'DD.MM.YYYY');\n      const isMinValid = isMinimumDateValid(inputMomentStart, minimumDate);\n      const isMaxValid = isMaximumDateValid(inputMomentStart, maximumDate);\n\n      if (!inputMomentStart.isValid()) {\n        errorString = errorPhrases.errorInvalidDateRange;\n      } else if (!isMinValid) {\n        errorString = errorPhrases.errorBeforeMinDate;\n      } else if (!isMaxValid) {\n        errorString = errorPhrases.errorAfterMaxDate;\n      } else if (minimumPeriod && endDate && Math.abs(moment(inputValueStart, 'DD.MM.YYYY').diff(endDate, 'days')) + 1 < minimumPeriod) {\n        errorString = errorPhrases.errorInvalidMinimumNights + minimumPeriod;\n      } else {\n        errorString = errorPhrases.errorInvalidDateRange;\n      }\n    } else if (endDate === null && !!inputValueEnd) {\n      isRangeDateValid = false;\n      const inputMomentEnd = moment(inputValueEnd, 'DD.MM.YYYY');\n      const isMinValid = isMinimumDateValid(inputMomentEnd, minimumDate);\n      const isMaxValid = isMaximumDateValid(inputMomentEnd, maximumDate);\n\n      if (!inputMomentEnd.isValid()) {\n        errorString = errorPhrases.errorInvalidDateRange;\n      } else if (!isMinValid) {\n        errorString = errorPhrases.errorBeforeMinDate;\n      } else if (!isMaxValid) {\n        errorString = errorPhrases.errorAfterMaxDate;\n      } else if (minimumPeriod && startDate && Math.abs(startDate.diff(moment(inputValueEnd, 'DD.MM.YYYY'), 'days')) + 1 < minimumPeriod) {\n        errorString = errorPhrases.errorInvalidMinimumNights + minimumPeriod;\n      } else {\n        errorString = errorPhrases.errorInvalidDateRange;\n      }\n    } else if (startDate && endDate && isRangeDateValid) {\n      const isMinValid = isMinimumDateValid(startDate, minimumDate);\n      const isMaxValid = isMaximumDateValid(endDate, maximumDate);\n\n      if (!isMinValid) {\n        isRangeDateValid = false;\n        errorString = errorPhrases.errorBeforeMinDate;\n      } else if (!isMaxValid) {\n        isRangeDateValid = false;\n        errorString = errorPhrases.errorAfterMaxDate;\n      } else if (minimumPeriod && Math.abs(startDate.diff(endDate, 'days')) + 1 < minimumPeriod) {\n        isRangeDateValid = false;\n        errorString = errorPhrases.errorInvalidMinimumNights + minimumPeriod;\n      }\n    }\n\n    if (startDate && endDate && isRangeDateValid && dateValidator) {\n      const isValidObject = dateValidator(id, startDate, endDate);\n      isRangeDateValid = isValidObject.isValid;\n      errorString = isValidObject.errorString || errorPhrases.errorInvalidDateRange;\n    }\n  } catch (e) {\n    warn(`Det skjedde en feil ved validering av datoen i DateRangePicker. Dette kan skyldes Airbnb Datepicker med verdi ${startDate} og ${endDate} eller React-dom som prøver å hente  ReactDOM.findDOMNode(this.airbnbSingleDatepickerRef.current)`);\n  }\n\n  return {\n    isRangeDateValid,\n    errorString\n  };\n};","map":null,"metadata":{},"sourceType":"module"}