{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport moment from 'moment';\nimport 'react-dates/initialize';\nimport { LanguageLocales } from '@helsenorge/core-utils/constants/languages';\nimport { isMobileUA } from '@helsenorge/core-utils/user-agents-utils';\nimport ValidationError from '../form/validation-error';\nimport { DEFAULT_DATE_PLACEHOLDER_NB, DEFAULT_DATE_PLACEHOLDER_EN, DEFAULT_STARTDATE_PLACEHOLDER, DEFAULT_ENDDATE_PLACEHOLDER } from './../../../constants/datetime';\nimport { renderDesktopDatePicker } from './date-range-picker-desktop';\nimport { DateRangePickerLabel } from './date-range-picker-label';\nimport { renderMobileDatePicker } from './date-range-picker-mobile';\nimport { START_DATE_ID, END_DATE_ID, Phrases, ErrorPhrases, getCSSClasses, getDateNOString, notifyValidated, getDefaultVisibleMonth } from './date-range-picker-utils';\nimport { validateSingleDate, validateRangeDate, isPrevMonthValid, isNextMonthValid } from './date-range-picker-validation';\nimport 'react-dates/lib/css/_datepicker.css';\nimport toolkitstyles from './styles.module.scss';\nexport var DateRangePicker = /*#__PURE__*/function (_React$Component) {\n  _inherits(DateRangePicker, _React$Component);\n\n  var _super = _createSuper(DateRangePicker);\n\n  function DateRangePicker(props) {\n    var _this;\n\n    _classCallCheck(this, DateRangePicker);\n\n    var _a, _b, _c;\n\n    _this = _super.call(this, props);\n\n    _this.onSingleDateChange = function (singleDate) {\n      _this.setState({\n        singleDate: singleDate\n      });\n\n      _this.props.onDateChange && _this.props.onDateChange(singleDate, _this.props.id);\n    };\n\n    _this.onStartDateChange = function (startDate) {\n      _this.setState({\n        startDate: startDate\n      });\n\n      _this.props.onDateChange && _this.props.onDateChange({\n        start: startDate,\n        end: _this.state.endDate\n      }, _this.props.id);\n    };\n\n    _this.onEndDateChange = function (endDate) {\n      _this.setState({\n        endDate: endDate\n      });\n\n      _this.props.onDateChange && _this.props.onDateChange({\n        start: _this.state.startDate,\n        end: endDate\n      }, _this.props.id);\n    };\n\n    _this.onRangeDatesChange = function (_ref) {\n      var startDate = _ref.startDate,\n          endDate = _ref.endDate;\n\n      _this.setState({\n        startDate: startDate,\n        endDate: endDate\n      });\n\n      _this.props.onDateChange && _this.props.onDateChange({\n        start: startDate,\n        end: endDate\n      }, _this.props.id);\n    };\n\n    _this.singleDateValidator = function (date) {\n      var _this$props = _this.props,\n          id = _this$props.id,\n          isRequired = _this$props.isRequired,\n          errorResources = _this$props.errorResources,\n          minimumDate = _this$props.minimumDate,\n          maximumDate = _this$props.maximumDate,\n          dateValidator = _this$props.dateValidator,\n          onValidated = _this$props.onValidated,\n          onError = _this$props.onError;\n      var v = validateSingleDate(_this.airbnbSingleDatepickerRef, date, id, isRequired, errorResources, minimumDate, maximumDate, dateValidator);\n      return new Promise(function (resolve) {\n        _this.setState({\n          validated: true,\n          isSingleDateValid: v.isSingleDateValid,\n          errorString: v.errorString\n        }, function () {\n          notifyValidated(id, date, v.isSingleDateValid, v.errorString, onValidated, onError);\n          resolve();\n        });\n      });\n    };\n\n    _this.rangeDateValidator = function (startDate, endDate) {\n      var _this$props2 = _this.props,\n          id = _this$props2.id,\n          isRequired = _this$props2.isRequired,\n          errorResources = _this$props2.errorResources,\n          minimumDate = _this$props2.minimumDate,\n          maximumDate = _this$props2.maximumDate,\n          minimumPeriod = _this$props2.minimumPeriod,\n          dateValidator = _this$props2.dateValidator,\n          onValidated = _this$props2.onValidated,\n          onError = _this$props2.onError;\n      var v = validateRangeDate(_this.airbnbDateRangepickerRef, startDate, endDate, id, isRequired, errorResources, minimumDate, maximumDate, minimumPeriod, dateValidator);\n      return new Promise(function (resolve) {\n        _this.setState({\n          validated: true,\n          isRangeDateValid: v.isRangeDateValid,\n          errorString: v.errorString\n        }, function () {\n          notifyValidated(id, {\n            start: startDate,\n            end: endDate\n          }, v.isRangeDateValid, v.errorString, onValidated, onError);\n          resolve();\n        });\n      });\n    };\n\n    _this.onSingleDateFocusChange = function (_ref2) {\n      var focused = _ref2.focused;\n\n      if (!focused) {\n        setTimeout(function () {\n          _this.validateField();\n        }, 0);\n      }\n\n      if (focused !== _this.state.isSingleDateFocused) {\n        _this.setState({\n          isSingleDateFocused: focused\n        });\n      }\n    };\n\n    _this.onRangeDatesFocusChange = function (focusedInput) {\n      setTimeout(function () {\n        if (_this.state.focusedInput === null) {\n          _this.validateField();\n\n          _this.setState({\n            isFocusReset: true\n          });\n        }\n      }, 0);\n\n      _this.setState({\n        focusedInput: focusedInput\n      });\n\n      if (_this.state.isFocusReset) {\n        _this.setState({\n          isFocusReset: false\n        });\n      }\n    };\n\n    _this.onCalenderIconClick = function () {\n      if (_this.state.isSingleDateFocused) {\n        _this.setState({\n          isSingleDateFocused: false\n        });\n      } else if (_this.state.focusedInput) {\n        _this.setState({\n          focusedInput: null\n        });\n      }\n\n      _this.setState({\n        isFocusReset: true\n      });\n    };\n\n    _this.getErrorString = function () {\n      return _this.state.errorString;\n    };\n\n    _this.onBlurHandler = function () {\n      _this.validateField();\n\n      _this.setState({\n        isFocusReset: true\n      });\n    };\n\n    _this.disableMonthSelectorHandler = function (date) {\n      var disabledNext = !isNextMonthValid(date, _this.props.maximumDate);\n\n      _this.setState({\n        isNextMonthDisabled: disabledNext\n      });\n\n      var disabledPrev = !isPrevMonthValid(date, _this.props.minimumDate);\n\n      _this.setState({\n        isPrevMonthDisabled: disabledPrev\n      });\n    };\n\n    _this.onChangeVisibleMonthHandler = function (date) {\n      _this.setState({\n        visibleMonth: date\n      });\n    };\n\n    var momentLocale = moment();\n\n    if (props.locale === LanguageLocales.ENGLISH) {\n      require('moment/locale/en-gb');\n\n      momentLocale.locale('en-gb');\n    } else {\n      require('moment/locale/nb');\n\n      momentLocale.locale('nb');\n    }\n\n    _this.airbnbSingleDatepickerRef = React.createRef();\n    _this.airbnbDateRangepickerRef = React.createRef();\n    _this.state = {\n      isMobile: isMobileUA(),\n      momentLocale: momentLocale.localeData(),\n      placeholder: props.placeholder ? props.placeholder : props.locale === LanguageLocales.ENGLISH ? DEFAULT_DATE_PLACEHOLDER_EN : DEFAULT_DATE_PLACEHOLDER_NB,\n      singleDate: (_a = props.singleDateValue) !== null && _a !== void 0 ? _a : null,\n      isSingleDateFocused: null,\n      isSingleDateValid: true,\n      startDate: (_b = props.startDateValue) !== null && _b !== void 0 ? _b : null,\n      endDate: (_c = props.endDateValue) !== null && _c !== void 0 ? _c : null,\n      isRangeDateValid: true,\n      validated: false,\n      focusedInput: null,\n      visibleMonth: getDefaultVisibleMonth(props)\n    };\n    return _this;\n  }\n\n  _createClass(DateRangePicker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.disableMonthSelectorHandler(this.state.visibleMonth);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _a, _b, _c;\n\n      if (prevProps.type === 'single') {\n        var prevPropSingleDateValue = getDateNOString(prevProps.singleDateValue);\n        var prevStateSingleDate = getDateNOString(prevState.singleDate);\n        var currentSingleDateValue = getDateNOString(this.props.singleDateValue);\n\n        if (prevPropSingleDateValue !== currentSingleDateValue && prevStateSingleDate !== currentSingleDateValue) {\n          this.setState({\n            singleDate: (_a = this.props.singleDateValue) !== null && _a !== void 0 ? _a : null,\n            visibleMonth: getDefaultVisibleMonth(this.props)\n          }, function () {\n            if (!_this2.state.isSingleDateFocused) {\n              _this2.singleDateValidator(_this2.state.singleDate);\n            }\n          });\n        }\n      } else {\n        var prevPropStartDateValue = getDateNOString(prevProps.startDateValue);\n        var prevStateStartDate = getDateNOString(prevState.startDate);\n        var currentStartDateValue = getDateNOString(this.props.startDateValue);\n        var prevPropEndDateValue = getDateNOString(prevProps.endDateValue);\n        var prevStateEndDate = getDateNOString(prevState.endDate);\n        var currentEndDateValue = getDateNOString(this.props.endDateValue);\n\n        if (prevPropStartDateValue !== currentStartDateValue && prevStateStartDate !== currentStartDateValue) {\n          this.setState({\n            startDate: (_b = this.props.startDateValue) !== null && _b !== void 0 ? _b : null\n          }, function () {\n            if (_this2.state.focusedInput === null) {\n              _this2.rangeDateValidator(_this2.state.startDate, _this2.state.endDate);\n            }\n          });\n        }\n\n        if (prevPropEndDateValue !== currentEndDateValue && prevStateEndDate !== currentEndDateValue) {\n          this.setState({\n            endDate: (_c = this.props.endDateValue) !== null && _c !== void 0 ? _c : null\n          }, function () {\n            if (_this2.state.focusedInput === null) {\n              _this2.rangeDateValidator(_this2.state.startDate, _this2.state.endDate);\n            }\n          });\n        }\n      }\n\n      if (prevState.visibleMonth !== this.state.visibleMonth || prevProps.maximumDate && this.props.maximumDate && !prevProps.maximumDate.isSame(this.props.maximumDate, 'month') || prevProps.minimumDate && this.props.minimumDate && !prevProps.minimumDate.isSame(this.props.minimumDate, 'month')) {\n        this.disableMonthSelectorHandler(this.state.visibleMonth);\n      }\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField() {\n      return this.props.type === 'single' ? this.singleDateValidator(this.state.singleDate) : this.rangeDateValidator(this.state.startDate, this.state.endDate);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return this.props.type === 'single' ? this.state.isSingleDateValid : this.state.isRangeDateValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          locale = _a.locale,\n          className = _a.className,\n          label = _a.label,\n          isLabelHidden = _a.isLabelHidden,\n          requiredLabel = _a.requiredLabel,\n          optionalLabel = _a.optionalLabel,\n          subLabel = _a.subLabel,\n          helpButton = _a.helpButton,\n          helpElement = _a.helpElement,\n          isValidationHidden = _a.isValidationHidden,\n          validationErrorRenderer = _a.validationErrorRenderer,\n          partialPropsForDesktop = __rest(_a, [\"locale\", \"className\", \"label\", \"isLabelHidden\", \"requiredLabel\", \"optionalLabel\", \"subLabel\", \"helpButton\", \"helpElement\", \"isValidationHidden\", \"validationErrorRenderer\"]);\n\n      var _this$state = this.state,\n          isSingleDateValid = _this$state.isSingleDateValid,\n          isRangeDateValid = _this$state.isRangeDateValid,\n          errorString = _this$state.errorString;\n      var id = partialPropsForDesktop.id,\n          type = partialPropsForDesktop.type,\n          isRequired = partialPropsForDesktop.isRequired;\n      var hasErrors = type === 'single' ? !isSingleDateValid : type === 'range' ? !isRangeDateValid : false;\n      var classes = getCSSClasses(toolkitstyles.datepicker, toolkitstyles['datepicker--haserror'], !isValidationHidden, hasErrors, className);\n      moment.locale(locale);\n      return React.createElement(\"div\", {\n        id: \"\".concat(id, \"-wrapper\"),\n        className: classes\n      }, React.createElement(\"fieldset\", null, hasErrors && validationErrorRenderer, !isValidationHidden && hasErrors && React.createElement(ValidationError, {\n        isValid: !hasErrors,\n        error: errorString ? errorString : 'Error'\n      }), label && React.createElement(DateRangePickerLabel, {\n        label: label,\n        locale: locale,\n        isLabelHidden: isLabelHidden,\n        isRequired: isRequired,\n        requiredLabel: requiredLabel,\n        optionalLabel: optionalLabel,\n        helpButton: helpButton,\n        subLabel: subLabel\n      }), helpElement !== null && helpElement !== void 0 ? helpElement : null, this.state.isMobile ? renderMobileDatePicker(this.props, this.state, this.onSingleDateChange, this.onStartDateChange, this.onEndDateChange, this.onBlurHandler) : renderDesktopDatePicker(partialPropsForDesktop, this.state, this.airbnbSingleDatepickerRef, this.airbnbDateRangepickerRef, this.onSingleDateChange, this.onSingleDateFocusChange, this.onRangeDatesChange, this.onRangeDatesFocusChange, this.onCalenderIconClick, this.onChangeVisibleMonthHandler)));\n    }\n  }]);\n\n  return DateRangePicker;\n}(React.Component);\nDateRangePicker.defaultProps = {\n  id: 'daterangepicker',\n  resources: Phrases,\n  errorResources: ErrorPhrases,\n  startDateId: START_DATE_ID,\n  startDatePlaceholderText: DEFAULT_STARTDATE_PLACEHOLDER,\n  endDateId: END_DATE_ID,\n  endDatePlaceholderText: DEFAULT_ENDDATE_PLACEHOLDER,\n  showDefaultInputIcon: true,\n  isValidationHidden: false,\n  isRequired: false,\n  isDisabled: false,\n  numberOfMonths: 1\n};\nexport default DateRangePicker;","map":null,"metadata":{},"sourceType":"module"}