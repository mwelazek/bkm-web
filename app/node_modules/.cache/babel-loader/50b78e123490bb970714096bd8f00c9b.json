{"ast":null,"code":"import _defineProperty from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport LastOpp from '../../icons/LastOpp';\nimport { FunctionButton } from '../buttons/function-button';\nimport { Label } from './../label';\nimport MessageBox from '../message-box';\nimport { Spinner } from '../spinner';\nimport ValidationError from './../../molecules/form/validation-error';\nimport FileElement, { Type } from './file';\nimport { sizeIsValid, typeIsValid, mimeTypeIsValid } from './validation';\nimport OriginalDropzone from 'react-dropzone';\nimport styles from './toolkitstyles.module.scss';\n\nvar Dropzone = /*#__PURE__*/function (_React$Component) {\n  _inherits(Dropzone, _React$Component);\n\n  var _super = _createSuper(Dropzone);\n\n  function Dropzone(props) {\n    var _this;\n\n    _classCallCheck(this, Dropzone);\n\n    _this = _super.call(this, props);\n    _this.ctrls = {};\n\n    _this.onDrop = function (acceptedFiles, _fileRejections, event) {\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n\n      var rejected = [];\n      var uploaded = [];\n\n      var _iterator = _createForOfIteratorHelper(acceptedFiles),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var f = _step.value;\n\n          if (_this.validateFile(f)) {\n            uploaded.push(f);\n          } else {\n            rejected.push(f);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (uploaded.length > 0) {\n        _this.setState({\n          loading: true\n        });\n\n        _this.props.onDrop(uploaded, function (success, errormessage) {\n          if (success) {\n            _this.setState({\n              loading: false,\n              rejectedFiles: rejected\n            }, _this.validateOnDrop);\n          } else {\n            _this.setState({\n              loading: false,\n              rejectedFiles: rejected,\n              errormessage: errormessage\n            });\n          }\n        });\n      } else {\n        _this.setState({\n          rejectedFiles: rejected\n        }, _this.validateOnDrop);\n      }\n    };\n\n    _this.onDelete = function (fileId) {\n      if (_this.props.onDelete) {\n        _this.setState({\n          loading: true\n        });\n\n        _this.props.onDelete(fileId, function (success) {\n          if (success) {\n            _this.setState({\n              loading: false\n            });\n          } else {\n            _this.setState({\n              loading: false\n            });\n          }\n        });\n      }\n    };\n\n    _this.deleteRejected = function (fileId) {\n      if (_this.state.rejectedFiles) {\n        var newRejectedFiles = _this.state.rejectedFiles.filter(function (f) {\n          return f.name !== fileId;\n        });\n\n        _this.setState({\n          rejectedFiles: newRejectedFiles\n        }, _this.validateOnDrop);\n      }\n    };\n\n    _this.updateValid = function (valid) {\n      return new Promise(function (resolve) {\n        _this.setState({\n          isValid: valid\n        }, function () {\n          if (_this.props.onValidated) {\n            _this.props.onValidated(valid);\n          }\n\n          resolve();\n        });\n      });\n    };\n\n    _this.validateField = function () {\n      var validRejected = _this.validateRejectedFiles();\n\n      var validRequired = _this.validateRequired();\n\n      var validMin = _this.validateMin();\n\n      var validMax = _this.validateMax();\n\n      return _this.updateValid(validRejected && validRequired && validMin && validMax);\n    };\n\n    _this.validateOnDrop = function () {\n      var validRejected = _this.validateRejectedFiles();\n\n      var validMax = _this.validateMax();\n\n      return _this.updateValid(validRejected && validMax);\n    };\n\n    _this.validateRejectedFiles = function () {\n      if (_this.state.rejectedFiles && _this.state.rejectedFiles.length > 0) return false;\n      return true;\n    };\n\n    _this.validateRequired = function () {\n      if (!_this.props.isRequired) return true;\n      if (!_this.props.uploadedFiles) return false;\n\n      if (!_this.props.shouldUploadMultiple) {\n        return _this.props.uploadedFiles.length === 1;\n      }\n\n      return _this.props.uploadedFiles.length > 0;\n    };\n\n    _this.validateMin = function () {\n      if (_this.props.minFiles && _this.props.uploadedFiles && _this.props.uploadedFiles.length > 0 && _this.props.uploadedFiles.length < _this.props.minFiles) return false;\n      return true;\n    };\n\n    _this.validateMax = function () {\n      if (_this.props.maxFiles && _this.props.uploadedFiles && _this.props.uploadedFiles.length > _this.props.maxFiles) return false;\n      return true;\n    };\n\n    _this.validateFile = function (file) {\n      var valid = true;\n\n      if (_this.props.maxFileSize) {\n        valid = valid && sizeIsValid(file, _this.props.maxFileSize);\n      }\n\n      if (_this.props.validFileTypes) {\n        valid = valid && typeIsValid(file, _this.props.validFileTypes);\n      }\n\n      if (_this.props.validMimeTypes) {\n        valid = valid && mimeTypeIsValid(file, _this.props.validMimeTypes);\n      }\n\n      return valid;\n    };\n\n    _this.onOpenClick = function () {\n      if (_this.ctrls.dropzone) _this.ctrls.dropzone.open();\n    };\n\n    _this.renderLabel = function () {\n      if (_this.props.label !== undefined) {\n        var labelText = React.createElement(React.Fragment, null, _this.props.label, _this.props.isRequired && _this.props.requiredLabel && _this.props.showRequiredLabel ? React.createElement(\"em\", null, \" \", _this.props.requiredLabel) : '', !_this.props.isRequired && _this.props.optionalLabel && _this.props.showOptionalLabel ? React.createElement(\"em\", null, \" \", _this.props.optionalLabel) : '');\n        return React.createElement(Label, {\n          labelText: labelText,\n          htmlFor: _this.props.id,\n          sublabelText: _this.props.subLabel,\n          testId: _this.props.labelTestId,\n          helpButton: _this.props.helpButton\n        });\n      }\n\n      return null;\n    };\n\n    _this.renderHelp = function () {\n      if (_this.props.helpElement) {\n        return _this.props.helpElement;\n      }\n\n      return null;\n    };\n\n    _this.renderSupportedFormats = function () {\n      if (_this.props.supportedFileFormatsText) {\n        return React.createElement(\"div\", {\n          className: styles.dropzone__acceptedFormats\n        }, _this.props.supportedFileFormatsText);\n      }\n\n      return null;\n    };\n\n    _this.renderUploadButton = function () {\n      if (_this.shouldRenderUploadButton()) {\n        return React.createElement(FunctionButton, {\n          id: _this.props.id,\n          svgIcon: React.createElement(LastOpp, null),\n          disabled: _this.props.disabled,\n          onClick: _this.onOpenClick,\n          className: \"\".concat(styles.dropzone__uploadButton, \" \").concat(_this.props.uploadButtonClassName),\n          testId: _this.props.functionButtonTestId\n        }, _this.props.uploadButtonText);\n      }\n    };\n\n    _this.shouldRenderUploadButton = function () {\n      var _a;\n\n      if (_this.state.loading) return false;\n      var numAcceptedFiles = _this.props.uploadedFiles ? _this.props.uploadedFiles.length : 0;\n      var numRejectedFiles = _this.state.rejectedFiles ? _this.state.rejectedFiles.length : 0;\n\n      if (!((_a = _this.props) === null || _a === void 0 ? void 0 : _a.shouldUploadMultiple)) {\n        return numAcceptedFiles + numRejectedFiles === 0;\n      }\n\n      if (_this.props.maxFiles) {\n        return numAcceptedFiles + numRejectedFiles < _this.props.maxFiles;\n      }\n\n      return true;\n    };\n\n    _this.hasUploadedFiles = function () {\n      return _this.props.uploadedFiles && _this.props.uploadedFiles.length > 0 ? true : false;\n    };\n\n    _this.renderDropzone = function () {\n      var _a;\n\n      return React.createElement(OriginalDropzone, {\n        ref: function ref(control) {\n          return _this.ctrls.dropzone = control;\n        },\n        onDrop: _this.onDrop,\n        onDragOver: function onDragOver() {\n          return _this.setState({\n            dragover: true\n          });\n        },\n        onDragLeave: function onDragLeave() {\n          return _this.setState({\n            dragover: false\n          });\n        },\n        multiple: !!((_a = _this.props) === null || _a === void 0 ? void 0 : _a.shouldUploadMultiple)\n      }, function (_ref) {\n        var getRootProps = _ref.getRootProps,\n            getInputProps = _ref.getInputProps;\n        return React.createElement(\"div\", Object.assign({\n          className: classNames(styles['dropzone__visual-dropzone'], _defineProperty({}, styles['dropzone__visual-dropzone--visible'], !!_this.props.visualDropZone), _defineProperty({}, styles['dropzone__visual-dropzone--dragover'], _this.state.dragover)),\n          \"data-testid\": _this.props.originalDropzoneTestId\n        }, getRootProps()), React.createElement(\"button\", {\n          className: classNames(styles['dropzone__visual-dropzone__button'], _defineProperty({}, styles['dropzone__visual-dropzone__button--visible'], !!_this.props.visualDropZone)),\n          type: \"button\",\n          onClick: function onClick() {\n            return open;\n          }\n        }, _this.props.chooseFilesText || 'Velg filer'), React.createElement(\"label\", {\n          className: classNames(styles['dropzone__visual-dropzone__label'], _defineProperty({}, styles['dropzone__visual-dropzone__label--visible'], !!_this.props.visualDropZone))\n        }, _this.props.dropzoneStatusText || 'Last opp fil', ' '), React.createElement(\"input\", Object.assign({}, getInputProps())));\n      });\n    };\n\n    _this.state = {\n      rejectedFiles: [],\n      loading: false,\n      isValid: true,\n      dragover: false\n    };\n    return _this;\n  }\n\n  _createClass(Dropzone, [{\n    key: \"renderValidationErrorMessage\",\n    value: function renderValidationErrorMessage() {\n      var error = '';\n\n      if (this.props.errorMessage && this.state.rejectedFiles) {\n        error = typeof this.props.errorMessage === 'string' ? this.props.errorMessage : this.props.errorMessage(this.state.rejectedFiles[0]);\n        return React.createElement(ValidationError, {\n          isValid: this.state.isValid,\n          error: error,\n          testId: this.props.validationTestId\n        });\n      }\n    }\n  }, {\n    key: \"renderErrorMessage\",\n    value: function renderErrorMessage() {\n      if (this.state.errormessage) {\n        return React.createElement(\"div\", {\n          className: styles.dropzone__errormessage\n        }, React.createElement(MessageBox, {\n          type: \"error\",\n          title: this.state.errormessage.Title,\n          description: this.state.errormessage.Body,\n          testId: this.props.messageBoxTestId\n        }));\n      }\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return this.state.isValid;\n    }\n  }, {\n    key: \"renderSpinner\",\n    value: function renderSpinner() {\n      if (this.state.loading && !this.props.noSpinner) {\n        return React.createElement(Spinner, {\n          inline: true,\n          mini: true,\n          className: styles.dropzone__spinner\n        });\n      }\n    }\n  }, {\n    key: \"renderFiles\",\n    value: function renderFiles() {\n      var rejectedFiles = [];\n      var uploadedFiles = [];\n\n      if (this.state.rejectedFiles) {\n        var count = 0;\n\n        var _iterator2 = _createForOfIteratorHelper(this.state.rejectedFiles),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var r = _step2.value;\n            rejectedFiles.push(React.createElement(FileElement, {\n              key: r.name + count++,\n              fileId: r.name,\n              type: Type.rejected,\n              fileName: r.name,\n              loading: this.state.loading,\n              shouldRenderDeleteButton: true,\n              deleteFile: this.deleteRejected,\n              onOpenFile: this.props.onOpenFile,\n              onRequestLink: this.props.onRequestLink,\n              deleteText: this.props.deleteText,\n              verifyDeleteText: this.props.verifyDeleteText,\n              confirmText: this.props.confirmText,\n              cancelText: this.props.cancelText,\n              confirmDelete: this.props.confirmDelete,\n              dontShowHardcodedText: this.props.dontShowHardcodedText,\n              confirmDeleteClassName: this.props.confirmDeleteClassName,\n              customClass: this.props.fileElementClassName\n            }));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      if (this.props.uploadedFiles) {\n        var _count = 0;\n\n        var _iterator3 = _createForOfIteratorHelper(this.props.uploadedFiles),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var u = _step3.value;\n            uploadedFiles.push(React.createElement(FileElement, {\n              key: \"\".concat(u.id).concat(_count++),\n              fileId: u.id,\n              type: Type.verified,\n              fileName: u.name,\n              loading: this.state.loading,\n              shouldRenderDeleteButton: this.props.onDelete ? true : false,\n              deleteFile: this.onDelete,\n              onOpenFile: this.props.onOpenFile,\n              onRequestLink: this.props.onRequestLink,\n              deleteText: this.props.deleteText,\n              verifyDeleteText: this.props.verifyDeleteText,\n              confirmText: this.props.confirmText,\n              cancelText: this.props.cancelText,\n              confirmDelete: this.props.confirmDelete,\n              dontShowHardcodedText: this.props.dontShowHardcodedText,\n              confirmDeleteClassName: this.props.confirmDeleteClassName,\n              customClass: this.props.fileElementClassName\n            }));\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      if (rejectedFiles.length !== 0 || uploadedFiles.length !== 0) {\n        return React.createElement(\"ul\", {\n          className: styles.dropzone__files\n        }, rejectedFiles, uploadedFiles);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var wrapperClasses = classNames(styles.dropzone, 'mol_validation', this.props.wrapperClasses, {\n        'mol_validation--active': !this.state.isValid\n      });\n      return React.createElement(\"div\", {\n        className: wrapperClasses,\n        id: \"\".concat(this.props.id, \"-wrapper\"),\n        \"data-testid\": this.props.wrapperTestId\n      }, this.renderValidationErrorMessage(), this.renderLabel(), this.renderHelp(), this.renderSupportedFormats(), this.renderSpinner(), this.renderFiles(), this.renderUploadButton(), this.renderErrorMessage(), this.renderDropzone(), this.props.children);\n    }\n  }]);\n\n  return Dropzone;\n}(React.Component);\n\nexport { Dropzone as default };","map":null,"metadata":{},"sourceType":"module"}