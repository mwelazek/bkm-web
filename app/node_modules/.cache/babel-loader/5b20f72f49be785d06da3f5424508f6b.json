{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst moment_1 = __importDefault(require(\"moment\"));\n\nconst react_redux_1 = require(\"react-redux\");\n\nconst date_core_1 = require(\"@helsenorge/toolkit/components/molecules/time-input/date-core\");\n\nconst languages_1 = require(\"@helsenorge/core-utils/constants/languages\");\n\nconst newValue_1 = require(\"../../../actions/newValue\");\n\nconst extensions_1 = __importDefault(require(\"../../../constants/extensions\"));\n\nconst itemcontrol_1 = __importDefault(require(\"../../../constants/itemcontrol\"));\n\nconst extension_1 = require(\"../../../util/extension\");\n\nconst fhirpathHelper_1 = require(\"../../../util/fhirpathHelper\");\n\nconst index_1 = require(\"../../../util/index\");\n\nconst map_props_1 = require(\"../../../util/map-props\");\n\nconst with_common_functions_1 = __importDefault(require(\"../../with-common-functions\"));\n\nconst label_1 = __importDefault(require(\"../label\"));\n\nconst sublabel_1 = __importDefault(require(\"../sublabel\"));\n\nconst date_day_input_1 = require(\"./date-day-input\");\n\nconst date_month_input_1 = require(\"./date-month-input\");\n\nconst date_year_input_1 = require(\"./date-year-input\");\n\nclass DateComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onDateValueChange = newValue => {\n      var _a;\n\n      const {\n        dispatch,\n        promptLoginMessage,\n        path,\n        item,\n        answer,\n        onAnswerChange\n      } = this.props;\n      const existingAnswer = (answer === null || answer === void 0 ? void 0 : answer.valueDate) || '';\n\n      if (dispatch && newValue !== existingAnswer) {\n        (_a = dispatch(newValue_1.newDateValueAsync(this.props.path, newValue, this.props.item))) === null || _a === void 0 ? void 0 : _a.then(newState => onAnswerChange(newState, path, item, {\n          valueDate: newValue\n        }));\n\n        if (promptLoginMessage) {\n          promptLoginMessage();\n        }\n      }\n    };\n\n    this.getLocaleFromLanguage = () => {\n      var _a;\n\n      if (((_a = this.props.language) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'en-gb') {\n        return languages_1.LanguageLocales.ENGLISH;\n      }\n\n      return languages_1.LanguageLocales.NORWEGIAN;\n    };\n\n    this.datepicker = React.createRef();\n  }\n\n  getStringValue() {\n    const {\n      answer\n    } = this.props;\n\n    if (answer && answer.valueDate) {\n      return answer.valueDate;\n    }\n\n    if (answer && answer.valueDateTime) {\n      return answer.valueDateTime;\n    }\n  }\n\n  getValue() {\n    const {\n      item,\n      answer\n    } = this.props;\n\n    if (answer && answer.valueDate) {\n      return date_core_1.parseDate(String(answer.valueDate));\n    }\n\n    if (answer && answer.valueDateTime) {\n      return date_core_1.parseDate(String(answer.valueDateTime));\n    }\n\n    if (!item || !item.initial || item.initial.length === 0) {\n      return undefined;\n    }\n\n    if (!item.initial[0].valueDate && !item.initial[0].valueDateTime) {\n      return undefined;\n    }\n\n    if (item.initial[0].valueDate) {\n      return date_core_1.parseDate(String(item.initial[0].valueDate));\n    }\n\n    return date_core_1.parseDate(String(item.initial[0].valueDateTime));\n  }\n\n  getMaxDate() {\n    const maxDate = extension_1.getExtension(extensions_1.default.DATE_MAX_VALUE_URL, this.props.item);\n\n    if (maxDate && maxDate.valueString) {\n      const fhirPathExpression = fhirpathHelper_1.evaluateFhirpathExpressionToGetDate(this.props.item, maxDate.valueString);\n      return fhirPathExpression ? moment_1.default(fhirPathExpression) : undefined;\n    }\n\n    const maxDateWithExtension = this.getMaxDateWithExtension();\n    return maxDateWithExtension ? moment_1.default(maxDateWithExtension) : undefined;\n  }\n\n  getMaxDateWithExtension() {\n    const maxDate = extension_1.getExtension(extensions_1.default.MAX_VALUE_URL, this.props.item);\n\n    if (maxDate && maxDate.valueDate) {\n      return date_core_1.parseDate(String(maxDate.valueDate));\n    } else if (maxDate && maxDate.valueDateTime) {\n      return date_core_1.parseDate(String(maxDate.valueDateTime));\n    } else if (maxDate && maxDate.valueInstant) {\n      return date_core_1.parseDate(String(maxDate.valueInstant));\n    }\n\n    return undefined;\n  }\n\n  getMinDate() {\n    const minDate = extension_1.getExtension(extensions_1.default.DATE_MIN_VALUE_URL, this.props.item);\n\n    if (minDate && minDate.valueString) {\n      const fhirPathExpression = fhirpathHelper_1.evaluateFhirpathExpressionToGetDate(this.props.item, minDate.valueString);\n      return fhirPathExpression ? moment_1.default(fhirPathExpression) : undefined;\n    }\n\n    const minDateWithExtension = this.getMinDateWithExtension();\n    return minDateWithExtension ? moment_1.default(minDateWithExtension) : undefined;\n  }\n\n  getMinDateWithExtension() {\n    const minDate = extension_1.getExtension(extensions_1.default.MIN_VALUE_URL, this.props.item);\n\n    if (minDate && minDate.valueDate) {\n      return date_core_1.parseDate(String(minDate.valueDate));\n    } else if (minDate && minDate.valueDateTime) {\n      return date_core_1.parseDate(String(minDate.valueDateTime));\n    } else if (minDate && minDate.valueInstant) {\n      return date_core_1.parseDate(String(minDate.valueInstant));\n    }\n\n    return undefined;\n  }\n\n  shouldComponentUpdate(nextProps) {\n    var _a;\n\n    const responseItemHasChanged = this.props.responseItem !== nextProps.responseItem;\n    const helpItemHasChanged = this.props.isHelpOpen !== nextProps.isHelpOpen;\n    const resourcesHasChanged = JSON.stringify(this.props.resources) !== JSON.stringify(nextProps.resources);\n    const repeats = (_a = this.props.item.repeats) !== null && _a !== void 0 ? _a : false;\n    return responseItemHasChanged || helpItemHasChanged || resourcesHasChanged || repeats;\n  }\n\n  render() {\n    const date = this.getValue();\n    const subLabelText = index_1.getSublabelText(this.props.item, this.props.onRenderMarkdown);\n    const itemControls = extension_1.getItemControlExtensionValue(this.props.item);\n    const labelEl = React.createElement(label_1.default, {\n      item: this.props.item,\n      onRenderMarkdown: this.props.onRenderMarkdown\n    });\n    const subLabelEl = subLabelText ? React.createElement(sublabel_1.default, {\n      subLabelText: subLabelText\n    }) : undefined;\n    let element = undefined;\n\n    if (itemControls && itemControls.some(itemControl => itemControl.code === itemcontrol_1.default.YEAR)) {\n      element = React.createElement(date_year_input_1.DateYearInput, Object.assign({\n        id: this.props.id,\n        pdf: this.props.pdf,\n        resources: this.props.resources,\n        label: labelEl,\n        subLabel: subLabelEl,\n        helpButton: this.props.renderHelpButton(),\n        helpElement: this.props.renderHelpElement(),\n        onDateValueChange: this.onDateValueChange,\n        className: this.props.className,\n        yearValue: date ? date.getFullYear() : undefined,\n        maxDate: this.getMaxDate(),\n        minDate: this.getMinDate()\n      }, this.props));\n    } else if (itemControls && itemControls.some(itemControl => itemControl.code === itemcontrol_1.default.YEARMONTH)) {\n      const stringDate = this.getStringValue();\n      element = React.createElement(date_month_input_1.DateYearMonthInput, Object.assign({\n        id: this.props.id,\n        resources: this.props.resources,\n        label: labelEl,\n        locale: this.getLocaleFromLanguage(),\n        subLabel: subLabelEl,\n        helpButton: this.props.renderHelpButton(),\n        helpElement: this.props.renderHelpElement(),\n        onDateValueChange: this.onDateValueChange,\n        className: this.props.className,\n        yearMonthValue: stringDate,\n        maxDate: this.getMaxDate(),\n        minDate: this.getMinDate()\n      }, this.props));\n    } else {\n      element = React.createElement(date_day_input_1.DateDayInput, Object.assign({\n        id: this.props.id,\n        resources: this.props.resources,\n        locale: this.getLocaleFromLanguage(),\n        label: labelEl,\n        subLabel: subLabelEl,\n        datepickerRef: this.datepicker,\n        helpButton: this.props.renderHelpButton(),\n        helpElement: this.props.renderHelpElement(),\n        onDateValueChange: this.onDateValueChange,\n        validationErrorRenderer: this.props.validationErrorRenderer,\n        className: this.props.className,\n        dateValue: date,\n        maxDate: this.getMaxDate(),\n        minDate: this.getMinDate()\n      }, this.props));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"page_skjemautfyller__component page_skjemautfyller__component_date\"\n    }, element, this.props.renderDeleteButton('page_skjemautfyller__deletebutton--margin-top'), this.props.repeatButton, this.props.children ? React.createElement(\"div\", {\n      className: \"nested-fieldset nested-fieldset--full-height\"\n    }, this.props.children) : null);\n  }\n\n}\n\nDateComponent.defaultProps = {\n  path: []\n};\nconst withCommonFunctionsComponent = with_common_functions_1.default(DateComponent);\nconst connectedComponent = react_redux_1.connect(map_props_1.mapStateToProps, map_props_1.mapDispatchToProps, map_props_1.mergeProps)(withCommonFunctionsComponent);\nexports.default = connectedComponent;","map":null,"metadata":{},"sourceType":"script"}