{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.store = void 0;\n\nvar _connectedReducerRegistry = require(\"@onaio/connected-reducer-registry\");\n\nvar _gatekeeper = require(\"@onaio/gatekeeper\");\n\nvar _reduxReducerRegistry = _interopRequireWildcard(require(\"@onaio/redux-reducer-registry\"));\n\nvar _sessionReducer = _interopRequireWildcard(require(\"@onaio/session-reducer\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar defaultReducers = {\n  router: _connectedReducerRegistry.connectReducer\n};\nvar preloadedState = window.__PRELOADED_STATE__;\ndelete window.__PRELOADED_STATE__;\ndefaultReducers[_sessionReducer.reducerName] = _sessionReducer[\"default\"];\ndefaultReducers[_gatekeeper.gateKeeperReducerName] = _gatekeeper.gateKeeperReducer;\nvar store = (0, _connectedReducerRegistry.getConnectedStore)(defaultReducers, preloadedState);\nexports.store = store;\n\n_reduxReducerRegistry[\"default\"].setChangeListener(function (reducers) {\n  store.replaceReducer((0, _reduxReducerRegistry.combine)(reducers));\n});","map":null,"metadata":{},"sourceType":"script"}