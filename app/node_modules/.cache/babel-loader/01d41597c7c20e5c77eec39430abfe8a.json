{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst react_redux_1 = require(\"react-redux\");\n\nconst AnchorLink_1 = __importDefault(require(\"@helsenorge/designsystem-react/components/AnchorLink\"));\n\nconst custom_tag_1 = __importDefault(require(\"@helsenorge/core-utils/custom-tag\"));\n\nconst renderContextType_1 = require(\"../../../constants/renderContextType\");\n\nconst group_item_control_1 = require(\"../../../util/group-item-control\");\n\nconst index_1 = require(\"../../../util/index\");\n\nconst map_props_1 = require(\"../../../util/map-props\");\n\nconst renderContext_1 = require(\"../../../util/renderContext\");\n\nconst with_common_functions_1 = __importDefault(require(\"../../with-common-functions\"));\n\nclass Group extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderAllItems = () => {\n      const {\n        renderContext\n      } = this.props;\n      const localRenderContextType = this.getLocalRenderContextType();\n\n      if (localRenderContextType) {\n        switch (localRenderContextType) {\n          case renderContextType_1.RenderContextType.Grid:\n            return this.renderContextTypeGrid();\n        }\n      }\n\n      switch (renderContext.RenderContextType) {\n        case renderContextType_1.RenderContextType.Grid:\n          return this.isDirectChildOfRenderContextOwner() ? this.renderContextTypeGridRow() : this.renderGroup();\n\n        default:\n          return this.renderGroup();\n      }\n    };\n\n    this.isDirectChildOfRenderContextOwner = () => {\n      const {\n        path,\n        item,\n        renderContext\n      } = this.props;\n      const myIndex = path.findIndex(p => p.linkId === item.linkId);\n\n      if (myIndex > 0) {\n        const directParentLinkId = path[myIndex - 1].linkId;\n        return directParentLinkId === renderContext.Owner;\n      }\n\n      return false;\n    };\n\n    this.renderContextTypeGridRow = () => {\n      const {\n        renderContext,\n        item\n      } = this.props;\n\n      renderContext.RenderChildren = (childItems, itemRenderer) => {\n        const renderedChildItems = [];\n        let counter = 1;\n\n        for (const column of renderContext.Columns) {\n          const childItem = childItems.find(item => item.text === column);\n\n          if (childItem) {\n            renderedChildItems.push(React.createElement(\"td\", {\n              key: counter,\n              className: \"page_skjemautfyller__grid--cell\"\n            }, itemRenderer(childItem, renderContext)));\n          } else {\n            renderedChildItems.push(React.createElement(\"td\", {\n              key: counter,\n              className: \"page_skjemautfyller__grid--cell page_skjemautfyller__grid--cell-empty\"\n            }, ` `));\n          }\n\n          counter++;\n        }\n\n        return renderedChildItems;\n      };\n\n      return React.createElement(\"tr\", {\n        key: item.linkId,\n        className: \"page_skjemautfyller__grid--row\"\n      }, React.createElement(\"td\", {\n        className: \"page_skjemautfyller__grid--cell page_skjemautfyller__grid--cell-first\"\n      }, this.renderGroupHeader()), this.props.renderChildrenItems(renderContext));\n    };\n\n    this.renderContextTypeGrid = () => {\n      const {\n        item\n      } = this.props;\n      const columns = this.getColumns();\n      const headers = columns.map(c => React.createElement(\"th\", {\n        key: item.linkId + '-' + c\n      }, c));\n      headers.unshift(React.createElement(\"th\", {\n        key: item.linkId + 'X'\n      }, item.text ? item.text : ''));\n      const newRenderContext = new renderContext_1.RenderContext(renderContextType_1.RenderContextType.Grid, item.linkId, columns);\n      return React.createElement(React.Fragment, null, React.createElement(\"table\", {\n        id: index_1.getId(this.props.id),\n        className: \"page_skjemautfyller__grid\"\n      }, React.createElement(\"thead\", null, React.createElement(\"tr\", null, headers)), React.createElement(\"tbody\", null, this.props.renderChildrenItems(newRenderContext))), this.props.renderDeleteButton('page_skjemautfyller__deletebutton--margin-top'), this.props.repeatButton);\n    };\n\n    this.renderGroup = () => {\n      var _a;\n\n      return React.createElement(\"section\", {\n        id: index_1.getId(this.props.id),\n        \"data-sectionname\": this.getHeaderText()\n      }, this.renderGroupHeader(), this.props.renderHelpElement(), React.createElement(\"div\", {\n        id: `${index_1.getId(this.props.id)}-navanchor`,\n        className: this.getClassNames()\n      }, this.props.renderChildrenItems(new renderContext_1.RenderContext())), this.props.includeSkipLink && this.props.path.length === 1 && React.createElement(AnchorLink_1.default, {\n        className: \"page_skjemautfyller__skiplink\",\n        href: \"#navigator-button\"\n      }, (_a = this.props.resources) === null || _a === void 0 ? void 0 : _a.skipLinkText), this.props.renderDeleteButton('page_skjemautfyller__deletebutton--margin-top'), this.props.repeatButton);\n    };\n\n    this.getColumns = () => {\n      const item = this.props.item;\n      const seenColumns = {};\n      const columns = [];\n      if (!item.item || item.item.length === 0) return columns;\n\n      for (const group of item.item) {\n        if (group.item && group.item.length > 0) {\n          for (const cell of group.item) {\n            const key = cell.text || '';\n            if (key in seenColumns) continue;\n            columns.push(key);\n            seenColumns[key] = 1;\n          }\n        }\n      }\n\n      return columns;\n    };\n\n    this.getLocalRenderContextType = () => {\n      const coding = group_item_control_1.getGroupItemControl(this.props.item);\n\n      if (coding.length > 0) {\n        switch (coding[0].code) {\n          case 'grid':\n            return renderContextType_1.RenderContextType.Grid;\n        }\n      }\n\n      return renderContextType_1.RenderContextType.None;\n    };\n\n    this.getClassNames = () => {\n      const classNames = ['page_skjemautfyller__component', 'page_skjemautfyller__component_group'];\n      const coding = group_item_control_1.getGroupItemControl(this.props.item);\n\n      if (coding.length > 0) {\n        classNames.push('page_skjemautfyller__itemControl_' + coding[0].code);\n      }\n\n      return classNames.join(' ');\n    };\n\n    this.getComponentToValidate = () => {\n      return undefined;\n    };\n\n    this.getHeaderText = () => {\n      return index_1.renderPrefix(this.props.item) + ' ' + index_1.getText(this.props.item, this.props.onRenderMarkdown);\n    };\n\n    this.renderGroupHeader = () => {\n      if (!index_1.getText(this.props.item, this.props.onRenderMarkdown)) {\n        return null;\n      }\n\n      const tagName = `h${this.props.headerTag}`;\n      return React.createElement(React.Fragment, null, React.createElement(custom_tag_1.default, {\n        tagName: tagName,\n        className: 'page_skjemautfyller__heading'\n      }, this.getHeaderText()), this.props.renderHelpButton());\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    var _a;\n\n    const responseItemHasChanged = this.props.responseItem !== nextProps.responseItem;\n    const helpItemHasChanged = this.props.isHelpOpen !== nextProps.isHelpOpen;\n    const repeatButtonHasChanged = this.props.repeatButton !== nextProps.repeatButton;\n    const attachmentErrorMessageHasChanged = this.props.attachmentErrorMessage !== nextProps.attachmentErrorMessage;\n    const resourcesHasChanged = JSON.stringify(this.props.resources) !== JSON.stringify(nextProps.resources);\n    const repeats = (_a = this.props.item.repeats) !== null && _a !== void 0 ? _a : false;\n    return responseItemHasChanged || helpItemHasChanged || repeatButtonHasChanged || attachmentErrorMessageHasChanged || resourcesHasChanged || repeats;\n  }\n\n  render() {\n    const {\n      pdf\n    } = this.props;\n\n    if (pdf) {\n      return React.createElement(\"div\", null, this.renderAllItems());\n    }\n\n    return this.renderAllItems();\n  }\n\n}\n\nexports.Group = Group;\nconst withCommonFunctionsComponent = with_common_functions_1.default(Group);\nconst connectedComponent = react_redux_1.connect(map_props_1.mapStateToProps, map_props_1.mapDispatchToProps, map_props_1.mergeProps)(withCommonFunctionsComponent);\nexports.default = connectedComponent;","map":null,"metadata":{},"sourceType":"script"}