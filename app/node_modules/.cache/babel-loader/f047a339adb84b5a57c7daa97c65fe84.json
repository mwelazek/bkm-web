{"ast":null,"code":"var numberFns = {}; // Returns the number of digits in the number after the decimal point, ignoring\n// trailing zeros.\n\nfunction decimalPlaces(x) {\n  // Based on https://stackoverflow.com/a/9539746/360782\n  // Make sure it is a number and use the builtin number -> string.\n  var s = \"\" + +x,\n      match = /(\\d+)(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/.exec(s); // NaN or Infinity or integer.\n  // We arbitrarily decide that Infinity is integral.\n\n  if (!match) {\n    return 0;\n  } // Count the number of digits in the fraction and subtract the\n  // exponent to simulate moving the decimal point left by exponent places.\n  // 1.234e+2 has 1 fraction digit and '234'.length -  2 == 1\n  // 1.234e-2 has 5 fraction digit and '234'.length - -2 == 5\n  //var wholeNum = match[1];\n\n\n  var fraction = match[2],\n      exponent = match[3];\n  return Math.max(0, // lower limit.\n  (fraction === '0' ? 0 : (fraction || '').length // fraction length\n  ) - (exponent || 0)); // exponent\n}\n/**\n *  Rounds a number to the specified number of decimal places.\n * @param x the decimal number to be rounded\n * @param n the (maximum) number of decimal places to preserve.  (The result\n *  could contain fewer if the decimal digits in x contain zeros).\n */\n\n\nfunction roundToDecimalPlaces(x, n) {\n  var scale = Math.pow(10, n);\n  return Math.round(x * scale) / scale;\n}\n/**\n *  The smallest representable number in FHIRPath.\n */\n\n\nvar PRECISION_STEP = 1e-8;\n/**\n *  Rounds a number to the nearest multiple of PRECISION_STEP.\n */\n\nfunction roundToMaxPrecision(x) {\n  return Math.round(x / PRECISION_STEP) * PRECISION_STEP;\n}\n/**\n * Determines numbers equivalence\n * @param {number} actual\n * @param {number} expected\n * @return {boolean}\n */\n\n\nnumberFns.isEquivalent = function (actual, expected) {\n  if (Number.isInteger(actual) && Number.isInteger(expected)) {\n    return actual === expected;\n  }\n\n  var prec = Math.min(decimalPlaces(actual), decimalPlaces(expected));\n\n  if (prec === 0) {\n    return Math.round(actual) === Math.round(expected);\n  } else {\n    // Note: parseFloat(0.00000011).toPrecision(7) ===  \"1.100000e-7\"\n    // It does # of significant digits, not decimal places.\n    return roundToDecimalPlaces(actual, prec) === roundToDecimalPlaces(expected, prec);\n  }\n};\n/**\n * Determines numbers equality\n * @param {number} actual\n * @param {number} expected\n * @return {boolean}\n */\n\n\nnumberFns.isEqual = function (actual, expected) {\n  return roundToMaxPrecision(actual) === roundToMaxPrecision(expected);\n};\n\nmodule.exports = numberFns;","map":null,"metadata":{},"sourceType":"script"}