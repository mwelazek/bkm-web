{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction default_hash(x) {\n  return x;\n}\n/**\n * Takes an array of arrays and optionnally a hash function,\n * and returns the elements that are present in all the arrays.\n * When intersecting arrays of objects, you should use a custom\n * hash function that returns identical values when given objects\n * that should be considered equal in your application.\n * The default hash function is the identity function.\n * When performance is not critical, a handy hash function can be `JSON.stringify`.\n */\n\n\nfunction intersect(arrays) {\n  var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : default_hash;\n  if (arrays.length === 0) return []; // Put the smallest array in the beginning\n\n  for (var i = 1; i < arrays.length; i++) {\n    if (arrays[i].length < arrays[0].length) {\n      var tmp = arrays[0];\n      arrays[0] = arrays[i];\n      arrays[i] = tmp;\n    }\n  } // Create a map associating each element to its current count\n\n\n  var set = new Map();\n\n  var _iterator = _createForOfIteratorHelper(arrays[0]),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _elem = _step.value;\n      set.set(hash(_elem), 1);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  for (var _i = 1; _i < arrays.length; _i++) {\n    var found = 0;\n\n    var _iterator2 = _createForOfIteratorHelper(arrays[_i]),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var elem = _step2.value;\n        var hashed = hash(elem);\n        var count = set.get(hashed);\n\n        if (count === _i) {\n          set.set(hashed, count + 1);\n          found++;\n        }\n      } // Stop early if an array has no element in common with the smallest\n\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    if (found === 0) return [];\n  } // Output only the elements that have been seen as many times as there are arrays\n\n\n  return arrays[0].filter(function (e) {\n    var hashed = hash(e);\n    var count = set.get(hashed);\n    if (count !== undefined) set.set(hashed, 0);\n    return count === arrays.length;\n  });\n}\n\nexports.default = intersect;","map":null,"metadata":{},"sourceType":"script"}