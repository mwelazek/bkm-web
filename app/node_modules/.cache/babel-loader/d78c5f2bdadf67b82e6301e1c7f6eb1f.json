{"ast":null,"code":"import _defineProperty from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { Label } from './../../atoms/label';\nimport ValidationError from './../../molecules/form/validation-error';\nimport './styles.scss';\n\nvar SafeSelectField = /*#__PURE__*/function (_React$Component) {\n  _inherits(SafeSelectField, _React$Component);\n\n  var _super = _createSuper(SafeSelectField);\n\n  function SafeSelectField(props) {\n    var _this;\n\n    _classCallCheck(this, SafeSelectField);\n\n    _this = _super.call(this, props);\n\n    _this.onChange = function (e) {\n      var value = e.target.value;\n      var formattedValue = value;\n\n      if (_this.props.onChangeFormatter) {\n        formattedValue = _this.props.onChangeFormatter(value);\n      }\n\n      if (_this.state.validated) {\n        _this.setState({\n          value: formattedValue\n        }, _this.validateField);\n      } else {\n        _this.setState({\n          value: formattedValue\n        }, _this.validateField);\n      }\n\n      _this.notifyChanged(e);\n    };\n\n    _this.notifyChanged = function (e) {\n      if (_this.props.onChange) {\n        _this.props.onChange(e, _this.props.id);\n      }\n    };\n\n    _this.notifyValidated = function () {\n      if (_this.props.onValidated) {\n        _this.props.onValidated(_this.state.isValid);\n      }\n    };\n\n    _this.onFocus = function (e) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(e, _this.props.id);\n      }\n    };\n\n    _this.focus = function () {\n      if (_this.selectElementRef.current) {\n        _this.selectElementRef.current.focus();\n      }\n    };\n\n    _this.getOptionWithValue = function (value) {\n      if (!_this.props.options || !value) {\n        return undefined;\n      }\n\n      var filteredOptions = _this.props.options.filter(function (o) {\n        return o.value === value;\n      });\n\n      if (!filteredOptions || filteredOptions.length === 0) {\n        return undefined;\n      }\n\n      return filteredOptions[0];\n    };\n\n    _this.validateField = function () {\n      return new Promise(function (resolve) {\n        var validatedCB = function validatedCB() {\n          _this.notifyValidated();\n\n          resolve();\n        };\n\n        var value = _this.state.value;\n\n        if (_this.props.onChangeValidator && _this.props.isRequired) {\n          _this.setState({\n            validated: true,\n            isValid: _this.props.onChangeValidator(value)\n          }, validatedCB);\n\n          return;\n        }\n\n        var valid = false;\n\n        if (_this.props.isRequired) {\n          if (_this.getOptionWithValue(value)) {\n            valid = true;\n          }\n        } else {\n          valid = true;\n        }\n\n        _this.setState({\n          validated: true,\n          isValid: valid\n        }, validatedCB);\n      });\n    };\n\n    _this.isValid = function () {\n      return _this.state.isValid;\n    };\n\n    _this.renderErrorMessage = function () {\n      if (_this.props.validationErrorRenderer && !_this.state.isValid) {\n        return _this.props.validationErrorRenderer;\n      }\n\n      var error;\n\n      if (_this.props.errorMessage) {\n        error = typeof _this.props.errorMessage === 'string' ? _this.props.errorMessage : _this.props.errorMessage(_this.state.value);\n      } else {\n        error = 'Ugyldig verdi';\n      }\n\n      return React.createElement(ValidationError, {\n        isValid: _this.state.isValid,\n        error: error,\n        testId: _this.props.validationTestId\n      });\n    };\n\n    _this.renderLabel = function () {\n      if (_this.props.label !== undefined) {\n        var labelText = React.createElement(React.Fragment, null, _this.props.label, _this.props.isRequired && _this.props.requiredLabel && _this.props.showRequiredLabel ? React.createElement(\"em\", null, \" \", _this.props.requiredLabel) : '', !_this.props.isRequired && _this.props.optionalLabel && _this.props.showOptionalLabel ? React.createElement(\"em\", null, \" \", _this.props.optionalLabel) : '');\n        return React.createElement(Label, {\n          labelText: labelText,\n          htmlFor: _this.props.selectName,\n          sublabelText: _this.props.subLabel,\n          className: _this.props.showLabelLeft ? 'atom_label--showleft' : '',\n          testId: _this.props.labelTestId,\n          helpButton: _this.props.helpButton\n        });\n      }\n\n      return null;\n    };\n\n    _this.selectElementRef = React.createRef();\n    _this.state = {\n      isValid: true,\n      value: undefined,\n      validated: false\n    };\n    return _this;\n  }\n\n  _createClass(SafeSelectField, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      var _this$props = this.props,\n          selected = _this$props.selected,\n          value = _this$props.value;\n      var compatibleValue = value ? value : selected;\n\n      if (compatibleValue === '' || compatibleValue === null || compatibleValue === undefined) {\n        return;\n      }\n\n      this.setState({\n        value: compatibleValue\n      });\n\n      if (this.props.onChangeValidator) {\n        this.setState({\n          isValid: this.props.onChangeValidator(compatibleValue)\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var value = this.props.value;\n\n      if (value) {\n        this.setState({\n          value: value\n        }, function () {\n          if (value === '' || value === null || value === undefined) {\n            return;\n          } else {\n            _this2.validateField();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.value !== this.props.value) {\n        this.setState({\n          value: nextProps.value\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          disabled = _this$props2.disabled,\n          selected = _this$props2.selected,\n          isRequired = _this$props2.isRequired,\n          placeholder = _this$props2.placeholder,\n          selectName = _this$props2.selectName;\n      var firstOption = this.props.options ? this.props.options[0] : undefined;\n      var firstValue = firstOption ? firstOption.value : undefined;\n      var selectedValue = this.state.value ? this.state.value : placeholder ? placeholder.value : firstValue;\n      var selectClassNames = classNames('atom_select__select', className, (_classNames = {}, _defineProperty(_classNames, 'atom_select__select--haslabelleft', this.props.showLabelLeft), _defineProperty(_classNames, 'atom_select__select--state_validationerror', !this.state.isValid), _classNames));\n      var wrapperClasses = \"mol_validation \".concat(this.props.wrapperClasses ? this.props.wrapperClasses : '');\n\n      if (!this.state.isValid) {\n        wrapperClasses += ' mol_validation--active';\n      }\n\n      var ariaInvalid = this.state.validated ? {\n        'aria-invalid': !this.state.isValid\n      } : {};\n      var options = [];\n\n      if (placeholder && !this.props.showLabelLeft) {\n        options.push(React.createElement(\"option\", {\n          key: 'placeholder',\n          value: placeholder.value,\n          disabled: true,\n          hidden: navigator.platform.toUpperCase().indexOf('MAC') === -1,\n          \"aria-selected\": selectedValue === placeholder.value\n        }, placeholder.text));\n      }\n\n      if (this.props.options) {\n        this.props.options.forEach(function (item, index) {\n          options.push(React.createElement(\"option\", {\n            key: index,\n            value: item.value,\n            selected: selectedValue === item.value,\n            \"aria-selected\": selectedValue === item.value\n          }, item.text));\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: wrapperClasses,\n        id: \"\".concat(this.props.id, \"-wrapper\")\n      }, this.renderErrorMessage(), this.renderLabel(), this.props.helpElement ? this.props.helpElement : null, React.createElement(\"span\", {\n        className: 'atom_select'\n      }, React.createElement(\"select\", Object.assign({\n        ref: this.selectElementRef,\n        id: selectName,\n        name: selectName,\n        defaultValue: selected ? selected : selectedValue,\n        tabIndex: this.props.tabIndex,\n        \"data-testId\": this.props.selectTestId,\n        className: selectClassNames,\n        disabled: disabled,\n        required: !!isRequired,\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onKeyDown: this.props.onKeyDown,\n        \"aria-label\": this.props.ariaLabel,\n        \"aria-labelledby\": this.props.ariaLabelledby,\n        \"aria-required\": this.props.ariaRequired || !!isRequired\n      }, ariaInvalid), options)), this.props.children);\n    }\n  }]);\n\n  return SafeSelectField;\n}(React.Component);\n\nexport { SafeSelectField as default };\nSafeSelectField.hnFormComponent = true;\nSafeSelectField.defaultProps = {\n  id: '',\n  showRequiredLabel: true,\n  showLabelLeft: false\n};","map":null,"metadata":{},"sourceType":"module"}