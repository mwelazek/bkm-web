{"ast":null,"code":"import moment from 'moment';\nimport { capitalize } from './string-utils';\n/**\n * Initialiserer Moment med norsk locale og riktig LongDate formats\n */\n\nexport var initialize = function initialize() {\n  moment.locale('nb');\n  var language = {\n    monthsShort: 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),\n    longDateFormat: {\n      LT: 'HH:mm',\n      LTS: 'HH:mm:ss',\n      L: 'DD.MM.YYYY',\n      LL: 'D. MMMM YYYY',\n      LLL: 'D. MMMM YYYY, [kl.] HH:mm',\n      LLLL: 'dddd D. MMMM YYYY, [kl.] HH:mm'\n    }\n  };\n  moment.updateLocale('nb', language);\n};\n/**\n * Returnerer JS Dato basert på en MomentInput\n * @param a - MomentInput som skal konverteres\n */\n\nexport var toDate = function toDate(a) {\n  var start = moment(a);\n  return start.toDate();\n};\n/**\n * Returnerer en lang dato format (Måned DD, YYYY) basert på en MomentInput\n * @param a - MomentInput som skal konverteres\n */\n\nexport var longDate = function longDate(a) {\n  var start = moment(a);\n  var startOfDay = moment(a).startOf('day');\n  return start.isSame(startOfDay) ? start.format('ll') : start.format('lll');\n};\n/**\n * Returnerer en long dato format med klokken (Day DD. Måned YYYY klokken HH:mm) basert på en MomentInput\n * @param a - MomentInput som skal konverteres\n */\n\nexport var longDateNumbersClock = function longDateNumbersClock(time) {\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n  var start = moment(time);\n  return start.format(\"dddd DD. MMMM YYYY\".concat(separator, \"[klokken] HH:mm\"));\n};\n/**\n * Returnerer en medium dato format (DD. Mån YYYY HH:mm) basert på en MomentInput\n * @param a - MomentInput som skal konverteres\n */\n\nexport var mediumDate = function mediumDate(a) {\n  var start = moment(a);\n  return start.format('DD. MMM YYYY HH:mm');\n};\n/**\n * Returnerer en medium dato format kun med tall (DD.MM.YYYY HH:mm)) basert på en MomentInput\n * @param a - MomentInput som skal konverteres\n */\n\nexport var mediumDateNumbers = function mediumDateNumbers(a) {\n  var start = moment(a);\n  return start.format('DD.MM.YYYY HH:mm');\n};\n/**\n * Returnerer en medium dato format med kl. (DD.MM.YYYY kl. HH:mm) basert på en MomentInput\n * @param a - MomentInput som skal konverteres\n */\n\nexport var mediumDateNumbersClock = function mediumDateNumbersClock(a) {\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n  var start = moment(a);\n  return start.format(\"DD.MM.YYYY\".concat(separator, \"[kl.] HH:mm\"));\n};\n/**\n * Returnerer en short dato format (DD. Mån YYYY) basert på en MomentInput\n * @param a - MomentInput som skal konverteres\n */\n\nexport var shortDate = function shortDate(time) {\n  var start = moment(time);\n  return start.format('DD. MMM YYYY');\n};\n/**\n * Returnerer en short dato format med full måned (D. Måned YYYY) basert på en MomentInput\n * @param a - MomentInput som skal konverteres\n */\n\nexport var shortDateFullMonth = function shortDateFullMonth(a) {\n  var start = moment(a);\n  return start.format('D. MMMM YYYY');\n};\n/**\n * Returnerer en short dato format (D. Mån YYYY) basert på en MomentInput\n * @param a - MomentInput som skal konverteres\n */\n\nexport var shortDateNb = function shortDateNb(a) {\n  var start = moment(a);\n  return start.format('D. MMM YYYY');\n};\n/**\n * Returnerer en short dato format (DD.MM.YYYY) basert på en MomentInput\n * @param a - MomentInput som skal konverteres\n */\n\nexport var shortDateNumbers = function shortDateNumbers(a) {\n  var start = moment(a);\n  return start.format('DD.MM.YYYY');\n};\n/**\n * Returnerer dato med riktig AM/PM og prefix\n * @param a - MomentInput som skal sjekkes\n */\n\nexport var timeOfDay = function timeOfDay(a) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var value = '';\n  var start = moment(a);\n  var startOfDay = moment(a).startOf('day');\n\n  if (!start.isSame(startOfDay)) {\n    value = prefix + start.format('LT');\n  }\n\n  return value;\n};\n/**\n * Returnerer full måned med år (Måned YYYY)\n * @param a - MomentInput som skal konverteres\n */\n\nexport var monthYear = function monthYear(a) {\n  var start = moment(a);\n  return capitalize(start.format('MMMM YYYY'));\n};\n/**\n * Returnerer kort måned med år (Mån YYYY)\n * @param a - MomentInput som skal konverteres\n */\n\nexport var shortMonthYear = function shortMonthYear(a) {\n  var start = moment(a);\n  return capitalize(start.format('MMM YYYY').replace('.', ''));\n};\n/**\n * Returnerer range med full måned og år (Måned YYYY – Måned YYYY)\n * @param a - startdato i Moment format\n * @param b - sluttdato i Moment format\n */\n\nexport var monthRange = function monthRange(a, b) {\n  var range;\n  var start = moment(a);\n  var end = moment(b);\n\n  if (start.isSame(end, 'month')) {\n    range = capitalize(start.format('MMMM YYYY'));\n  } else {\n    range = capitalize(start.format('MMMM YYYY')) + String.fromCharCode(160) + String.fromCharCode(8211) + String.fromCharCode(160) + capitalize(end.format('MMMM YYYY'));\n  }\n\n  return range;\n};\n/**\n * Returnerer range mellom 2 klokkeslett (Måned DD, YYYY, mellom kl. H:mm AM og HH:mm PM)\n * Forutsetter at begge tidspunktene er på samme dag\n * @param a - startdato i Moment format\n * @param b - sluttdato i Moment format\n */\n\nexport var timeRangeBetween = function timeRangeBetween(a, b) {\n  var range;\n  var start = moment(a);\n  var end = moment(b);\n\n  if (start.isSame(end)) {\n    range = start.format('lll');\n  } else {\n    range = start.format('ll') + ', mellom kl. ' + start.format('LT') + ' og ' + end.format('LT');\n  }\n\n  return range;\n};\n/**\n * Returnerer range mellom 2 klokkeslett med bindestrekk (Måned DD, YYYY, H:mm AM - HH:mm PM)\n * Forutsetter at begge tidspunktene er på samme dag\n * @param a - startdato i Moment format\n * @param b - sluttdato i Moment format\n */\n\nexport var timeRange = function timeRange(first, last) {\n  var range;\n  var start = moment(first);\n  var end = moment(last);\n\n  if (start.isSame(end)) {\n    range = start.format('lll');\n  } else {\n    range = start.format('lll') + ' - ' + end.format('LT');\n  }\n\n  return range;\n};\n/**\n * Returnerer range mellom 2 klokkeslett med full dag måned og år (Day DD. Måned YYYY, kl. HH:mm AM - HH:mm PM)\n * Forutsetter at begge tidspunktene er på samme dag\n * @param a - startdato i Moment format\n * @param b - sluttdato i Moment format\n */\n\nexport var longTimeRange = function longTimeRange(startInput, endInput) {\n  var start = moment(startInput);\n  var end = moment(endInput);\n  var range = start.format('dddd D. MMMM YYYY, [kl.] HH:mm');\n\n  if (endInput) {\n    range = range + ' - ' + end.format('LT');\n  }\n\n  return capitalize(range);\n};\n/**\n * Returnerer true hvis datoene er på samme dag\n * @param a MomentInput som skal sammenlignes\n * @param b MomentInput som skal sammenlignes\n */\n\nexport var isSameDay = function isSameDay(a, b) {\n  if (!moment.isMoment(a) || !moment.isMoment(b)) return false; // Compare least significant, most likely to change units first\n  // Moment's isSame clones moment inputs and is a tad slow\n\n  return a.date() === b.date() && a.month() === b.month() && a.year() === b.year();\n};\n/**\n * Returnerer true hvis dato a er før dato b\n * @param a MomentInput som skal sammenlignes\n * @param b MomentInput som skal sammenlignes\n */\n\nexport var isBeforeDay = function isBeforeDay(a, b) {\n  if (!moment.isMoment(a) || !moment.isMoment(b)) return false;\n  var aYear = a.year();\n  var aMonth = a.month();\n  var bYear = b.year();\n  var bMonth = b.month();\n  var isSameYear = aYear === bYear;\n  var isSameMonth = aMonth === bMonth;\n  if (isSameYear && isSameMonth) return a.date() < b.date();\n  if (isSameYear) return aMonth < bMonth;\n  return aYear < bYear;\n};\n/**\n * Returnerer true hvis dato a er etter dato b\n * @param a MomentInput som skal sammenlignes\n * @param b MomentInput som skal sammenlignes\n */\n\nexport var isAfterDay = function isAfterDay(a, b) {\n  if (!moment.isMoment(a) || !moment.isMoment(b)) return false;\n  return !isBeforeDay(a, b) && !isSameDay(a, b);\n};\n/**\n * Returnerer true hvis dato a er på samme dag eller etter dato b\n * @param a MomentInput som skal sammenlignes\n * @param b MomentInput som skal sammenlignes\n */\n\nexport var isInclusivelyAfterDay = function isInclusivelyAfterDay(a, b) {\n  if (!moment.isMoment(a) || !moment.isMoment(b)) return false;\n  return !isBeforeDay(a, b);\n};\n/**\n * Returnerer true hvis input (inkludert minutter) er etter nåtid\n * @param a MomentInput som skal sammenlignes\n */\n\nexport var isAfter = function isAfter(a) {\n  var now = moment();\n  return moment(a).isAfter(now);\n};\n/**\n * Returnerer true hvis input er etter dagens dato\n * Forskjell med 'isAfter' er at denne tar utgangspunkt i dager\n * @param a MomentInput som skal sammenlignes\n */\n\nexport var isAfterToday = function isAfterToday(a) {\n  return moment(a).diff(new Date(), 'days') > 0;\n};\n/**\n * Sammenligner to datoer og returnerer true hvis den første datoen er etter den andre (fungerer også med tid)\n * @param a - moment dato\n * @param max - maksimum dato grense\n */\n\nexport var isAfterMaxDate = function isAfterMaxDate(a, b) {\n  return !!(b && a.isAfter(b));\n};\n/**\n * Returnerer true hvis dato a er på samme dag eller før dato b\n * @param a MomentInput som skal sammenlignes\n * @param b MomentInput som skal sammenlignes\n */\n\nexport var isInclusivelyBeforeDay = function isInclusivelyBeforeDay(a, b) {\n  if (!moment.isMoment(a) || !moment.isMoment(b)) return false;\n  return !isAfterDay(a, b);\n};\n/**\n * Returnerer true hvis input  (inkludert minutter) er før nåtid\n * @param a MomentInput som skal sammenlignes\n */\n\nexport var isBefore = function isBefore(a) {\n  var now = moment();\n  return moment(a).isBefore(now);\n};\n/**\n * Returnerer true hvis input er før dagens dato\n * Forskjell med 'isBefore' er at denne tar utgangspunkt i dager\n * @param a MomentInput som skal sammenlignes\n */\n\nexport var isBeforeToday = function isBeforeToday(a) {\n  return moment(a).diff(moment(), 'days') < 0;\n};\n/**\n * Sammenligner to datoer og returnerer true hvis den første datoen er før den andre (fungerer også med tid)\n * @param a - moment dato\n * @param min - minimum dato grense\n */\n\nexport var isBeforeMinDate = function isBeforeMinDate(a, b) {\n  return !!(b && a.isBefore(b));\n};\n/**\n * Returnerer true hvis input er dagens dato\n * @param a MomentInput som skal sammenlignes\n */\n\nexport var isToday = function isToday(a) {\n  return moment(a).isSame(moment(), 'day');\n};\n/**\n * Returnerer true hvis input er dagens dato og tid er tidligere enn nåtid\n * @param a MomentInput som skal sammenlignes\n */\n\nexport var isEarlierToday = function isEarlierToday(a) {\n  return isToday(a) && isBefore(a);\n};\n/**\n * Returnerer antall uker som finnes i en måned\n * @param a - Moment obj startdato (first week)\n * @param b - Moment obj sluttdato (last week)\n */\n\nexport var numberOfWeeksInMonth = function numberOfWeeksInMonth(a, b) {\n  var firstWeek = a.week();\n  var lastWeek = b.week();\n\n  if (firstWeek >= 52) {\n    return lastWeek;\n  } else if (lastWeek < firstWeek) {\n    return 53 - firstWeek;\n  }\n\n  return lastWeek - firstWeek;\n};\n/**\n * Returnerer true hvis input er lik 0001-01-01T00:00:00\n * @param a MomentInput som skal sammenlignes\n */\n\nexport var isDotNetMinDate = function isDotNetMinDate(a) {\n  var input = moment(a); // Setup a minDate to mimic .Net Date.MinDate constant.\n\n  var minDate = moment('0001-01-01T00:00:00');\n  return input.isSame(minDate);\n};\n/**\n * Returnerer dato i ISO format med Timezone offset\n * @param a MomentInput som skal sammenlignes\n */\n\nexport var toLocalISOStringUsingDateTimezoneOffset = function toLocalISOStringUsingDateTimezoneOffset(a) {\n  var isoDate = moment(a).add('minutes', moment(a).utcOffset()).toISOString();\n  return isoDate.substring(0, isoDate.lastIndexOf('.'));\n};","map":null,"metadata":{},"sourceType":"module"}