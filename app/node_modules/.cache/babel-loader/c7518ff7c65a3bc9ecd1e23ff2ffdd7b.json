{"ast":null,"code":"/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/*jslint smarttabs:true */\nvar Token = require('./Token').Token;\n/* stop is not included! */\n\n\nfunction Interval(start, stop) {\n  this.start = start;\n  this.stop = stop;\n  return this;\n}\n\nInterval.prototype.contains = function (item) {\n  return item >= this.start && item < this.stop;\n};\n\nInterval.prototype.toString = function () {\n  if (this.start === this.stop - 1) {\n    return this.start.toString();\n  } else {\n    return this.start.toString() + \"..\" + (this.stop - 1).toString();\n  }\n};\n\nObject.defineProperty(Interval.prototype, \"length\", {\n  get: function () {\n    return this.stop - this.start;\n  }\n});\n\nfunction IntervalSet() {\n  this.intervals = null;\n  this.readOnly = false;\n}\n\nIntervalSet.prototype.first = function (v) {\n  if (this.intervals === null || this.intervals.length === 0) {\n    return Token.INVALID_TYPE;\n  } else {\n    return this.intervals[0].start;\n  }\n};\n\nIntervalSet.prototype.addOne = function (v) {\n  this.addInterval(new Interval(v, v + 1));\n};\n\nIntervalSet.prototype.addRange = function (l, h) {\n  this.addInterval(new Interval(l, h + 1));\n};\n\nIntervalSet.prototype.addInterval = function (v) {\n  if (this.intervals === null) {\n    this.intervals = [];\n    this.intervals.push(v);\n  } else {\n    // find insert pos\n    for (var k = 0; k < this.intervals.length; k++) {\n      var i = this.intervals[k]; // distinct range -> insert\n\n      if (v.stop < i.start) {\n        this.intervals.splice(k, 0, v);\n        return;\n      } // contiguous range -> adjust\n      else if (v.stop === i.start) {\n        this.intervals[k].start = v.start;\n        return;\n      } // overlapping range -> adjust and reduce\n      else if (v.start <= i.stop) {\n        this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));\n        this.reduce(k);\n        return;\n      }\n    } // greater than any existing\n\n\n    this.intervals.push(v);\n  }\n};\n\nIntervalSet.prototype.addSet = function (other) {\n  if (other.intervals !== null) {\n    for (var k = 0; k < other.intervals.length; k++) {\n      var i = other.intervals[k];\n      this.addInterval(new Interval(i.start, i.stop));\n    }\n  }\n\n  return this;\n};\n\nIntervalSet.prototype.reduce = function (k) {\n  // only need to reduce if k is not the last\n  if (k < this.intervalslength - 1) {\n    var l = this.intervals[k];\n    var r = this.intervals[k + 1]; // if r contained in l\n\n    if (l.stop >= r.stop) {\n      this.intervals.pop(k + 1);\n      this.reduce(k);\n    } else if (l.stop >= r.start) {\n      this.intervals[k] = new Interval(l.start, r.stop);\n      this.intervals.pop(k + 1);\n    }\n  }\n};\n\nIntervalSet.prototype.complement = function (start, stop) {\n  var result = new IntervalSet();\n  result.addInterval(new Interval(start, stop + 1));\n\n  for (var i = 0; i < this.intervals.length; i++) {\n    result.removeRange(this.intervals[i]);\n  }\n\n  return result;\n};\n\nIntervalSet.prototype.contains = function (item) {\n  if (this.intervals === null) {\n    return false;\n  } else {\n    for (var k = 0; k < this.intervals.length; k++) {\n      if (this.intervals[k].contains(item)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n};\n\nObject.defineProperty(IntervalSet.prototype, \"length\", {\n  get: function () {\n    var len = 0;\n    this.intervals.map(function (i) {\n      len += i.length;\n    });\n    return len;\n  }\n});\n\nIntervalSet.prototype.removeRange = function (v) {\n  if (v.start === v.stop - 1) {\n    this.removeOne(v.start);\n  } else if (this.intervals !== null) {\n    var k = 0;\n\n    for (var n = 0; n < this.intervals.length; n++) {\n      var i = this.intervals[k]; // intervals are ordered\n\n      if (v.stop <= i.start) {\n        return;\n      } // check for including range, split it\n      else if (v.start > i.start && v.stop < i.stop) {\n        this.intervals[k] = new Interval(i.start, v.start);\n        var x = new Interval(v.stop, i.stop);\n        this.intervals.splice(k, 0, x);\n        return;\n      } // check for included range, remove it\n      else if (v.start <= i.start && v.stop >= i.stop) {\n        this.intervals.splice(k, 1);\n        k = k - 1; // need another pass\n      } // check for lower boundary\n      else if (v.start < i.stop) {\n        this.intervals[k] = new Interval(i.start, v.start);\n      } // check for upper boundary\n      else if (v.stop < i.stop) {\n        this.intervals[k] = new Interval(v.stop, i.stop);\n      }\n\n      k += 1;\n    }\n  }\n};\n\nIntervalSet.prototype.removeOne = function (v) {\n  if (this.intervals !== null) {\n    for (var k = 0; k < this.intervals.length; k++) {\n      var i = this.intervals[k]; // intervals is ordered\n\n      if (v < i.start) {\n        return;\n      } // check for single value range\n      else if (v === i.start && v === i.stop - 1) {\n        this.intervals.splice(k, 1);\n        return;\n      } // check for lower boundary\n      else if (v === i.start) {\n        this.intervals[k] = new Interval(i.start + 1, i.stop);\n        return;\n      } // check for upper boundary\n      else if (v === i.stop - 1) {\n        this.intervals[k] = new Interval(i.start, i.stop - 1);\n        return;\n      } // split existing range\n      else if (v < i.stop - 1) {\n        var x = new Interval(i.start, v);\n        i.start = v + 1;\n        this.intervals.splice(k, 0, x);\n        return;\n      }\n    }\n  }\n};\n\nIntervalSet.prototype.toString = function (literalNames, symbolicNames, elemsAreChar) {\n  literalNames = literalNames || null;\n  symbolicNames = symbolicNames || null;\n  elemsAreChar = elemsAreChar || false;\n\n  if (this.intervals === null) {\n    return \"{}\";\n  } else if (literalNames !== null || symbolicNames !== null) {\n    return this.toTokenString(literalNames, symbolicNames);\n  } else if (elemsAreChar) {\n    return this.toCharString();\n  } else {\n    return this.toIndexString();\n  }\n};\n\nIntervalSet.prototype.toCharString = function () {\n  var names = [];\n\n  for (var i = 0; i < this.intervals.length; i++) {\n    var v = this.intervals[i];\n\n    if (v.stop === v.start + 1) {\n      if (v.start === Token.EOF) {\n        names.push(\"<EOF>\");\n      } else {\n        names.push(\"'\" + String.fromCharCode(v.start) + \"'\");\n      }\n    } else {\n      names.push(\"'\" + String.fromCharCode(v.start) + \"'..'\" + String.fromCharCode(v.stop - 1) + \"'\");\n    }\n  }\n\n  if (names.length > 1) {\n    return \"{\" + names.join(\", \") + \"}\";\n  } else {\n    return names[0];\n  }\n};\n\nIntervalSet.prototype.toIndexString = function () {\n  var names = [];\n\n  for (var i = 0; i < this.intervals.length; i++) {\n    var v = this.intervals[i];\n\n    if (v.stop === v.start + 1) {\n      if (v.start === Token.EOF) {\n        names.push(\"<EOF>\");\n      } else {\n        names.push(v.start.toString());\n      }\n    } else {\n      names.push(v.start.toString() + \"..\" + (v.stop - 1).toString());\n    }\n  }\n\n  if (names.length > 1) {\n    return \"{\" + names.join(\", \") + \"}\";\n  } else {\n    return names[0];\n  }\n};\n\nIntervalSet.prototype.toTokenString = function (literalNames, symbolicNames) {\n  var names = [];\n\n  for (var i = 0; i < this.intervals.length; i++) {\n    var v = this.intervals[i];\n\n    for (var j = v.start; j < v.stop; j++) {\n      names.push(this.elementName(literalNames, symbolicNames, j));\n    }\n  }\n\n  if (names.length > 1) {\n    return \"{\" + names.join(\", \") + \"}\";\n  } else {\n    return names[0];\n  }\n};\n\nIntervalSet.prototype.elementName = function (literalNames, symbolicNames, a) {\n  if (a === Token.EOF) {\n    return \"<EOF>\";\n  } else if (a === Token.EPSILON) {\n    return \"<EPSILON>\";\n  } else {\n    return literalNames[a] || symbolicNames[a];\n  }\n};\n\nexports.Interval = Interval;\nexports.IntervalSet = IntervalSet;","map":null,"metadata":{},"sourceType":"script"}