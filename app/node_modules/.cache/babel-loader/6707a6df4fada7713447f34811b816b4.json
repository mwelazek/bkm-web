{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { ERROR_INVALID_YEAR_MONTH, ERROR_REQUIRED_YEAR_MONTH, ERROR_YEAR_MONTH_BEFORE_MIN_DATE, ERROR_YEAR_MONTH_AFTER_MAX_DATE, MONTH_PLACEHOLDER, YEAR_PLACEHOLDER, ERROR_INVALID_YEAR_MONTH_YEAR } from '../../../constants/datetime';\nimport { Sublabel } from '../../atoms/label/sublabel';\nimport SafeInputField from '../../atoms/safe-input-field';\nimport SafeSelectField from '../../atoms/safe-select';\nimport ValidationError from './../../molecules/form/validation-error';\nimport toolkitstyles from './styles.module.scss';\nconst EMPTY_MONTH_VALUE = -1;\nexport class YearMonthInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value || {\n        year: 0,\n        month: null\n      },\n      isValid: true,\n      isValidated: false,\n      errorMessage: ''\n    };\n    this.notifyValidated = this.notifyValidated.bind(this);\n    this.validate = this.validate.bind(this);\n    this.onChangeYear = this.onChangeYear.bind(this);\n    this.onChangeMonth = this.onChangeMonth.bind(this);\n    this.onBlurYear = this.onBlurYear.bind(this);\n    this.isValid = this.isValid.bind(this);\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    if (prevState.isValid !== this.state.isValid) {\n      this.notifyValidated();\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    var _a, _b;\n\n    if (nextProps.value && (nextProps.value.year !== ((_a = this.props.value) === null || _a === void 0 ? void 0 : _a.year) || nextProps.value.month !== ((_b = this.props.value) === null || _b === void 0 ? void 0 : _b.month))) {\n      this.setState({\n        value: nextProps.value\n      });\n    }\n  }\n\n  validateRequired() {\n    var _a, _b;\n\n    if (this.props.isRequired && (!((_a = this.state.value) === null || _a === void 0 ? void 0 : _a.year) || this.state.value.month === null)) {\n      return ((_b = this.props.resources) === null || _b === void 0 ? void 0 : _b.errorRequiredField) || ERROR_REQUIRED_YEAR_MONTH;\n    }\n  }\n\n  validateValidYear(value) {\n    var _a;\n\n    if (value && value.toString().length !== 4) {\n      return ((_a = this.props.resources) === null || _a === void 0 ? void 0 : _a.errorInvalidYear) || ERROR_INVALID_YEAR_MONTH_YEAR;\n    }\n  }\n\n  getValidationValue(value) {\n    const month = `0${value.month}`.slice(-2);\n    return `${value.year}${month}`;\n  }\n\n  validate(value) {\n    var _a, _b, _c;\n\n    const hasMonthValue = (value === null || value === void 0 ? void 0 : value.month) !== null && (value === null || value === void 0 ? void 0 : value.month) !== undefined;\n    const hasYearValue = !!(value === null || value === void 0 ? void 0 : value.year);\n    const validationValue = value && hasMonthValue && hasYearValue ? this.getValidationValue(value) : '';\n\n    if (hasMonthValue !== hasYearValue) {\n      return ((_a = this.props.resources) === null || _a === void 0 ? void 0 : _a.errorInvalidYearMonth) || ERROR_INVALID_YEAR_MONTH;\n    }\n\n    if (validationValue && this.props.maximumYearMonth && this.props.maximumYearMonth.month !== null && this.getValidationValue(this.props.maximumYearMonth) < validationValue) {\n      const errorString = ((_b = this.props.resources) === null || _b === void 0 ? void 0 : _b.errorAfterMaxDate) || ERROR_YEAR_MONTH_AFTER_MAX_DATE;\n      return `${errorString}: ${moment.months()[this.props.maximumYearMonth.month]} ${this.props.maximumYearMonth.year}`;\n    }\n\n    if (validationValue && this.props.minimumYearMonth && this.props.minimumYearMonth.month !== null && this.getValidationValue(this.props.minimumYearMonth) > validationValue) {\n      const errorString = ((_c = this.props.resources) === null || _c === void 0 ? void 0 : _c.errorBeforeMinDate) || ERROR_YEAR_MONTH_BEFORE_MIN_DATE;\n      return `${errorString}: ${moment.months()[this.props.minimumYearMonth.month]} ${this.props.minimumYearMonth.year}`;\n    }\n  }\n\n  validateField() {\n    return new Promise(resolve => {\n      const errorMessage = this.validateRequired() || this.validateValidYear(this.state.value.year) || this.validate(this.state.value);\n      this.setState({\n        errorMessage: errorMessage || '',\n        isValid: !errorMessage,\n        isValidated: true\n      }, () => {\n        this.notifyValidated();\n        resolve();\n      });\n    });\n  }\n\n  renderErrorMessage() {\n    if (this.state.isValidated && !this.state.isValid) {\n      return React.createElement(ValidationError, {\n        isValid: this.state.isValid,\n        error: this.state.errorMessage,\n        testId: this.props.validationTestId\n      });\n    }\n\n    return null;\n  }\n\n  onChangeYear(_e, _id, formattedValue) {\n    const yearValue = parseInt(formattedValue) || 0;\n    const newValue = Object.assign(Object.assign({}, this.state.value), {\n      year: yearValue\n    });\n    this.setState({\n      value: newValue\n    });\n\n    if (!this.state.isValid) {\n      const errorMessage = this.validateValidYear(yearValue) || this.validate(newValue);\n      this.setState({\n        isValid: !errorMessage\n      });\n    }\n\n    if (this.props.onChange) {\n      this.props.onChange(newValue);\n    }\n  }\n\n  onChangeMonth(event) {\n    const selected = parseInt(event.target.value);\n    const newValue = Object.assign(Object.assign({}, this.state.value), {\n      month: selected === EMPTY_MONTH_VALUE ? null : selected\n    });\n    this.setState({\n      value: newValue\n    });\n    const errorMessage = this.validate(newValue);\n    this.setState({\n      isValid: !errorMessage,\n      isValidated: true,\n      errorMessage: errorMessage || ''\n    });\n\n    if (this.props.onChange) {\n      this.props.onChange(newValue);\n    }\n  }\n\n  notifyValidated() {\n    if (this.props.onValidated) {\n      this.props.onValidated(this.state.isValid);\n    }\n  }\n\n  onBlurYear() {\n    var _a;\n\n    const yearErrorMessage = this.validateValidYear((_a = this.state.value) === null || _a === void 0 ? void 0 : _a.year);\n    this.setState({\n      errorMessage: yearErrorMessage || '',\n      isValidated: true,\n      isValid: !yearErrorMessage\n    });\n  }\n\n  isValid() {\n    return this.state.isValid;\n  }\n\n  renderLegend() {\n    return React.createElement(\"legend\", {\n      className: this.props.legendClassName ? this.props.legendClassName : ''\n    }, this.props.legend, this.props.isRequired && this.props.requiredLabel && this.props.showRequiredLabel ? React.createElement(\"em\", null, \" \", this.props.requiredLabel) : '', !this.props.isRequired && this.props.optionalLabel && this.props.showOptionalLabel ? React.createElement(\"em\", null, \" \", this.props.optionalLabel) : '', this.props.helpButton, this.props.subLabel && React.createElement(Sublabel, {\n      sublabelText: this.props.subLabel\n    }));\n  }\n\n  render() {\n    var _a, _b, _c, _d, _f, _g;\n\n    moment.locale(this.props.locale);\n    const monthPlaceholder = ((_a = this.props.resources) === null || _a === void 0 ? void 0 : _a.selectMonthPlaceholder) || MONTH_PLACEHOLDER;\n    const monthNames = moment.months();\n    const wrapperClasses = classNames({\n      mol_validation: true,\n      'mol_validation--active': !this.state.isValid\n    }, this.props.className);\n    const monthOptions = monthNames.map((monthName, index) => new Option(monthName, index.toString()));\n\n    if (!this.props.isRequired) {\n      monthOptions.unshift(new Option(monthPlaceholder, EMPTY_MONTH_VALUE.toString()));\n    }\n\n    return React.createElement(\"div\", {\n      className: wrapperClasses,\n      id: `${this.props.id}-wrapper`\n    }, this.renderErrorMessage(), React.createElement(\"fieldset\", null, this.props.legend && this.renderLegend(), this.props.helpElement ? this.props.helpElement : null, React.createElement(\"div\", {\n      className: toolkitstyles.mol_yearmonthinput__fieldwrapper\n    }, React.createElement(SafeInputField, {\n      type: \"number\",\n      inputName: `${this.props.id}-yearfield`,\n      maxLength: 4,\n      pattern: \"^[0-9]{4}$\",\n      wrapperClasses: toolkitstyles.mol_yearmonthinput__yearfield,\n      isValidationHidden: true,\n      disabled: this.props.disabled,\n      isRequired: this.props.isRequired,\n      placeholder: ((_b = this.props.resources) === null || _b === void 0 ? void 0 : _b.selectYearPlaceholder) || YEAR_PLACEHOLDER,\n      value: (_c = this.state.value) === null || _c === void 0 ? void 0 : _c.year,\n      onChange: this.onChangeYear,\n      onBlur: this.onBlurYear\n    }), React.createElement(SafeSelectField, {\n      id: `${this.props.id}-monthfield`,\n      value: ((_d = this.state.value) === null || _d === void 0 ? void 0 : _d.month) !== null ? (_f = this.state.value) === null || _f === void 0 ? void 0 : _f.month.toString() : '',\n      options: monthOptions,\n      placeholder: new Option(((_g = this.props.resources) === null || _g === void 0 ? void 0 : _g.selectMonthPlaceholder) || MONTH_PLACEHOLDER, ''),\n      disabled: this.props.disabled,\n      isRequired: this.props.isRequired,\n      onChange: this.onChangeMonth,\n      ariaLabel: monthPlaceholder\n    }))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}