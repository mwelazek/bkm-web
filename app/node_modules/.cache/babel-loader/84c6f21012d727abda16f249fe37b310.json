{"ast":null,"code":"import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport CheckThick from './../../icons/CheckThick';\nimport ValidationError from './../../molecules/form/validation-error';\nimport './styles.scss';\nexport class CheckBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = event => {\n      this.handleOnChange(!this.props.checked, () => this.props.onChange(event));\n    };\n\n    this.handleOnChange = (checked, notify) => {\n      this.validate(checked, true);\n\n      if (notify) {\n        notify();\n      }\n    };\n\n    this.state = {\n      valid: true,\n      validated: false\n    };\n  }\n\n  componentDidMount() {\n    this.setChecked();\n  }\n\n  componentDidUpdate(prevProps) {\n    this.setChecked();\n\n    if (this.props.validateOnExternalUpdate && prevProps.checked !== this.props.checked) {\n      this.handleOnChange(this.props.checked);\n    }\n  }\n\n  setChecked() {\n    const node = ReactDOM.findDOMNode(this);\n    const $checkbox = node instanceof Element ? node.querySelector('input[type=\"checkbox\"]') : null;\n\n    if ($checkbox) {\n      this.props.checked ? $checkbox.setAttribute('checked', 'checked') : $checkbox.removeAttribute('checked');\n    }\n  }\n\n  validateField() {\n    this.setState({\n      validated: true\n    });\n    return this.validate(this.props.checked, false);\n  }\n\n  validate(value, notifyValidated) {\n    return new Promise(resolve => {\n      const validatedCB = () => {\n        if (notifyValidated) {\n          this.notifyValidated();\n        }\n\n        resolve();\n      };\n\n      if (this.props.isRequired) {\n        this.setState({\n          valid: value === true\n        }, validatedCB);\n      } else {\n        this.setState({\n          valid: true\n        }, validatedCB);\n      }\n    });\n  }\n\n  isValid() {\n    return this.state.valid;\n  }\n\n  createDangerousHtmlLabelSuffix() {\n    if (!this.props.labelSuffixDangerousHtml) {\n      return null;\n    }\n\n    const dangerourHtml = {\n      __html: this.props.labelSuffixDangerousHtml\n    };\n    return React.createElement(\"span\", {\n      dangerouslySetInnerHTML: dangerourHtml\n    });\n  }\n\n  notifyValidated() {\n    if (this.props.onValidated) {\n      this.props.onValidated(this.state.valid);\n    }\n  }\n\n  renderHelp() {\n    if (this.props.helpElement) {\n      return this.props.helpElement;\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      isStyleBlue,\n      isStyleBoxed,\n      labelClassName,\n      checked,\n      disabled,\n      checkboxTestId,\n      labelTestId,\n      validationTestId\n    } = this.props;\n    const labelClasses = classNames({\n      'atom_checkbox__label--boxed': isStyleBoxed,\n      'atom_checkbox__label--checked': checked\n    }, labelClassName);\n    const checkiconClasses = classNames({\n      'atom_checkbox__checkicon--lilla': !isStyleBlue,\n      'atom_checkbox__checkicon--blue': isStyleBlue,\n      'atom_checkbox__checkicon--boxed': isStyleBoxed,\n      'atom_checkbox__checkicon--checked': checked,\n      'atom_checkbox__checkicon--disabled': disabled\n    });\n    const textClasses = classNames({\n      'atom_checkbox__text--checked': checked\n    });\n    const wrapperClasses = classNames({\n      'mol_validation--active': !this.state.valid\n    }, this.props.className);\n    const comment = this.props.comment ? React.createElement(\"span\", {\n      className: \"atom_checkbox__comment\"\n    }, this.props.comment) : false;\n    return React.createElement(\"div\", {\n      className: `mol_validation atom_checkbox ${wrapperClasses}`,\n      id: `${this.props.id}-wrapper`\n    }, React.createElement(ValidationError, {\n      isValid: this.state.valid,\n      error: this.props.errorMessage ? this.props.errorMessage : '',\n      testId: validationTestId\n    }), React.createElement(\"div\", {\n      className: \"atom_checkbox__labelwrapper\"\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.props.checked,\n      \"aria-checked\": this.props.checked,\n      id: this.props.id,\n      onChange: this.onChange,\n      disabled: this.props.disabled,\n      className: `atom_checkbox__input`,\n      \"data-testid\": checkboxTestId\n    }), React.createElement(\"label\", {\n      htmlFor: this.props.id,\n      className: `atom_checkbox__label ${labelClasses}`,\n      \"data-testid\": labelTestId\n    }, React.createElement(CheckThick, {\n      size: \"small\",\n      tabIndex: -1,\n      className: `atom_checkbox__checkicon ${checkiconClasses}`\n    }), React.createElement(\"span\", {\n      className: `atom_checkbox__text ${textClasses}`\n    }, this.props.label), this.createDangerousHtmlLabelSuffix(), \" \", comment), this.props.helpButton ? React.createElement(\"span\", {\n      className: \"atom_helptrigger-container\"\n    }, this.props.helpButton) : null), this.renderHelp(), this.props.children);\n  }\n\n}\nCheckBox.hnFormComponent = true;","map":null,"metadata":{},"sourceType":"module"}