{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport moment from 'moment';\nimport { DateRangePicker as AirbnbDateRangePicker, SingleDatePicker as AirbnbSingleDatePicker } from 'react-dates';\nimport { SCREEN_READER_INPUT } from '../../../constants/datetime';\nimport ArrowIcon from './custom-icons/arrow-icon';\nimport { HORIZONTAL_ORIENTATION, ANCHOR_LEFT, NAV_POSITION_TOP, ICON_AFTER_POSITION, renderCalendarIcon, renderChevronIcon, renderMonthHeaderSimplified, renderMonthHeader } from './date-range-picker-utils';\nimport { isOutsideRange } from './date-range-picker-validation';\nimport toolkitstyles from './styles.module.scss';\nimport classNames from 'classnames';\nexport const renderDesktopDatePicker = (partialProps, state, airbnbSingleDatepickerRef, airbnbDateRangepickerRef, onSingleDateChange, onSingleDateFocusChange, onRangeDatesChange, onRangeDatesFocusChange, onCalenderIconClick, onChangeVisibleMonthHandler) => {\n  const {\n    momentLocale,\n    placeholder,\n    singleDate,\n    isSingleDateFocused,\n    startDate,\n    endDate,\n    focusedInput,\n    isNextMonthDisabled,\n    isPrevMonthDisabled,\n    visibleMonth\n  } = state;\n\n  const {\n    id,\n    type,\n    isMonthHeaderSimplified,\n    startDateId,\n    startDatePlaceholderText,\n    endDateId,\n    endDatePlaceholderText,\n    minimumDate,\n    maximumDate,\n    minimumPeriod,\n    hasFullWidth,\n    resources,\n    errorResources,\n    isRequired,\n    isDisabled\n  } = partialProps,\n        propsToAirbnbDateRangePicker = __rest(partialProps, [\"id\", \"type\", \"isMonthHeaderSimplified\", \"startDateId\", \"startDatePlaceholderText\", \"endDateId\", \"endDatePlaceholderText\", \"minimumDate\", \"maximumDate\", \"minimumPeriod\", \"hasFullWidth\", \"resources\", \"errorResources\", \"isRequired\", \"isDisabled\"]);\n\n  const commonProps = Object.assign(Object.assign({}, propsToAirbnbDateRangePicker), {\n    required: isRequired,\n    disabled: isDisabled,\n    phrases: resources,\n    errorPhrases: errorResources,\n    screenReaderInputMessage: SCREEN_READER_INPUT,\n    inputIconPosition: ICON_AFTER_POSITION,\n    orientation: HORIZONTAL_ORIENTATION,\n    anchorDirection: ANCHOR_LEFT,\n    navPosition: NAV_POSITION_TOP,\n    enableOutsideDays: false,\n    keepFocusOnInput: false,\n    horizontalMargin: 0,\n    navPrev: renderChevronIcon('prev', isPrevMonthDisabled ? classNames(toolkitstyles['datepicker__header-navigation'], toolkitstyles['datepicker__header-navigation--disabled']) : toolkitstyles['datepicker__header-navigation'], isPrevMonthDisabled),\n    navNext: renderChevronIcon('next', isNextMonthDisabled ? classNames(toolkitstyles['datepicker__header-navigation'], toolkitstyles['datepicker__header-navigation--disabled']) : toolkitstyles['datepicker__header-navigation'], isNextMonthDisabled),\n    withPortal: false,\n    withFullScreenPortal: false,\n    keepOpenOnDateSelect: false,\n    isRTL: false,\n    customInputIcon: renderCalendarIcon(onCalenderIconClick, toolkitstyles['datepicker__input-icon']),\n    initialVisibleMonth: () => visibleMonth,\n    isOutsideRange: date => isOutsideRange(date, minimumDate, maximumDate),\n    displayFormat: 'DD.MM.YYYY',\n    weekDayFormat: 'DD/MM/YYYY',\n    dayAriaLabelFormat: 'DD.MM.YYYY',\n    renderWeekHeaderElement: function renderWeekHeaderElement(day) {\n      const incomingDate = moment(day, 'DD/MM/YYYY');\n      const weekHeader = incomingDate ? momentLocale.weekdaysShort(incomingDate) : undefined;\n      return weekHeader && weekHeader.length > 2 ? React.createElement(\"span\", null, weekHeader.slice(0, -1)) : React.createElement(React.Fragment, null);\n    },\n    renderMonthElement: props => {\n      return isMonthHeaderSimplified ? renderMonthHeaderSimplified(props, momentLocale) : renderMonthHeader(props, momentLocale, minimumDate, maximumDate, onChangeVisibleMonthHandler);\n    }\n  });\n  const singleDatePickerSpecificProps = {\n    id,\n    placeholder\n  };\n  const rangeDatePickerSpecificProps = {\n    startDateId,\n    startDatePlaceholderText,\n    endDateId,\n    endDatePlaceholderText\n  };\n\n  const onRangeBlur = e => {\n    if (e.target.nodeName === 'BUTTON' && focusedInput === 'endDate') {\n      onRangeDatesFocusChange(null);\n    }\n  };\n\n  return type === 'single' ? React.createElement(AirbnbSingleDatePicker, Object.assign({}, commonProps, singleDatePickerSpecificProps, {\n    ref: airbnbSingleDatepickerRef,\n    date: singleDate,\n    focused: !!isSingleDateFocused,\n    onDateChange: onSingleDateChange,\n    onFocusChange: onSingleDateFocusChange,\n    onNextMonthClick: onChangeVisibleMonthHandler,\n    onPrevMonthClick: onChangeVisibleMonthHandler,\n    block: hasFullWidth\n  })) : React.createElement(\"div\", {\n    onBlur: onRangeBlur\n  }, React.createElement(AirbnbDateRangePicker, Object.assign({}, commonProps, rangeDatePickerSpecificProps, {\n    ref: airbnbDateRangepickerRef,\n    showClearDates: false,\n    reopenPickerOnClearDates: false,\n    startDate: startDate,\n    endDate: endDate,\n    focusedInput: focusedInput,\n    onDatesChange: onRangeDatesChange,\n    onFocusChange: onRangeDatesFocusChange,\n    onNextMonthClick: onChangeVisibleMonthHandler,\n    onPrevMonthClick: onChangeVisibleMonthHandler,\n    minDate: minimumDate,\n    maxDate: maximumDate,\n    minimumNights: minimumPeriod && minimumPeriod > 1 ? minimumPeriod - 1 : 1,\n    customArrowIcon: React.createElement(ArrowIcon, {\n      className: toolkitstyles['datepicker__arrow-icon']\n    }),\n    block: hasFullWidth\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}