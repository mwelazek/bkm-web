{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fhir_1 = require(\"../types/fhir\");\n\nvar form_1 = require(\"../reducers/form\");\n\nvar skjemautfyller_core_1 = require(\"./skjemautfyller-core\");\n\nfunction mapStateToProps(state, originalProps) {\n  if (!originalProps.item || !originalProps.item.enableWhen) {\n    return Object.assign(Object.assign({}, originalProps), {\n      enable: true\n    });\n  }\n\n  var enable = isEnableWhenEnabled(originalProps.item.enableWhen, originalProps.item.enableBehavior, originalProps.path || [], state);\n  return Object.assign(Object.assign({}, originalProps), {\n    enable: enable\n  });\n}\n\nexports.mapStateToProps = mapStateToProps;\n\nfunction isEnableWhenEnabled(enableWhen, enableBehavior, path, state) {\n  var enableMatches = [];\n  enableWhen.forEach(function (enableWhen) {\n    var responseItems = skjemautfyller_core_1.getResponseItems(form_1.getFormData(state));\n    var enableWhenQuestion = enableWhen.question;\n\n    for (var i = 0; responseItems && i < responseItems.length; i++) {\n      var responseItem = responseItems[i];\n\n      if (!skjemautfyller_core_1.isInGroupContext(path, responseItem, responseItems)) {\n        continue;\n      }\n\n      if (responseItem.linkId !== enableWhen.question) {\n        responseItem = skjemautfyller_core_1.getQuestionnaireResponseItemWithLinkid(enableWhenQuestion, responseItems[i], path);\n      }\n\n      if (!responseItem) {\n        continue;\n      }\n\n      var matchesAnswer = skjemautfyller_core_1.enableWhenMatchesAnswer(enableWhen, responseItem.answer);\n      enableMatches.push(matchesAnswer);\n    }\n  });\n  return enableBehavior === fhir_1.QuestionnaireItemEnableBehaviorCodes.ALL ? enableMatches.every(function (x) {\n    return x === true;\n  }) : enableMatches.some(function (x) {\n    return x === true;\n  });\n}\n\nfunction mergeProps(stateProps, dispatchProps, ownProps) {\n  return Object.assign({}, ownProps, stateProps, dispatchProps);\n}\n\nexports.mergeProps = mergeProps;\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    dispatch: dispatch,\n    path: props.path,\n    renderContext: props.renderContext\n  };\n}\n\nexports.mapDispatchToProps = mapDispatchToProps;","map":null,"metadata":{},"sourceType":"script"}