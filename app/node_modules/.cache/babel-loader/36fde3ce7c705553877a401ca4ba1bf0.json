{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PaginateData = PaginateData;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _constants = require(\"../../constants\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2[\"default\"])(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction PaginateData(props) {\n  var _props$currentPage, _props$pageSize, _onSelect;\n\n  var total = props.total,\n      onError = props.onError,\n      queryFn = props.queryFn,\n      queryid = props.queryid,\n      _onSuccess = props.onSuccess,\n      onSelect = props.onSelect,\n      children = props.children,\n      queryOptions = props.queryOptions;\n\n  var _useState = (0, _react.useState)({\n    currentPage: (_props$currentPage = props.currentPage) !== null && _props$currentPage !== void 0 ? _props$currentPage : _constants.TABLE_PAGE,\n    pageSize: (_props$pageSize = props.pageSize) !== null && _props$pageSize !== void 0 ? _props$pageSize : _constants.TABLE_PAGE_SIZE,\n    prevdata: {\n      data: [],\n      total: undefined\n    },\n    queryPram: props.queryPram\n  }),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      _useState2$ = _useState2[0],\n      currentPage = _useState2$.currentPage,\n      pageSize = _useState2$.pageSize,\n      prevdata = _useState2$.prevdata,\n      queryPram = _useState2$.queryPram,\n      setProps = _useState2[1];\n\n  var query = (0, _reactQuery.useInfiniteQuery)([queryid, pageSize, queryPram], function () {\n    var _ref2 = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee(_ref) {\n      var _ref$pageParam, pageParam, queryString, data, totalval;\n\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref$pageParam = _ref.pageParam, pageParam = _ref$pageParam === void 0 ? currentPage : _ref$pageParam;\n              queryString = queryPram && Object.entries(queryPram).reduce(function (acc, _ref3) {\n                var _ref4 = (0, _slicedToArray2[\"default\"])(_ref3, 2),\n                    key = _ref4[0],\n                    val = _ref4[1];\n\n                return acc + (val !== '' && val !== undefined ? \"&\".concat(key, \"=\").concat(val) : '');\n              }, '');\n              _context.next = 4;\n              return queryFn(pageParam, pageSize, queryString);\n\n            case 4:\n              data = _context.sent;\n\n              if (!(typeof total === 'function')) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 8;\n              return total(data, currentPage, pageSize, queryString);\n\n            case 8:\n              _context.t0 = _context.sent;\n              _context.next = 12;\n              break;\n\n            case 11:\n              _context.t0 = total;\n\n            case 12:\n              totalval = _context.t0;\n              return _context.abrupt(\"return\", {\n                data: data,\n                total: totalval\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), _objectSpread({\n    onSuccess: function onSuccess(resp) {\n      return _onSuccess === null || _onSuccess === void 0 ? void 0 : _onSuccess(convertToDataRecord(resp)[currentPage]);\n    },\n    onError: onError\n  }, queryOptions));\n\n  function convertToDataRecord(infiniteData) {\n    return infiniteData.pages.reduce(function (acc, data, index) {\n      var _ref5, _ref6;\n\n      var page = (_ref5 = (_ref6 = infiniteData.pageParams[index]) !== null && _ref6 !== void 0 ? _ref6 : props.currentPage) !== null && _ref5 !== void 0 ? _ref5 : _constants.TABLE_PAGE;\n      return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2[\"default\"])({}, page, data));\n    }, {});\n  }\n\n  var data = query.data ? convertToDataRecord(query.data) : {};\n  var fetchPage = (0, _react.useCallback)(function () {\n    var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currentPage;\n    if (!query.isFetchingNextPage && !query.isFetching && !query.isError) query.fetchNextPage({\n      pageParam: page,\n      throwOnError: true\n    })[\"catch\"](onError);\n  }, [currentPage, query, onError]);\n  (0, _react.useEffect)(function () {\n    if (queryPram !== props.queryPram) setProps(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        currentPage: 1,\n        queryPram: props.queryPram\n      });\n    });\n  }, [JSON.stringify(props.queryPram)]);\n  (0, _react.useEffect)(function () {\n    if (data[currentPage] === undefined) fetchPage();\n  }, [currentPage, data, fetchPage]);\n  var tabledata = (0, _react.useMemo)(function () {\n    var _ref7;\n\n    return (_ref7 = data[currentPage]) !== null && _ref7 !== void 0 ? _ref7 : prevdata;\n  }, [currentPage, data, prevdata]);\n  return children({\n    datasource: (_onSelect = onSelect === null || onSelect === void 0 ? void 0 : onSelect(tabledata.data)) !== null && _onSelect !== void 0 ? _onSelect : tabledata.data,\n    loading: query.isFetching,\n    fetchNextPage: function fetchNextPage() {\n      return fetchPage(currentPage + 1);\n    },\n    fetchPreviousPage: function fetchPreviousPage() {\n      return fetchPage(currentPage - 1);\n    },\n    pagination: {\n      pageSize: pageSize,\n      total: tabledata.total,\n      current: currentPage,\n      onChange: function onChange(page, pagesize) {\n        return setProps(function (prev) {\n          return _objectSpread(_objectSpread({}, prev), {}, {\n            currentPage: page,\n            pageSize: pagesize !== null && pagesize !== void 0 ? pagesize : pageSize,\n            prevdata: tabledata\n          });\n        });\n      }\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}