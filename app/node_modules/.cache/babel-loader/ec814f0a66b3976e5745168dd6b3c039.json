{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst moment_1 = __importDefault(require(\"moment\"));\n\nconst date_range_picker_1 = require(\"@helsenorge/toolkit/components/molecules/date-range-picker\");\n\nconst validation_1 = require(\"@helsenorge/toolkit/components/molecules/form/validation\");\n\nconst index_1 = __importDefault(require(\"../../../constants/index\"));\n\nconst util_1 = require(\"../../../util\");\n\nconst extension_1 = require(\"../../../util/extension\");\n\nconst index_2 = require(\"../../../util/index\");\n\nconst textview_1 = __importDefault(require(\"../textview\"));\n\nclass DateDayInput extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onDateChange = value => {\n      const newValue = value ? moment_1.default(value).format(index_1.default.DATE_FORMAT) : '';\n      this.props.onDateValueChange(newValue);\n    };\n\n    this.getReadonlyValue = () => {\n      var _a;\n\n      const date = this.props.dateValue;\n      const ikkeBesvartText = ((_a = this.props.resources) === null || _a === void 0 ? void 0 : _a.ikkeBesvart) || '';\n      return date ? moment_1.default(date).format('D. MMMM YYYY') : ikkeBesvartText;\n    };\n  }\n\n  getDatepickerErrorPhrases() {\n    const {\n      resources,\n      item\n    } = this.props;\n    const validationErrorText = extension_1.getValidationTextExtension(item);\n    return {\n      errorInvalidDate: validationErrorText ? validationErrorText : (resources === null || resources === void 0 ? void 0 : resources.filterDateErrorDateFormat) || '',\n      errorAfterMaxDate: (resources === null || resources === void 0 ? void 0 : resources.errorAfterMaxDate) || '',\n      errorBeforeMinDate: (resources === null || resources === void 0 ? void 0 : resources.errorBeforeMinDate) || '',\n      errorInvalidDateRange: '',\n      errorRequiredDate: (resources === null || resources === void 0 ? void 0 : resources.dateRequired) || '',\n      errorRequiredDateRange: '',\n      errorInvalidMinimumNights: ''\n    };\n  }\n\n  toLocaleDate(moment) {\n    return moment ? moment.locale(this.props.locale) : undefined;\n  }\n\n  render() {\n    if (this.props.pdf || index_2.isReadOnly(this.props.item)) {\n      return React.createElement(textview_1.default, {\n        id: this.props.id,\n        item: this.props.item,\n        value: this.getReadonlyValue(),\n        onRenderMarkdown: this.props.onRenderMarkdown\n      }, this.props.children);\n    }\n\n    return React.createElement(validation_1.Validation, Object.assign({}, this.props), React.createElement(date_range_picker_1.DateRangePicker, {\n      type: \"single\",\n      id: `${util_1.getId(this.props.id)}-datepicker_input`,\n      locale: this.props.locale,\n      errorResources: this.getDatepickerErrorPhrases(),\n      resources: this.props.resources,\n      label: this.props.label,\n      subLabel: this.props.subLabel,\n      isRequired: util_1.isRequired(this.props.item),\n      placeholder: extension_1.getPlaceholder(this.props.item),\n      ref: this.props.datepickerRef,\n      maximumDate: this.toLocaleDate(this.props.maxDate),\n      minimumDate: this.toLocaleDate(this.props.minDate),\n      initialDate: this.toLocaleDate(moment_1.default(new Date())),\n      singleDateValue: this.props.dateValue ? this.toLocaleDate(moment_1.default(this.props.dateValue)) : undefined,\n      className: this.props.className,\n      onDateChange: this.onDateChange,\n      validationErrorRenderer: this.props.validationErrorRenderer,\n      helpButton: this.props.helpButton,\n      helpElement: this.props.helpElement\n    }));\n  }\n\n}\n\nexports.DateDayInput = DateDayInput;","map":null,"metadata":{},"sourceType":"script"}