{"ast":null,"code":"var engine = {};\n\nengine.orOp = function (a, b) {\n  if (Array.isArray(b)) {\n    if (a === true) {\n      return true;\n    } else if (a === false) {\n      return [];\n    } else if (Array.isArray(a)) {\n      return [];\n    }\n  }\n\n  if (Array.isArray(a)) {\n    if (b === true) {\n      return true;\n    } else {\n      return [];\n    }\n  }\n\n  return a || b;\n};\n\nengine.andOp = function (a, b) {\n  if (Array.isArray(b)) {\n    if (a === true) {\n      return [];\n    } else if (a === false) {\n      return false;\n    } else if (Array.isArray(a)) {\n      return [];\n    }\n  }\n\n  if (Array.isArray(a)) {\n    if (b === true) {\n      return [];\n    } else {\n      return false;\n    }\n  }\n\n  return a && b;\n};\n\nengine.xorOp = function (a, b) {\n  // If a or b are arrays, they must be the empty set.\n  // In that case, the result is always the empty set.\n  if (Array.isArray(a) || Array.isArray(b)) return [];\n  return a && !b || !a && b;\n};\n\nengine.impliesOp = function (a, b) {\n  if (Array.isArray(b)) {\n    if (a === true) {\n      return [];\n    } else if (a === false) {\n      return true;\n    } else if (Array.isArray(a)) {\n      return [];\n    }\n  }\n\n  if (Array.isArray(a)) {\n    if (b === true) {\n      return true;\n    } else {\n      return [];\n    }\n  }\n\n  if (a === false) {\n    return true;\n  }\n\n  return a && b;\n};\n\nmodule.exports = engine;","map":null,"metadata":{},"sourceType":"script"}