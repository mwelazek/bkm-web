{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updatePractitionerRoles = exports.practitionersFilterFunction = exports.postPutOrganization = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar _lodash = require(\"lodash\");\n\nvar _constants = require(\"./constants\");\n\nvar _uuid = require(\"uuid\");\n\nvar _userManagement = require(\"@opensrp/user-management\");\n\nvar _excluded = [\"organization\"];\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2[\"default\"])(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar postPutOrganization = function postPutOrganization(baseUrl, payload) {\n  var serve = new _reactUtils.FHIRServiceClass(baseUrl, _constants.organizationResourceType);\n  return serve.update(payload);\n};\n\nexports.postPutOrganization = postPutOrganization;\n\nvar practitionersFilterFunction = function practitionersFilterFunction(inputValue, option) {\n  return !!(option !== null && option !== void 0 && option.label.toLowerCase().includes(inputValue.toLowerCase()));\n};\n\nexports.practitionersFilterFunction = practitionersFilterFunction;\n\nvar arrKeyBy = function arrKeyBy(arr) {\n  return (0, _lodash.transform)(arr, function (acc, value) {\n    acc[value] = value;\n  }, {});\n};\n\nvar updatePractitionerRoles = function () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee(baseUrl, values, initialValues, organization, practitioners, existingRoles) {\n    var _values$members, _initialValues$member;\n\n    var orgId, members, initialMembers, membersById, initialMembersById, practitionersById, toAdd, toRemove, existingRolesByOrgPractIds, serve, removePromises, practitionerRolesModifyPromises, organizationPayload, existingPractitionerRoles, existingPractitionerRolesPromises, practitionersWithExistingPractitionerRoles, practitionersWithoutExistingPractitionerRoles, _iterator, _step, _loop;\n\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            orgId = organization.id;\n            members = (_values$members = values.members) !== null && _values$members !== void 0 ? _values$members : [];\n            initialMembers = (_initialValues$member = initialValues.members) !== null && _initialValues$member !== void 0 ? _initialValues$member : [];\n            membersById = arrKeyBy(members);\n            initialMembersById = arrKeyBy(initialMembers);\n            practitionersById = (0, _lodash.keyBy)(practitioners, function (practitioner) {\n              return \"\".concat(_constants.practitionerResourceType, \"/\").concat(practitioner.id);\n            });\n            toAdd = [];\n            toRemove = [];\n            members.forEach(function (id) {\n              if (!initialMembersById[id]) {\n                toAdd.push(id);\n              }\n            });\n            initialMembers.forEach(function (id) {\n              if (!membersById[id]) {\n                toRemove.push(id);\n              }\n            });\n            existingRolesByOrgPractIds = (0, _lodash.transform)(existingRoles, function (acc, value) {\n              var _value$organization, _value$practitioner;\n\n              var orgReference = (_value$organization = value.organization) === null || _value$organization === void 0 ? void 0 : _value$organization.reference;\n\n              if (!acc[orgReference]) {\n                acc[orgReference] = {};\n              }\n\n              acc[orgReference][(_value$practitioner = value.practitioner) === null || _value$practitioner === void 0 ? void 0 : _value$practitioner.reference] = value;\n            }, {});\n            serve = new _reactUtils.FHIRServiceClass(baseUrl, _constants.practitionerRoleResourceType);\n            removePromises = toRemove.map(function (practId) {\n              var organizationId = orgId;\n              var role = existingRolesByOrgPractIds[\"\".concat(_constants.organizationResourceType, \"/\").concat(organizationId)][practId];\n              var organization = role.organization,\n                  rest = (0, _objectWithoutProperties2[\"default\"])(role, _excluded);\n              return function () {\n                return serve.update(rest);\n              };\n            });\n            practitionerRolesModifyPromises = [];\n\n            if (!(toAdd.length > 0)) {\n              _context.next = 25;\n              break;\n            }\n\n            organizationPayload = {\n              reference: \"\".concat(_constants.organizationResourceType, \"/\").concat(orgId),\n              display: organization.name\n            };\n            _context.next = 18;\n            return (0, _reactUtils.loadAllResources)(baseUrl, _constants.practitionerRoleResourceType, {\n              practitioner: toAdd.join()\n            }).then(function (resp) {\n              return (0, _reactUtils.getResourcesFromBundle)(resp);\n            });\n\n          case 18:\n            existingPractitionerRoles = _context.sent;\n            existingPractitionerRolesPromises = existingPractitionerRoles.map(function (practitionerRole) {\n              return _objectSpread(_objectSpread({}, practitionerRole), {}, {\n                organization: organizationPayload\n              });\n            }).map(function (practitionerRole) {\n              return function () {\n                return serve.update(practitionerRole);\n              };\n            });\n            practitionerRolesModifyPromises.push.apply(practitionerRolesModifyPromises, (0, _toConsumableArray2[\"default\"])(existingPractitionerRolesPromises));\n            practitionersWithExistingPractitionerRoles = existingPractitionerRoles.map(function (existingPractitionerRole) {\n              var _existingPractitioner;\n\n              return (_existingPractitioner = existingPractitionerRole.practitioner) === null || _existingPractitioner === void 0 ? void 0 : _existingPractitioner.reference;\n            });\n            practitionersWithoutExistingPractitionerRoles = toAdd.filter(function (practitionerId) {\n              return !practitionersWithExistingPractitionerRoles.includes(practitionerId);\n            });\n            _iterator = _createForOfIteratorHelper(practitionersWithoutExistingPractitionerRoles);\n\n            try {\n              _loop = function _loop() {\n                var _practitioner$identif;\n\n                var practitionerID = _step.value;\n                var newPractitionerRoleResourceID = (0, _uuid.v4)();\n                var practitioner = practitionersById[practitionerID];\n                var practitionerSecondaryIdentifier = (_practitioner$identif = practitioner.identifier) === null || _practitioner$identif === void 0 ? void 0 : _practitioner$identif.find(function (identifier) {\n                  return identifier.use === 'secondary';\n                });\n                var practitionerDisplayName = (0, _reactUtils.getObjLike)(practitioner.name, 'use', _constants.HumanNameUseCodes.OFFICIAL, true)[0];\n                var newPractitionerRole = {\n                  resourceType: _constants.practitionerRoleResourceType,\n                  id: newPractitionerRoleResourceID,\n                  identifier: [{\n                    use: _reactUtils.IdentifierUseCodes.OFFICIAL,\n                    value: newPractitionerRoleResourceID\n                  }].concat((0, _toConsumableArray2[\"default\"])(practitionerSecondaryIdentifier ? [practitionerSecondaryIdentifier] : [])),\n                  active: true,\n                  practitioner: {\n                    reference: practitionerID,\n                    display: (0, _reactUtils.parseFhirHumanName)(practitionerDisplayName)\n                  },\n                  organization: organizationPayload,\n                  code: [{\n                    coding: [{\n                      system: 'http://snomed.info/sct',\n                      code: _userManagement.PRACTITIONER_USER_TYPE_CODE,\n                      display: 'Assigned practitioner'\n                    }]\n                  }]\n                };\n                practitionerRolesModifyPromises.push(function () {\n                  return serve.update(newPractitionerRole);\n                });\n              };\n\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                _loop();\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n          case 25:\n            return _context.abrupt(\"return\", Promise.all([].concat((0, _toConsumableArray2[\"default\"])(removePromises), practitionerRolesModifyPromises).map(function (p) {\n              return p();\n            })));\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function updatePractitionerRoles(_x, _x2, _x3, _x4, _x5, _x6) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.updatePractitionerRoles = updatePractitionerRoles;","map":null,"metadata":{},"sourceType":"script"}