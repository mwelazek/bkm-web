{"ast":null,"code":"import _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { Collapse } from 'react-collapse';\nimport { theme } from '@helsenorge/designsystem-react';\nimport { setTabIndex, resetTabIndex } from '@helsenorge/core-utils/tabbable-utils';\nimport { AnalyticsId } from '@helsenorge/core-utils/adobe-analytics';\nimport ChevronUp from '../../icons/ChevronUp';\nimport ChevronDown from '../../icons/ChevronDown';\nimport { Spinner } from '../../atoms/spinner';\nimport './styles.scss';\nvar count = 0;\nexport var ExpandableSection = /*#__PURE__*/function (_React$Component) {\n  _inherits(ExpandableSection, _React$Component);\n\n  var _super = _createSuper(ExpandableSection);\n\n  function ExpandableSection(props) {\n    var _this;\n\n    _classCallCheck(this, ExpandableSection);\n\n    _this = _super.call(this, props);\n\n    _this.scrollListener = function () {\n      var _this$state = _this.state,\n          sticky = _this$state.sticky,\n          showContent = _this$state.showContent;\n\n      if (showContent && _this.sectionElementRef && _this.sectionElementRef.current && _this.headerRef && _this.headerRef.current) {\n        var sectionBox = _this.sectionElementRef.current.getBoundingClientRect();\n\n        var headerHeight = _this.headerRef.current.getBoundingClientRect().height;\n\n        var enteredSection = !sticky && sectionBox.top <= 0;\n\n        if (enteredSection) {\n          _this.setSticky(headerHeight, sectionBox.width);\n        } else if (sticky && sectionBox.top > 0) {\n          _this.removeSticky();\n        }\n\n        if (enteredSection || sticky) {\n          if (sectionBox.top <= -sectionBox.height + headerHeight) {\n            _this.setState({\n              hasStickyClass: false\n            });\n          } else {\n            _this.setState({\n              hasStickyClass: true\n            });\n          }\n        }\n      }\n    };\n\n    _this.resizeListener = function () {\n      if (_this.props.isSticky && _this.sectionElementRef && _this.sectionElementRef.current && _this.headerRef && _this.headerRef.current) {\n        var sectionWidth = _this.sectionElementRef.current.getBoundingClientRect().width;\n\n        _this.headerRef.current.style.width = \"\".concat(sectionWidth, \"px\");\n      }\n    };\n\n    _this.setSticky = function (height, width) {\n      _this.setState({\n        sticky: true\n      });\n\n      if (_this.headerRef && _this.headerRef.current) {\n        _this.headerRef.current.style.width = \"\".concat(width, \"px\");\n      }\n\n      if (_this.stickyPlaceholderRef && _this.stickyPlaceholderRef.current) {\n        _this.stickyPlaceholderRef.current.style.height = \"\".concat(height, \"px\");\n      }\n    };\n\n    _this.removeSticky = function () {\n      if (_this.headerRef && _this.headerRef.current) {\n        _this.headerRef.current.style.width = '';\n      }\n\n      _this.setState({\n        sticky: false\n      });\n    };\n\n    _this.scanTabbableElements = function (isOpen) {\n      if (_this.containerElementRef && _this.containerElementRef.current) {\n        if (isOpen) {\n          _this.forceUpdate();\n        } else {\n          var updatedTabbableContent = setTabIndex(_this.containerElementRef.current);\n\n          _this.setState({\n            tabbableElements: updatedTabbableContent.tabbableElements,\n            previousTabIndexes: updatedTabbableContent.previousTabIndexes\n          });\n        }\n      }\n    };\n\n    _this.focus = function () {\n      if (_this.buttonElementRef && _this.buttonElementRef.current) {\n        _this.buttonElementRef.current.focus();\n      }\n    };\n\n    _this.toggleShowExpanded = function (e) {\n      var _this$props = _this.props,\n          beforeOpenClose = _this$props.beforeOpenClose,\n          onExpand = _this$props.onExpand;\n      var _this$state2 = _this.state,\n          previousTabIndexes = _this$state2.previousTabIndexes,\n          tabbableElements = _this$state2.tabbableElements,\n          showContent = _this$state2.showContent;\n      var isOpen = showContent ? showContent : false;\n\n      if (beforeOpenClose) {\n        if (beforeOpenClose(e, !isOpen) === false) {\n          return;\n        }\n      }\n\n      if (showContent && _this.containerElementRef && _this.containerElementRef.current) {\n        var updatedTabbableContent = setTabIndex(_this.containerElementRef.current);\n\n        _this.setState({\n          tabbableElements: updatedTabbableContent.tabbableElements,\n          previousTabIndexes: updatedTabbableContent.previousTabIndexes\n        });\n\n        if (_this.state.sticky) {\n          _this.removeSticky();\n        }\n      } else if (tabbableElements.length > 0) {\n        var updatedTabbableElements = resetTabIndex(tabbableElements, previousTabIndexes);\n\n        _this.setState({\n          tabbableElements: updatedTabbableElements\n        });\n      }\n\n      _this.focus();\n\n      _this.setState({\n        showContent: !showContent\n      });\n\n      if (onExpand) {\n        onExpand();\n      }\n    };\n\n    _this.buttonFocused = function () {\n      _this.setState({\n        buttonFocused: true\n      });\n    };\n\n    _this.buttonBlur = function () {\n      _this.setState({\n        buttonFocused: false\n      });\n    };\n\n    _this.getHeaderButtonText = function () {\n      var _this$props2 = _this.props,\n          label = _this$props2.label,\n          labelOpen = _this$props2.labelOpen,\n          labelClosed = _this$props2.labelClosed,\n          labelHTML = _this$props2.labelHTML,\n          labelJSX = _this$props2.labelJSX;\n      var showContent = _this.state.showContent;\n      var spanClass = 'mol_expandable-section__buttontext';\n\n      if (labelJSX) {\n        return React.createElement('span', {\n          className: spanClass\n        }, labelJSX);\n      } else if (labelHTML) {\n        return React.createElement('span', {\n          className: spanClass,\n          dangerouslySetInnerHTML: _this.createMarkup(labelHTML)\n        });\n      } else if (labelOpen && showContent) {\n        return React.createElement('span', {\n          className: spanClass\n        }, labelOpen);\n      } else if (labelClosed && !showContent) {\n        return React.createElement('span', {\n          className: spanClass\n        }, labelClosed);\n      } else {\n        return React.createElement('span', {\n          className: spanClass\n        }, label);\n      }\n    };\n\n    _this.sectionElementRef = React.createRef();\n    _this.headerRef = React.createRef();\n    _this.buttonElementRef = React.createRef();\n    _this.containerElementRef = React.createRef();\n    _this.stickyPlaceholderRef = React.createRef();\n    _this.state = {\n      showContent: !!_this.props.openFromStart,\n      buttonFocused: false,\n      tabbableElements: [],\n      previousTabIndexes: [],\n      sticky: false,\n      hasStickyClass: false\n    };\n    _this.guid = \"expander-section-\".concat(count++);\n    return _this;\n  }\n\n  _createClass(ExpandableSection, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scanTabbableElements(!!this.props.openFromStart);\n\n      if (this.props.isSticky) {\n        window.addEventListener('scroll', this.scrollListener);\n        window.addEventListener('resize', this.resizeListener);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.isSticky) {\n        window.removeEventListener('scroll', this.scrollListener);\n        window.removeEventListener('resize', this.resizeListener);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.isAsyncContentLoaded !== this.props.isAsyncContentLoaded && !!this.props.isAsyncContentLoaded) {\n        this.scanTabbableElements(!!this.props.openFromStart);\n      }\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.props.openFromStart !== nextProps.openFromStart) {\n        this.setState({\n          showContent: nextProps.openFromStart\n        });\n      }\n    }\n  }, {\n    key: \"createMarkup\",\n    value: function createMarkup(htmlString) {\n      return {\n        __html: htmlString\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          inlineButton = _this$props3.inlineButton,\n          expanderClassName = _this$props3.expanderClassName,\n          smallArrow = _this$props3.smallArrow,\n          rightArrow = _this$props3.rightArrow,\n          rightText = _this$props3.rightText,\n          headerClassName = _this$props3.headerClassName,\n          buttonElementClassName = _this$props3.buttonElementClassName,\n          noNestedLine = _this$props3.noNestedLine,\n          className = _this$props3.className,\n          showSpinner = _this$props3.showSpinner,\n          headerTag = _this$props3.headerTag,\n          description = _this$props3.description,\n          buttonId = _this$props3.buttonId,\n          buttonTestId = _this$props3.buttonTestId;\n      var _this$state3 = this.state,\n          showContent = _this$state3.showContent,\n          buttonFocused = _this$state3.buttonFocused,\n          sticky = _this$state3.sticky,\n          hasStickyClass = _this$state3.hasStickyClass;\n      var expanderClasses = classNames({\n        'mol_expandable-section': true,\n        open: showContent\n      }, expanderClassName);\n      var expanderArrowClasses = classNames('mol_expandable-section__arrow', {\n        'mol_expandable-section__arrow--open': showContent\n      }, {\n        'mol_expandable-section__arrow--small': smallArrow || inlineButton\n      }, {\n        'mol_expandable-section__arrow--left': !rightArrow\n      }, {\n        'mol_expandable-section__arrow--right': rightArrow\n      });\n      var headerClasses = classNames({\n        'mol_expandable-section__header': !inlineButton\n      }, {\n        'mol_expandable-section__header--right': rightArrow && rightText\n      }, {\n        'mol_expandable-section__header--focused': buttonFocused\n      }, {\n        'mol_expandable-section__header--sticky': sticky && !!hasStickyClass\n      }, {\n        'mol_expandable-section__header--absolute': sticky && !hasStickyClass\n      }, headerClassName);\n      var buttonClasses = classNames({\n        'mol_expandable-section__button': true\n      }, {\n        'mol_expandable-section__button--inline': inlineButton\n      }, {\n        'mol_expandable-section__button--right': rightArrow\n      }, {\n        'mol_expandable-section__button--right-text': rightArrow && rightText\n      }, {\n        'mol_expandable-section__button--focused': buttonFocused\n      }, buttonElementClassName);\n      var containerClasses = classNames('mol_expandable-section__container', {\n        'mol_expandable-section__container--inline': inlineButton && !noNestedLine\n      }, {\n        'mol_expandable-section__container--right': rightArrow\n      }, className);\n      var spinner = showSpinner ? React.createElement(Spinner, {\n        local: true,\n        transparent: true,\n        mini: true\n      }) : null;\n      var headerButtonText = this.getHeaderButtonText();\n      var descriptionHtml = description ? React.createElement('span', {\n        dangerouslySetInnerHTML: this.createMarkup(description)\n      }) : null;\n      var buttonProps = {};\n\n      if (buttonId) {\n        buttonProps.id = buttonId;\n      }\n\n      var arrowElement = showContent ? React.createElement(ChevronUp, {\n        color: theme.palette.blueberry700\n      }) : React.createElement(ChevronDown, {\n        color: theme.palette.blueberry700\n      });\n      var buttonHtmlNode = React.createElement(\"button\", Object.assign({\n        type: \"button\",\n        className: buttonClasses,\n        onClick: this.toggleShowExpanded,\n        onFocus: this.buttonFocused,\n        onBlur: this.buttonBlur,\n        ref: this.buttonElementRef,\n        \"aria-expanded\": showContent,\n        \"aria-controls\": this.guid,\n        \"data-testid\": buttonTestId,\n        \"data-analyticsid\": AnalyticsId.ExpandableSection\n      }, buttonProps), headerButtonText, React.createElement(\"span\", {\n        className: expanderArrowClasses\n      }, arrowElement), spinner);\n      var headerComponent = React.createElement(headerTag ? headerTag : 'header', {\n        className: headerClasses,\n        ref: this.headerRef\n      }, buttonHtmlNode);\n      return React.createElement(\"section\", {\n        className: expanderClasses,\n        ref: this.sectionElementRef\n      }, headerComponent, this.props.buttonPostfix, this.state.sticky && React.createElement(\"div\", {\n        ref: this.stickyPlaceholderRef\n      }), React.createElement(\"div\", {\n        id: this.guid\n      }, React.createElement(Collapse, {\n        isOpened: showContent ? showContent : false\n      }, React.createElement(\"div\", {\n        className: containerClasses,\n        ref: this.containerElementRef\n      }, this.props.children, descriptionHtml))));\n    }\n  }]);\n\n  return ExpandableSection;\n}(React.Component);","map":null,"metadata":{},"sourceType":"module"}