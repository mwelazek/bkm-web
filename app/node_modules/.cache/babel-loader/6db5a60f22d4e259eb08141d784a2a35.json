{"ast":null,"code":"//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nvar Set = require(\"../Utils\").Set;\n\nvar DFAState = require('./DFAState').DFAState;\n\nvar StarLoopEntryState = require('../atn/ATNState').StarLoopEntryState;\n\nvar ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;\n\nvar DFASerializer = require('./DFASerializer').DFASerializer;\n\nvar LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;\n\nfunction DFA(atnStartState, decision) {\n  if (decision === undefined) {\n    decision = 0;\n  } // From which ATN state did we create this DFA?\n\n\n  this.atnStartState = atnStartState;\n  this.decision = decision; // A set of all DFA states. Use {@link Map} so we can get old state back\n  // ({@link Set} only allows you to see if it's there).\n\n  this._states = new Set();\n  this.s0 = null; // {@code true} if this DFA is for a precedence decision; otherwise,\n  // {@code false}. This is the backing field for {@link //isPrecedenceDfa},\n  // {@link //setPrecedenceDfa}.\n\n  this.precedenceDfa = false;\n\n  if (atnStartState instanceof StarLoopEntryState) {\n    if (atnStartState.isPrecedenceDecision) {\n      this.precedenceDfa = true;\n      var precedenceState = new DFAState(null, new ATNConfigSet());\n      precedenceState.edges = [];\n      precedenceState.isAcceptState = false;\n      precedenceState.requiresFullContext = false;\n      this.s0 = precedenceState;\n    }\n  }\n\n  return this;\n} // Get the start state for a specific precedence value.\n//\n// @param precedence The current precedence.\n// @return The start state corresponding to the specified precedence, or\n// {@code null} if no start state exists for the specified precedence.\n//\n// @throws IllegalStateException if this is not a precedence DFA.\n// @see //isPrecedenceDfa()\n\n\nDFA.prototype.getPrecedenceStartState = function (precedence) {\n  if (!this.precedenceDfa) {\n    throw \"Only precedence DFAs may contain a precedence start state.\";\n  } // s0.edges is never null for a precedence DFA\n\n\n  if (precedence < 0 || precedence >= this.s0.edges.length) {\n    return null;\n  }\n\n  return this.s0.edges[precedence] || null;\n}; // Set the start state for a specific precedence value.\n//\n// @param precedence The current precedence.\n// @param startState The start state corresponding to the specified\n// precedence.\n//\n// @throws IllegalStateException if this is not a precedence DFA.\n// @see //isPrecedenceDfa()\n//\n\n\nDFA.prototype.setPrecedenceStartState = function (precedence, startState) {\n  if (!this.precedenceDfa) {\n    throw \"Only precedence DFAs may contain a precedence start state.\";\n  }\n\n  if (precedence < 0) {\n    return;\n  } // synchronization on s0 here is ok. when the DFA is turned into a\n  // precedence DFA, s0 will be initialized once and not updated again\n  // s0.edges is never null for a precedence DFA\n\n\n  this.s0.edges[precedence] = startState;\n}; //\n// Sets whether this is a precedence DFA. If the specified value differs\n// from the current DFA configuration, the following actions are taken;\n// otherwise no changes are made to the current DFA.\n//\n// <ul>\n// <li>The {@link //states} map is cleared</li>\n// <li>If {@code precedenceDfa} is {@code false}, the initial state\n// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new\n// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to\n// store the start states for individual precedence values.</li>\n// <li>The {@link //precedenceDfa} field is updated</li>\n// </ul>\n//\n// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,\n// {@code false}\n\n\nDFA.prototype.setPrecedenceDfa = function (precedenceDfa) {\n  if (this.precedenceDfa !== precedenceDfa) {\n    this._states = new DFAStatesSet();\n\n    if (precedenceDfa) {\n      var precedenceState = new DFAState(null, new ATNConfigSet());\n      precedenceState.edges = [];\n      precedenceState.isAcceptState = false;\n      precedenceState.requiresFullContext = false;\n      this.s0 = precedenceState;\n    } else {\n      this.s0 = null;\n    }\n\n    this.precedenceDfa = precedenceDfa;\n  }\n};\n\nObject.defineProperty(DFA.prototype, \"states\", {\n  get: function () {\n    return this._states;\n  }\n}); // Return a list of all states in this DFA, ordered by state number.\n\nDFA.prototype.sortedStates = function () {\n  var list = this._states.values();\n\n  return list.sort(function (a, b) {\n    return a.stateNumber - b.stateNumber;\n  });\n};\n\nDFA.prototype.toString = function (literalNames, symbolicNames) {\n  literalNames = literalNames || null;\n  symbolicNames = symbolicNames || null;\n\n  if (this.s0 === null) {\n    return \"\";\n  }\n\n  var serializer = new DFASerializer(this, literalNames, symbolicNames);\n  return serializer.toString();\n};\n\nDFA.prototype.toLexerString = function () {\n  if (this.s0 === null) {\n    return \"\";\n  }\n\n  var serializer = new LexerDFASerializer(this);\n  return serializer.toString();\n};\n\nexports.DFA = DFA;","map":null,"metadata":{},"sourceType":"script"}