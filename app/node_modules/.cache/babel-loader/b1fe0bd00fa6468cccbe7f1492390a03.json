{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport LastOpp from '../../icons/LastOpp';\nimport { FunctionButton } from '../buttons/function-button';\nimport { Label } from './../label';\nimport MessageBox from '../message-box';\nimport { Spinner } from '../spinner';\nimport ValidationError from './../../molecules/form/validation-error';\nimport FileElement, { Type } from './file';\nimport { sizeIsValid, typeIsValid, mimeTypeIsValid } from './validation';\nimport OriginalDropzone from 'react-dropzone';\nimport styles from './toolkitstyles.module.scss';\nexport default class Dropzone extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ctrls = {};\n\n    this.onDrop = (acceptedFiles, _fileRejections, event) => {\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n\n      const rejected = [];\n      const uploaded = [];\n\n      for (const f of acceptedFiles) {\n        if (this.validateFile(f)) {\n          uploaded.push(f);\n        } else {\n          rejected.push(f);\n        }\n      }\n\n      if (uploaded.length > 0) {\n        this.setState({\n          loading: true\n        });\n        this.props.onDrop(uploaded, (success, errormessage) => {\n          if (success) {\n            this.setState({\n              loading: false,\n              rejectedFiles: rejected\n            }, this.validateOnDrop);\n          } else {\n            this.setState({\n              loading: false,\n              rejectedFiles: rejected,\n              errormessage: errormessage\n            });\n          }\n        });\n      } else {\n        this.setState({\n          rejectedFiles: rejected\n        }, this.validateOnDrop);\n      }\n    };\n\n    this.onDelete = fileId => {\n      if (this.props.onDelete) {\n        this.setState({\n          loading: true\n        });\n        this.props.onDelete(fileId, success => {\n          if (success) {\n            this.setState({\n              loading: false\n            });\n          } else {\n            this.setState({\n              loading: false\n            });\n          }\n        });\n      }\n    };\n\n    this.deleteRejected = fileId => {\n      if (this.state.rejectedFiles) {\n        const newRejectedFiles = this.state.rejectedFiles.filter(f => f.name !== fileId);\n        this.setState({\n          rejectedFiles: newRejectedFiles\n        }, this.validateOnDrop);\n      }\n    };\n\n    this.updateValid = valid => {\n      return new Promise(resolve => {\n        this.setState({\n          isValid: valid\n        }, () => {\n          if (this.props.onValidated) {\n            this.props.onValidated(valid);\n          }\n\n          resolve();\n        });\n      });\n    };\n\n    this.validateField = () => {\n      const validRejected = this.validateRejectedFiles();\n      const validRequired = this.validateRequired();\n      const validMin = this.validateMin();\n      const validMax = this.validateMax();\n      return this.updateValid(validRejected && validRequired && validMin && validMax);\n    };\n\n    this.validateOnDrop = () => {\n      const validRejected = this.validateRejectedFiles();\n      const validMax = this.validateMax();\n      return this.updateValid(validRejected && validMax);\n    };\n\n    this.validateRejectedFiles = () => {\n      if (this.state.rejectedFiles && this.state.rejectedFiles.length > 0) return false;\n      return true;\n    };\n\n    this.validateRequired = () => {\n      if (!this.props.isRequired) return true;\n      if (!this.props.uploadedFiles) return false;\n\n      if (!this.props.shouldUploadMultiple) {\n        return this.props.uploadedFiles.length === 1;\n      }\n\n      return this.props.uploadedFiles.length > 0;\n    };\n\n    this.validateMin = () => {\n      if (this.props.minFiles && this.props.uploadedFiles && this.props.uploadedFiles.length > 0 && this.props.uploadedFiles.length < this.props.minFiles) return false;\n      return true;\n    };\n\n    this.validateMax = () => {\n      if (this.props.maxFiles && this.props.uploadedFiles && this.props.uploadedFiles.length > this.props.maxFiles) return false;\n      return true;\n    };\n\n    this.validateFile = file => {\n      let valid = true;\n\n      if (this.props.maxFileSize) {\n        valid = valid && sizeIsValid(file, this.props.maxFileSize);\n      }\n\n      if (this.props.validFileTypes) {\n        valid = valid && typeIsValid(file, this.props.validFileTypes);\n      }\n\n      if (this.props.validMimeTypes) {\n        valid = valid && mimeTypeIsValid(file, this.props.validMimeTypes);\n      }\n\n      return valid;\n    };\n\n    this.onOpenClick = () => {\n      if (this.ctrls.dropzone) this.ctrls.dropzone.open();\n    };\n\n    this.renderLabel = () => {\n      if (this.props.label !== undefined) {\n        const labelText = React.createElement(React.Fragment, null, this.props.label, this.props.isRequired && this.props.requiredLabel && this.props.showRequiredLabel ? React.createElement(\"em\", null, \" \", this.props.requiredLabel) : '', !this.props.isRequired && this.props.optionalLabel && this.props.showOptionalLabel ? React.createElement(\"em\", null, \" \", this.props.optionalLabel) : '');\n        return React.createElement(Label, {\n          labelText: labelText,\n          htmlFor: this.props.id,\n          sublabelText: this.props.subLabel,\n          testId: this.props.labelTestId,\n          helpButton: this.props.helpButton\n        });\n      }\n\n      return null;\n    };\n\n    this.renderHelp = () => {\n      if (this.props.helpElement) {\n        return this.props.helpElement;\n      }\n\n      return null;\n    };\n\n    this.renderSupportedFormats = () => {\n      if (this.props.supportedFileFormatsText) {\n        return React.createElement(\"div\", {\n          className: styles.dropzone__acceptedFormats\n        }, this.props.supportedFileFormatsText);\n      }\n\n      return null;\n    };\n\n    this.renderUploadButton = () => {\n      if (this.shouldRenderUploadButton()) {\n        return React.createElement(FunctionButton, {\n          id: this.props.id,\n          svgIcon: React.createElement(LastOpp, null),\n          disabled: this.props.disabled,\n          onClick: this.onOpenClick,\n          className: `${styles.dropzone__uploadButton} ${this.props.uploadButtonClassName}`,\n          testId: this.props.functionButtonTestId\n        }, this.props.uploadButtonText);\n      }\n    };\n\n    this.shouldRenderUploadButton = () => {\n      var _a;\n\n      if (this.state.loading) return false;\n      const numAcceptedFiles = this.props.uploadedFiles ? this.props.uploadedFiles.length : 0;\n      const numRejectedFiles = this.state.rejectedFiles ? this.state.rejectedFiles.length : 0;\n\n      if (!((_a = this.props) === null || _a === void 0 ? void 0 : _a.shouldUploadMultiple)) {\n        return numAcceptedFiles + numRejectedFiles === 0;\n      }\n\n      if (this.props.maxFiles) {\n        return numAcceptedFiles + numRejectedFiles < this.props.maxFiles;\n      }\n\n      return true;\n    };\n\n    this.hasUploadedFiles = () => {\n      return this.props.uploadedFiles && this.props.uploadedFiles.length > 0 ? true : false;\n    };\n\n    this.renderDropzone = () => {\n      var _a;\n\n      return React.createElement(OriginalDropzone, {\n        ref: control => this.ctrls.dropzone = control,\n        onDrop: this.onDrop,\n        onDragOver: () => this.setState({\n          dragover: true\n        }),\n        onDragLeave: () => this.setState({\n          dragover: false\n        }),\n        multiple: !!((_a = this.props) === null || _a === void 0 ? void 0 : _a.shouldUploadMultiple)\n      }, _ref => {\n        let {\n          getRootProps,\n          getInputProps\n        } = _ref;\n        return React.createElement(\"div\", Object.assign({\n          className: classNames(styles['dropzone__visual-dropzone'], {\n            [styles['dropzone__visual-dropzone--visible']]: !!this.props.visualDropZone\n          }, {\n            [styles['dropzone__visual-dropzone--dragover']]: this.state.dragover\n          }),\n          \"data-testid\": this.props.originalDropzoneTestId\n        }, getRootProps()), React.createElement(\"button\", {\n          className: classNames(styles['dropzone__visual-dropzone__button'], {\n            [styles['dropzone__visual-dropzone__button--visible']]: !!this.props.visualDropZone\n          }),\n          type: \"button\",\n          onClick: () => open\n        }, this.props.chooseFilesText || 'Velg filer'), React.createElement(\"label\", {\n          className: classNames(styles['dropzone__visual-dropzone__label'], {\n            [styles['dropzone__visual-dropzone__label--visible']]: !!this.props.visualDropZone\n          })\n        }, this.props.dropzoneStatusText || 'Last opp fil', ' '), React.createElement(\"input\", Object.assign({}, getInputProps())));\n      });\n    };\n\n    this.state = {\n      rejectedFiles: [],\n      loading: false,\n      isValid: true,\n      dragover: false\n    };\n  }\n\n  renderValidationErrorMessage() {\n    let error = '';\n\n    if (this.props.errorMessage && this.state.rejectedFiles) {\n      error = typeof this.props.errorMessage === 'string' ? this.props.errorMessage : this.props.errorMessage(this.state.rejectedFiles[0]);\n      return React.createElement(ValidationError, {\n        isValid: this.state.isValid,\n        error: error,\n        testId: this.props.validationTestId\n      });\n    }\n  }\n\n  renderErrorMessage() {\n    if (this.state.errormessage) {\n      return React.createElement(\"div\", {\n        className: styles.dropzone__errormessage\n      }, React.createElement(MessageBox, {\n        type: \"error\",\n        title: this.state.errormessage.Title,\n        description: this.state.errormessage.Body,\n        testId: this.props.messageBoxTestId\n      }));\n    }\n  }\n\n  isValid() {\n    return this.state.isValid;\n  }\n\n  renderSpinner() {\n    if (this.state.loading && !this.props.noSpinner) {\n      return React.createElement(Spinner, {\n        inline: true,\n        mini: true,\n        className: styles.dropzone__spinner\n      });\n    }\n  }\n\n  renderFiles() {\n    const rejectedFiles = [];\n    const uploadedFiles = [];\n\n    if (this.state.rejectedFiles) {\n      let count = 0;\n\n      for (const r of this.state.rejectedFiles) {\n        rejectedFiles.push(React.createElement(FileElement, {\n          key: r.name + count++,\n          fileId: r.name,\n          type: Type.rejected,\n          fileName: r.name,\n          loading: this.state.loading,\n          shouldRenderDeleteButton: true,\n          deleteFile: this.deleteRejected,\n          onOpenFile: this.props.onOpenFile,\n          onRequestLink: this.props.onRequestLink,\n          deleteText: this.props.deleteText,\n          verifyDeleteText: this.props.verifyDeleteText,\n          confirmText: this.props.confirmText,\n          cancelText: this.props.cancelText,\n          confirmDelete: this.props.confirmDelete,\n          dontShowHardcodedText: this.props.dontShowHardcodedText,\n          confirmDeleteClassName: this.props.confirmDeleteClassName,\n          customClass: this.props.fileElementClassName\n        }));\n      }\n    }\n\n    if (this.props.uploadedFiles) {\n      let count = 0;\n\n      for (const u of this.props.uploadedFiles) {\n        uploadedFiles.push(React.createElement(FileElement, {\n          key: `${u.id}${count++}`,\n          fileId: u.id,\n          type: Type.verified,\n          fileName: u.name,\n          loading: this.state.loading,\n          shouldRenderDeleteButton: this.props.onDelete ? true : false,\n          deleteFile: this.onDelete,\n          onOpenFile: this.props.onOpenFile,\n          onRequestLink: this.props.onRequestLink,\n          deleteText: this.props.deleteText,\n          verifyDeleteText: this.props.verifyDeleteText,\n          confirmText: this.props.confirmText,\n          cancelText: this.props.cancelText,\n          confirmDelete: this.props.confirmDelete,\n          dontShowHardcodedText: this.props.dontShowHardcodedText,\n          confirmDeleteClassName: this.props.confirmDeleteClassName,\n          customClass: this.props.fileElementClassName\n        }));\n      }\n    }\n\n    if (rejectedFiles.length !== 0 || uploadedFiles.length !== 0) {\n      return React.createElement(\"ul\", {\n        className: styles.dropzone__files\n      }, rejectedFiles, uploadedFiles);\n    }\n  }\n\n  render() {\n    const wrapperClasses = classNames(styles.dropzone, 'mol_validation', this.props.wrapperClasses, {\n      'mol_validation--active': !this.state.isValid\n    });\n    return React.createElement(\"div\", {\n      className: wrapperClasses,\n      id: `${this.props.id}-wrapper`,\n      \"data-testid\": this.props.wrapperTestId\n    }, this.renderValidationErrorMessage(), this.renderLabel(), this.renderHelp(), this.renderSupportedFormats(), this.renderSpinner(), this.renderFiles(), this.renderUploadButton(), this.renderErrorMessage(), this.renderDropzone(), this.props.children);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}