{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _toConsumableArray = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _classCallCheck = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar extensions_1 = __importDefault(require(\"../constants/extensions\"));\n\nvar scoringItemType_1 = require(\"../constants/scoringItemType\");\n\nvar extension_1 = require(\"./extension\");\n\nvar fhirpathLoaderHelper_1 = __importDefault(require(\"./fhirpathLoaderHelper\"));\n\nvar scoring_1 = require(\"./scoring\");\n\nvar skjemautfyller_core_1 = require(\"./skjemautfyller-core\");\n\nvar fhirpath = require('fhirpath');\n\nvar CalculatedScores = /*#__PURE__*/function () {\n  function CalculatedScores() {\n    _classCallCheck(this, CalculatedScores);\n\n    this.totalScores = [];\n    this.sectionScores = [];\n    this.questionScores = [];\n  }\n\n  _createClass(CalculatedScores, [{\n    key: \"update\",\n    value: function update(subRetVal) {\n      var _this$totalScores, _this$sectionScores, _this$questionScores;\n\n      (_this$totalScores = this.totalScores).push.apply(_this$totalScores, _toConsumableArray(subRetVal.totalScores));\n\n      (_this$sectionScores = this.sectionScores).push.apply(_this$sectionScores, _toConsumableArray(subRetVal.sectionScores));\n\n      (_this$questionScores = this.questionScores).push.apply(_this$questionScores, _toConsumableArray(subRetVal.questionScores));\n    }\n  }, {\n    key: \"hasTotalScores\",\n    value: function hasTotalScores() {\n      return this.totalScores.length > 0;\n    }\n  }, {\n    key: \"hasSectionScores\",\n    value: function hasSectionScores() {\n      return this.sectionScores.length > 0;\n    }\n  }, {\n    key: \"hasQuestionScores\",\n    value: function hasQuestionScores() {\n      return this.questionScores.length > 0;\n    }\n  }]);\n\n  return CalculatedScores;\n}();\n\nvar ScoringCalculator = /*#__PURE__*/function () {\n  function ScoringCalculator(questionnaire) {\n    _classCallCheck(this, ScoringCalculator);\n\n    this.sectionScoreCache = {};\n    this.totalScoreCache = [];\n    this.itemCache = {};\n    this.updateQuestionnaire(questionnaire);\n  }\n\n  _createClass(ScoringCalculator, [{\n    key: \"updateQuestionnaire\",\n    value: function updateQuestionnaire(questionnaire) {\n      this.sectionScoreCache = {};\n      this.totalScoreCache = [];\n      this.itemCache = {};\n      this.totalScoreItem = undefined;\n      this.traverseQuestionnaire(questionnaire);\n    }\n  }, {\n    key: \"traverseQuestionnaire\",\n    value: function traverseQuestionnaire(qItem) {\n      var _newRetVal$questionSc;\n\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var retVal = new CalculatedScores();\n\n      if (qItem.item) {\n        var _iterator = _createForOfIteratorHelper(qItem.item),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var subItem = _step.value;\n            var subRetVal = this.traverseQuestionnaire(subItem, level + 1);\n            retVal.update(subRetVal);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      if (level === 0) {\n        this.totalScoreItem = scoring_1.createDummySectionScoreItem();\n\n        var _subRetVal = this.traverseQuestionnaire(this.totalScoreItem, level + 1);\n\n        retVal.update(_subRetVal);\n      }\n\n      if (retVal.hasTotalScores()) {\n        var _iterator2 = _createForOfIteratorHelper(retVal.totalScores),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var totalScore = _step2.value;\n            this.totalScoreCache.push(totalScore.linkId);\n            this.itemCache[totalScore.linkId] = totalScore;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      if (retVal.hasSectionScores()) {\n        var firstSectionScore = retVal.sectionScores.shift();\n        this.sectionScoreCache[firstSectionScore.linkId] = retVal.questionScores;\n        this.itemCache[firstSectionScore.linkId] = firstSectionScore;\n\n        var _iterator3 = _createForOfIteratorHelper(retVal.sectionScores),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var sectionScore = _step3.value;\n            this.sectionScoreCache[sectionScore.linkId] = [firstSectionScore];\n            this.itemCache[sectionScore.linkId] = sectionScore;\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        var _newRetVal = new CalculatedScores();\n\n        _newRetVal.questionScores.push(firstSectionScore);\n\n        return _newRetVal;\n      }\n\n      if (this.isOfTypeQuestionnaireItem(qItem)) {\n        var type = scoring_1.scoringItemType(qItem);\n\n        if (type === scoringItemType_1.ScoringItemType.SECTION_SCORE) {\n          var _newRetVal2 = new CalculatedScores();\n\n          _newRetVal2.sectionScores.push(qItem);\n\n          return _newRetVal2;\n        }\n\n        if (type === scoringItemType_1.ScoringItemType.TOTAL_SCORE) {\n          var _newRetVal3 = new CalculatedScores();\n\n          _newRetVal3.totalScores.push(qItem);\n\n          return _newRetVal3;\n        }\n\n        if (type === scoringItemType_1.ScoringItemType.QUESTION_SCORE || type === scoringItemType_1.ScoringItemType.QUESTION_FHIRPATH_SCORE) {\n          var _newRetVal4$questionS;\n\n          var _newRetVal4 = new CalculatedScores();\n\n          (_newRetVal4$questionS = _newRetVal4.questionScores).push.apply(_newRetVal4$questionS, [qItem].concat(_toConsumableArray(retVal.questionScores)));\n\n          if (type === scoringItemType_1.ScoringItemType.QUESTION_FHIRPATH_SCORE) {\n            this.itemCache[qItem.linkId] = qItem;\n          }\n\n          return _newRetVal4;\n        }\n      }\n\n      var newRetVal = new CalculatedScores();\n\n      (_newRetVal$questionSc = newRetVal.questionScores).push.apply(_newRetVal$questionSc, _toConsumableArray(retVal.questionScores));\n\n      return newRetVal;\n    }\n  }, {\n    key: \"isOfTypeQuestionnaireItem\",\n    value: function isOfTypeQuestionnaireItem(item) {\n      return item.type !== undefined;\n    }\n  }, {\n    key: \"calculate\",\n    value: function calculate(questionnaireResponse) {\n      var answerPad = {};\n\n      for (var sectionScoreLinkId in this.sectionScoreCache) {\n        answerPad[sectionScoreLinkId] = this.calculateSectionScore(sectionScoreLinkId, questionnaireResponse, answerPad);\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(this.totalScoreCache),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var totalScoreLinkId = _step4.value;\n          answerPad[totalScoreLinkId] = this.calculateSectionScore(this.totalScoreItem.linkId, questionnaireResponse, answerPad);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      delete answerPad[this.totalScoreItem.linkId];\n      return answerPad;\n    }\n  }, {\n    key: \"calculateSectionScore\",\n    value: function calculateSectionScore(linkId, questionnaireResponse, answerPad) {\n      var sum = 0;\n      var hasCalculatedAtLeastOneAnswer = false;\n      var dependencies = this.sectionScoreCache[linkId];\n\n      var _iterator5 = _createForOfIteratorHelper(dependencies),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var item = _step5.value;\n          var result = this.valueOf(item, questionnaireResponse, answerPad);\n\n          if (result !== undefined) {\n            sum += result;\n            hasCalculatedAtLeastOneAnswer = true;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return hasCalculatedAtLeastOneAnswer ? sum : undefined;\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf(item, questionnaireResponse, answerPad) {\n      var scoringType = scoring_1.scoringItemType(item);\n\n      switch (scoringType) {\n        case scoringItemType_1.ScoringItemType.SECTION_SCORE:\n          return this.valueOfSectionScoreItem(item, questionnaireResponse, answerPad);\n\n        case scoringItemType_1.ScoringItemType.QUESTION_SCORE:\n          return this.valueOfQuestionScoreItem(item, questionnaireResponse);\n\n        case scoringItemType_1.ScoringItemType.QUESTION_FHIRPATH_SCORE:\n          return this.valueOfQuestionFhirpathScoreItem(item, questionnaireResponse, answerPad);\n\n        default:\n          return;\n      }\n    }\n  }, {\n    key: \"valueOfQuestionFhirpathScoreItem\",\n    value: function valueOfQuestionFhirpathScoreItem(item, questionnaireResponse, answerPad) {\n      var _a;\n\n      var expressionExtension = extension_1.getCalculatedExpressionExtension(item);\n      var value = undefined;\n\n      if (expressionExtension) {\n        var result = fhirpath.evaluate(questionnaireResponse, expressionExtension.valueString, null, fhirpathLoaderHelper_1.default);\n\n        if (result.length) {\n          value = (_a = result[0]) !== null && _a !== void 0 ? _a : 0;\n\n          if (isNaN(value) || !isFinite(value)) {\n            value = undefined;\n          }\n        }\n      }\n\n      answerPad[item.linkId] = value;\n      return value;\n    }\n  }, {\n    key: \"valueOfQuestionScoreItem\",\n    value: function valueOfQuestionScoreItem(item, questionnaireResponse) {\n      var sum = 0;\n      var hasCalculatedAtLeastOneAnswer = false;\n      var qrItems = skjemautfyller_core_1.getQuestionnaireResponseItemsWithLinkId(item.linkId, questionnaireResponse.item || [], true);\n\n      var _iterator6 = _createForOfIteratorHelper(qrItems),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var qrItem = _step6.value;\n          if (!qrItem.answer) continue;\n\n          var _iterator7 = _createForOfIteratorHelper(qrItem.answer),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var answer = _step7.value;\n              var option = this.getAnswerMatch(answer, item);\n\n              if (option) {\n                sum += this.getOptionScore(option);\n                hasCalculatedAtLeastOneAnswer = true;\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return hasCalculatedAtLeastOneAnswer ? sum : undefined;\n    }\n  }, {\n    key: \"valueOfSectionScoreItem\",\n    value: function valueOfSectionScoreItem(item, questionnaireResponse, answerPad) {\n      if (item.linkId in answerPad) {\n        return answerPad[item.linkId];\n      }\n\n      return this.calculateSectionScore(item.linkId, questionnaireResponse, answerPad);\n    }\n  }, {\n    key: \"getOptionScore\",\n    value: function getOptionScore(option) {\n      var extension = extension_1.getExtension(extensions_1.default.ORDINAL_VALUE, option.valueCoding);\n\n      if (extension === null || extension === void 0 ? void 0 : extension.valueDecimal) {\n        return extension === null || extension === void 0 ? void 0 : extension.valueDecimal;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"getAnswerMatch\",\n    value: function getAnswerMatch(answer, item) {\n      if (answer.valueCoding) {\n        if (item.answerOption) {\n          var _iterator8 = _createForOfIteratorHelper(item.answerOption),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var o = _step8.value;\n\n              if (o.valueCoding.code === answer.valueCoding.code && o.valueCoding.system === answer.valueCoding.system) {\n                return o;\n              }\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n        }\n      }\n\n      return;\n    }\n  }, {\n    key: \"getCachedTotalOrSectionItem\",\n    value: function getCachedTotalOrSectionItem(linkId) {\n      return this.itemCache[linkId];\n    }\n  }]);\n\n  return ScoringCalculator;\n}();\n\nexports.ScoringCalculator = ScoringCalculator;","map":null,"metadata":{},"sourceType":"script"}