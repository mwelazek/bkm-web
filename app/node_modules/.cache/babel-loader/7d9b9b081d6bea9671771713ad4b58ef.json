{"ast":null,"code":"import * as React from 'react';\nimport useForceUpdate from '../_util/hooks/useForceUpdate';\nimport { cloneElement } from '../_util/reactNode';\nimport Statistic from './Statistic';\nimport { formatCountdown } from './utils';\nconst REFRESH_INTERVAL = 1000 / 30;\n\nfunction getTime(value) {\n  return new Date(value).getTime();\n}\n\nconst Countdown = props => {\n  const {\n    value,\n    format = 'HH:mm:ss',\n    onChange,\n    onFinish\n  } = props;\n  const forceUpdate = useForceUpdate();\n  const countdown = React.useRef(null);\n\n  const stopTimer = () => {\n    onFinish === null || onFinish === void 0 ? void 0 : onFinish();\n\n    if (countdown.current) {\n      clearInterval(countdown.current);\n      countdown.current = null;\n    }\n  };\n\n  const syncTimer = () => {\n    const timestamp = getTime(value);\n\n    if (timestamp >= Date.now()) {\n      countdown.current = setInterval(() => {\n        forceUpdate();\n        onChange === null || onChange === void 0 ? void 0 : onChange(timestamp - Date.now());\n\n        if (timestamp < Date.now()) {\n          stopTimer();\n        }\n      }, REFRESH_INTERVAL);\n    }\n  };\n\n  React.useEffect(() => {\n    syncTimer();\n    return () => {\n      if (countdown.current) {\n        clearInterval(countdown.current);\n        countdown.current = null;\n      }\n    };\n  }, [value]);\n\n  const formatter = (formatValue, config) => formatCountdown(formatValue, Object.assign(Object.assign({}, config), {\n    format\n  }));\n\n  const valueRender = node => cloneElement(node, {\n    title: undefined\n  });\n\n  return /*#__PURE__*/React.createElement(Statistic, Object.assign({}, props, {\n    valueRender: valueRender,\n    formatter: formatter\n  }));\n};\n\nexport default /*#__PURE__*/React.memo(Countdown);","map":null,"metadata":{},"sourceType":"module"}