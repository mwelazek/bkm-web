{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HealthCareForm = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _antd = require(\"antd\");\n\nvar _constants = require(\"../../constants\");\n\nvar _notifications = require(\"@opensrp/notifications\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar _reactRouter = require(\"react-router\");\n\nvar _utils = require(\"./utils\");\n\nvar _mls = require(\"../../mls\");\n\nvar FormItem = _antd.Form.Item;\nvar defaultProps = {\n  initialValues: {},\n  disabled: []\n};\n\nvar HealthCareForm = function HealthCareForm(props) {\n  var fhirBaseUrl = props.fhirBaseUrl,\n      initialValues = props.initialValues,\n      disabled = props.disabled,\n      cancelUrl = props.cancelUrl,\n      successUrl = props.successUrl,\n      organizations = props.organizations;\n  var queryClient = (0, _reactQuery.useQueryClient)();\n  var history = (0, _reactRouter.useHistory)();\n\n  var _useTranslation = (0, _mls.useTranslation)(),\n      t = _useTranslation.t;\n\n  var goTo = function goTo() {\n    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#';\n    return history.push(url);\n  };\n\n  var _useMutation = (0, _reactQuery.useMutation)(function (values) {\n    var payload = (0, _utils.generateHealthCarePayload)(values, organizations, initialValues);\n    return (0, _utils.postPutHealthCareService)(fhirBaseUrl, payload);\n  }, {\n    onError: function onError(err) {\n      (0, _notifications.sendErrorNotification)(err.message);\n    },\n    onSuccess: function onSuccess() {\n      (0, _notifications.sendSuccessNotification)(t('Health care service updated successfully'));\n      queryClient.invalidateQueries([_constants.healthCareServiceResourceType])[\"catch\"](function () {\n        (0, _notifications.sendInfoNotification)(t('Failed to refresh data, please refresh the page'));\n      });\n      goTo(successUrl);\n    }\n  }),\n      mutate = _useMutation.mutate,\n      isLoading = _useMutation.isLoading;\n\n  var statusOptions = [{\n    label: t('Inactive'),\n    value: false\n  }, {\n    label: t('active'),\n    value: true\n  }];\n  var orgOptions = (0, _utils.getOrgSelectOptions)(organizations);\n  var validationRules = (0, _utils.validationRulesFactory)(t);\n  return _react[\"default\"].createElement(_antd.Form, (0, _extends2[\"default\"])({\n    requiredMark: false\n  }, _reactUtils.formItemLayout, {\n    onFinish: function onFinish(values) {\n      mutate(values);\n    },\n    initialValues: initialValues\n  }), _react[\"default\"].createElement(FormItem, {\n    hidden: true,\n    id: \"id\",\n    name: _constants.id,\n    label: t('Id')\n  }, _react[\"default\"].createElement(_antd.Input, {\n    disabled: true\n  })), _react[\"default\"].createElement(FormItem, {\n    hidden: true,\n    id: \"identifier\",\n    name: _constants.identifier,\n    label: t('Identifier')\n  }, _react[\"default\"].createElement(_antd.Input, {\n    disabled: true\n  })), _react[\"default\"].createElement(FormItem, {\n    id: \"name\",\n    name: _constants.name,\n    rules: validationRules.name,\n    label: t('Name')\n  }, _react[\"default\"].createElement(_antd.Input, {\n    disabled: disabled.includes(_constants.name),\n    placeholder: t('Name')\n  })), _react[\"default\"].createElement(FormItem, {\n    id: \"active\",\n    rules: validationRules.active,\n    name: _constants.active,\n    label: t('Status')\n  }, _react[\"default\"].createElement(_antd.Radio.Group, {\n    disabled: disabled.includes(_constants.active),\n    options: statusOptions\n  })), _react[\"default\"].createElement(FormItem, {\n    id: \"comment\",\n    rules: validationRules.comment,\n    name: _constants.comment,\n    label: t('Comment')\n  }, _react[\"default\"].createElement(_antd.Input.TextArea, {\n    disabled: disabled.includes(_constants.comment),\n    rows: 2,\n    placeholder: t('Enter comment')\n  })), _react[\"default\"].createElement(FormItem, {\n    id: \"extraDetails\",\n    rules: validationRules.extraDetails,\n    name: _constants.extraDetails,\n    label: t('Extra details')\n  }, _react[\"default\"].createElement(_antd.Input.TextArea, {\n    disabled: disabled.includes(_constants.extraDetails),\n    rows: 4,\n    placeholder: t('Enter extra details')\n  })), _react[\"default\"].createElement(FormItem, {\n    id: \"providedBy\",\n    name: _constants.providedBy,\n    rules: validationRules.providedBy,\n    label: t('Provided by')\n  }, _react[\"default\"].createElement(_antd.Select, {\n    disabled: disabled.includes(_constants.providedBy),\n    placeholder: t('Select organization'),\n    options: orgOptions,\n    showSearch: true,\n    filterOption: _utils.orgFilterFunction\n  })), _react[\"default\"].createElement(FormItem, _reactUtils.tailLayout, _react[\"default\"].createElement(_antd.Space, null, _react[\"default\"].createElement(_antd.Button, {\n    type: \"primary\",\n    id: \"submit-button\",\n    disabled: isLoading,\n    htmlType: \"submit\"\n  }, isLoading ? t('Saving') : t('save')), _react[\"default\"].createElement(_antd.Button, {\n    id: \"cancel-button\",\n    onClick: function onClick() {\n      goTo(cancelUrl);\n    }\n  }, t('Cancel')))));\n};\n\nexports.HealthCareForm = HealthCareForm;\nHealthCareForm.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"script"}