{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrganizationForm = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _antd = require(\"antd\");\n\nvar _constants = require(\"../../constants\");\n\nvar _reactQuery = require(\"react-query\");\n\nvar _mls = require(\"../../mls\");\n\nvar _utils = require(\"../../utils\");\n\nvar _notifications = require(\"@opensrp/notifications\");\n\nvar _reactRouter = require(\"react-router\");\n\nvar _utils2 = require(\"./utils\");\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar FormItem = _antd.Form.Item;\nvar defaultProps = {\n  initialValues: {},\n  disabled: []\n};\n\nvar OrganizationForm = function OrganizationForm(props) {\n  var fhirBaseUrl = props.fhirBaseUrl,\n      initialValues = props.initialValues,\n      disabled = props.disabled,\n      cancelUrl = props.cancelUrl,\n      successUrl = props.successUrl,\n      practitioners = props.practitioners,\n      existingPractitionerRoles = props.existingPractitionerRoles,\n      allPractitionerRoles = props.allPractitionerRoles,\n      configuredPractAssignmentStrategy = props.configuredPractAssignmentStrategy;\n  var queryClient = (0, _reactQuery.useQueryClient)();\n  var history = (0, _reactRouter.useHistory)();\n\n  var _useTranslation = (0, _mls.useTranslation)(),\n      t = _useTranslation.t;\n\n  var goTo = function goTo() {\n    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#';\n    return history.push(url);\n  };\n\n  var _useMutation = (0, _reactQuery.useMutation)(function (values) {\n    var payload = (0, _utils2.generateOrgPayload)(values);\n    return (0, _utils.postPutOrganization)(fhirBaseUrl, payload).then(function (organization) {\n      (0, _notifications.sendSuccessNotification)(t('Organization updated successfully'));\n      return (0, _utils.updatePractitionerRoles)(fhirBaseUrl, values, initialValues, organization, practitioners, existingPractitionerRoles).then(function () {\n        return queryClient.invalidateQueries([_constants.practitionerResourceType, _constants.organizationResourceType, organization.id]);\n      }).then(function () {\n        (0, _notifications.sendSuccessNotification)(t('Practitioner assignments updated successfully'));\n      });\n    });\n  }, {\n    onError: function onError() {\n      (0, _notifications.sendErrorNotification)(t('There was a problem updating organization'));\n    },\n    onSuccess: function onSuccess() {\n      queryClient.invalidateQueries([_constants.organizationResourceType])[\"catch\"](function () {\n        (0, _notifications.sendInfoNotification)(t('Failed to refresh data, please refresh the page'));\n      });\n      goTo(successUrl);\n    }\n  }),\n      mutate = _useMutation.mutate,\n      isLoading = _useMutation.isLoading;\n\n  var statusOptions = [{\n    label: t('active'),\n    value: true\n  }, {\n    label: t('Inactive'),\n    value: false\n  }];\n  var practitionersSelectOptions = (0, _utils2.getPractitionerOptions)(practitioners, existingPractitionerRoles, allPractitionerRoles, configuredPractAssignmentStrategy);\n  var validationRules = (0, _utils2.validationRulesFactory)(t);\n  return _react[\"default\"].createElement(_antd.Form, (0, _extends2[\"default\"])({}, _reactUtils.formItemLayout, {\n    onFinish: function onFinish(values) {\n      mutate(values);\n    },\n    initialValues: initialValues\n  }), _react[\"default\"].createElement(FormItem, {\n    name: _constants.id,\n    label: t('Id'),\n    id: \"id\",\n    hidden: true\n  }, _react[\"default\"].createElement(_antd.Input, null)), _react[\"default\"].createElement(FormItem, {\n    name: _constants.identifier,\n    label: t('Identifier'),\n    id: \"identifier\",\n    hidden: true\n  }, _react[\"default\"].createElement(_antd.Input, null)), _react[\"default\"].createElement(FormItem, {\n    name: _constants.name,\n    rules: validationRules.name,\n    id: \"name\",\n    label: t('Name')\n  }, _react[\"default\"].createElement(_antd.Input, {\n    placeholder: t('Enter team name')\n  })), _react[\"default\"].createElement(FormItem, {\n    name: _constants.alias,\n    rules: validationRules.alias,\n    id: \"alias\",\n    label: t('Alias')\n  }, _react[\"default\"].createElement(_antd.Input, {\n    placeholder: t('Enter team alias')\n  })), _react[\"default\"].createElement(FormItem, {\n    id: \"status\",\n    name: _constants.active,\n    label: \"Status\",\n    rules: validationRules.status\n  }, _react[\"default\"].createElement(_antd.Radio.Group, {\n    disabled: disabled.includes(_constants.active),\n    options: statusOptions\n  })), _react[\"default\"].createElement(FormItem, {\n    hidden: true,\n    id: \"type\",\n    name: _constants.type,\n    label: \"Type\",\n    rules: validationRules.type\n  }, _react[\"default\"].createElement(_antd.Select, {\n    disabled: disabled.includes(_constants.type),\n    options: (0, _utils2.getOrgTypeSelectOptions)()\n  })), _react[\"default\"].createElement(FormItem, {\n    id: \"members\",\n    name: _constants.members,\n    label: t('Practitioners'),\n    rules: validationRules.members\n  }, _react[\"default\"].createElement(_antd.Select, {\n    allowClear: true,\n    mode: \"multiple\",\n    optionFilterProp: \"label\",\n    placeholder: t('Select user (practitioners only)'),\n    options: practitionersSelectOptions,\n    filterOption: _utils.practitionersFilterFunction\n  })), _react[\"default\"].createElement(FormItem, _reactUtils.tailLayout, _react[\"default\"].createElement(_antd.Space, null, _react[\"default\"].createElement(_antd.Button, {\n    type: \"primary\",\n    id: \"submit-button\",\n    disabled: isLoading,\n    htmlType: \"submit\"\n  }, isLoading ? t('Saving') : t('save')), _react[\"default\"].createElement(_antd.Button, {\n    id: \"cancel-button\",\n    onClick: function onClick() {\n      goTo(cancelUrl);\n    }\n  }, t('Cancel')))));\n};\n\nexports.OrganizationForm = OrganizationForm;\nOrganizationForm.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"script"}