{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport FormSubmitButton from './form-buttons/form-submit-button';\nimport FormCancelButton from './form-buttons/form-cancel-button';\nimport FormPauseButton from './form-buttons/form-pause-button';\nimport FormDraftButton from './form-buttons/form-draft-button';\nimport { Spinner } from '../../atoms/spinner';\nimport { ValidationSummaryPlacement } from './validationSummaryPlacement';\nimport ValidationSummary from './validation-summary';\nimport ValidationError from './validation-error';\nimport toolkitstyles from './styles.module.scss';\nimport './styles.scss';\nexport default class Form extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.areAllFieldsValid = () => {\n      for (let i = 0; i < this.state.formComponents.length; i++) {\n        const child = this.state.formComponents[i];\n        const childToValidate = child && child.getWrappedInstance ? child.getWrappedInstance() : child;\n\n        if (childToValidate && childToValidate.props && childToValidate.props.isValid && !childToValidate.props.isValid()) {\n          return false;\n        } else if (childToValidate && childToValidate.isValid && !childToValidate.isValid()) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.onFormSubmit = cb => {\n      this.setState({\n        submitted: true\n      }, () => {\n        this.validateForm(() => {\n          if (this.areAllFieldsValid()) {\n            cb();\n          } else {\n            this.setState({\n              valid: false\n            });\n\n            if (this.props.validationSummary && this.props.validationSummary.enable && this.validationSummaryRef.current) {\n              this.validationSummaryRef.current.scrollIntoView();\n              this.validationSummaryRef.current.focus();\n            }\n          }\n        });\n      });\n    };\n\n    this.onChildValidated = () => {\n      if (this.state.submitted) {\n        this.setState({\n          valid: this.areAllFieldsValid()\n        });\n      }\n    };\n\n    this.isSubmitted = () => {\n      return this.state.submitted;\n    };\n\n    this.renderSpinner = () => {\n      if (this.props.disabled) {\n        return React.createElement(Spinner, {\n          local: true\n        });\n      }\n    };\n\n    this.addFormComponent = comp => {\n      this.setState(_ref => {\n        let {\n          formComponents\n        } = _ref;\n        formComponents.push(comp);\n        return {\n          formComponents\n        };\n      });\n    };\n\n    this.removeFormComponent = comp => {\n      this.setState(_ref2 => {\n        let {\n          formComponents\n        } = _ref2;\n        const index = formComponents.indexOf(comp);\n        formComponents.splice(index, 1);\n        return {\n          formComponents\n        };\n      }, () => {\n        if (!this.state.valid && comp.isValid && !comp.isValid()) {\n          this.onChildValidated();\n        }\n      });\n    };\n\n    this.renderValidationSummary = () => {\n      if (this.props.validationSummary && this.props.validationSummary.enable) {\n        return React.createElement(\"div\", {\n          className: \"mol_validation-summary_wrapper\",\n          ref: this.validationSummaryRef,\n          tabIndex: -1,\n          \"aria-atomic\": \"true\"\n        }, React.createElement(ValidationSummary, {\n          header: this.props.validationSummary.header,\n          components: this.state.formComponents,\n          submitted: this.state.submitted\n        }));\n      }\n    };\n\n    this.renderChildren = () => {\n      const {\n        children\n      } = this.props;\n\n      if (!children) {\n        return null;\n      }\n\n      const childrenWithProp = React.Children.map(children, child => {\n        if (child) {\n          const childPreviousProps = typeof child.type === 'function' && child.props && child.props.children && child.props.children.props ? child.props.children.props : undefined;\n          const childProps = {\n            addFormComponent: this.addFormComponent,\n            removeFormComponent: this.removeFormComponent,\n            onValidated: this.onChildValidated,\n            optionalLabel: this.props.allowChildPropOverride && childPreviousProps && childPreviousProps.optionalLabel ? childPreviousProps.optionalLabel : this.props.optionalLabel,\n            requiredLabel: this.props.allowChildPropOverride && childPreviousProps && childPreviousProps.requiredLabel ? childPreviousProps.requiredLabel : this.props.requiredLabel,\n            isSubmitted: this.isSubmitted,\n            showOptionalLabel: this.props.allowChildPropOverride && childPreviousProps && childPreviousProps.showOptionalLabel ? childPreviousProps.showOptionalLabel : this.props.showOptionalLabel ? this.props.showOptionalLabel : true,\n            showRequiredLabel: this.props.showRequiredLabel && childPreviousProps && childPreviousProps.showRequiredLabel ? childPreviousProps.showRequiredLabel : this.props.showRequiredLabel ? this.props.showRequiredLabel : false\n          };\n          return React.cloneElement(child, typeof child.type === 'function' || typeof child.type === 'object' ? childProps : {});\n        }\n      });\n      return childrenWithProp;\n    };\n\n    this.state = {\n      valid: true,\n      submitted: false,\n      formComponents: []\n    };\n    this.validationSummaryRef = React.createRef();\n  }\n\n  validateForm(cb) {\n    const promises = [];\n    this.state.formComponents.forEach(child => {\n      const childToValidate = child && child.getWrappedInstance ? child.getWrappedInstance() : child;\n\n      if (childToValidate && childToValidate.props && childToValidate.props.validateField) {\n        promises.push(childToValidate.props.validateField());\n      } else if (childToValidate && childToValidate.validateField) {\n        const returnedPromise = childToValidate.validateField();\n        promises.push(returnedPromise);\n      }\n    });\n\n    if (this.props.submitValidator) {\n      promises.push(this.props.submitValidator());\n    }\n\n    Promise.all(promises).then(cb);\n  }\n\n  renderErrorMessage() {\n    let isValid = true;\n\n    if (!this.state.valid && this.state.submitted) {\n      isValid = false;\n    }\n\n    return React.createElement(ValidationError, {\n      isValid: isValid,\n      error: this.props.errorMessage ? this.props.errorMessage : '',\n      className: \"mol_form__formerror\",\n      textClassName: \"mol_validation__formerrortext\",\n      testId: this.props.validationTestId\n    });\n  }\n\n  renderButtons() {\n    const submitButton = React.createElement(FormSubmitButton, {\n      submitButtonText: this.props.submitButtonText,\n      submitButtonClasses: this.props.submitButtonClasses,\n      submitButtonLeftIcon: this.props.submitButtonLeftIcon,\n      submitButtonRightIcon: this.props.submitButtonRightIcon,\n      submitButtonType: this.props.submitButtonType,\n      submitButtonDisabled: this.props.submitButtonDisabled,\n      saving: this.props.saving,\n      saved: this.props.saved,\n      saveText: this.props.saveText,\n      savedText: this.props.savedText,\n      saveButtonOnClick: this.props.saveButtonOnClick,\n      onFormSubmit: this.onFormSubmit,\n      onSubmit: this.props.onSubmit,\n      saveButtonTestId: this.props.saveButtonTestId,\n      submitButtonTestId: this.props.submitButtonTestId\n    });\n    const cancelButton = React.createElement(FormCancelButton, {\n      cancelButtonText: this.props.cancelButtonText,\n      cancelButtonClasses: this.props.cancelButtonClasses,\n      cancelButtonLeft: this.props.cancelButtonLeft,\n      cancelButtonRight: this.props.cancelButtonRight,\n      cancelButtonType: this.props.cancelButtonType,\n      cancelButtonLeftIcon: this.props.cancelButtonLeftIcon,\n      cancelButtonRightIcon: this.props.cancelButtonRightIcon,\n      cancelButtonDisabled: this.props.cancelButtonDisabled,\n      onCancel: this.props.onCancel,\n      cancelButtonTestId: this.props.cancelButtonTestId\n    });\n    const pauseButton = React.createElement(FormPauseButton, {\n      pauseButtonText: this.props.pauseButtonText,\n      pauseButtonClasses: this.props.pauseButtonClasses,\n      pauseButtonType: this.props.pauseButtonType,\n      pauseButtonLevel: this.props.pauseButtonLevel,\n      pauseButtonLeftIcon: this.props.pauseButtonLeftIcon,\n      pauseButtonDisabled: this.props.pauseButtonDisabled,\n      onPause: this.props.onPause,\n      pauseButtonTestId: this.props.pauseButtonTestId\n    });\n    const draftButton = React.createElement(FormDraftButton, {\n      draftButtonText: this.props.draftButtonText,\n      draftButtonClasses: this.props.draftButtonClasses,\n      onFormSubmit: this.onFormSubmit,\n      onDraft: this.props.onDraft,\n      draftButtonTestId: this.props.draftButtonTestId\n    });\n\n    if (!submitButton && !cancelButton && !pauseButton && !draftButton) {\n      return null;\n    }\n\n    if (this.props.cancelButtonLeft) {\n      return React.createElement(\"div\", null, cancelButton, submitButton, draftButton, pauseButton);\n    }\n\n    if (this.props.cancelButtonRight) {\n      return React.createElement(\"div\", null, submitButton, draftButton, pauseButton, cancelButton);\n    }\n\n    return React.createElement(\"div\", null, submitButton, draftButton, cancelButton, pauseButton);\n  }\n\n  render() {\n    const formClasses = classNames('mol_form', this.props.className);\n    const contentClasses = classNames('mol_form--content', this.props.contentClasses);\n    const validationSummaryPlacement = this.props.validationSummaryPlacement || ValidationSummaryPlacement.Top;\n    return React.createElement(\"form\", {\n      method: \"post\",\n      action: this.props.action,\n      onSubmit: e => {\n        if (this.props.triggerPreventDefaultOnSubmit) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n\n        this.onFormSubmit(() => {\n          if (this.props.onSubmit) {\n            this.props.onSubmit(e);\n          }\n        });\n      },\n      className: formClasses\n    }, validationSummaryPlacement === ValidationSummaryPlacement.Top && this.renderValidationSummary(), React.createElement(\"div\", {\n      className: contentClasses\n    }, this.renderChildren()), validationSummaryPlacement === ValidationSummaryPlacement.Bottom && this.renderValidationSummary(), React.createElement(\"div\", {\n      className: `${toolkitstyles.form__buttonwrapper} ${this.props.buttonClasses}`\n    }, this.renderErrorMessage(), this.renderButtons(), this.renderSpinner()));\n  }\n\n}\nForm.defaultProps = {\n  action: '#',\n  submitButtonType: 'action',\n  cancelButtonType: 'action',\n  pauseButtonType: 'action',\n  pauseButtonLevel: 'tertiary'\n};","map":null,"metadata":{},"sourceType":"module"}