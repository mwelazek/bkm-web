{"ast":null,"code":"/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nvar Token = require('./../Token').Token;\n\nvar ATN = require('./ATN').ATN;\n\nvar ATNType = require('./ATNType').ATNType;\n\nvar ATNStates = require('./ATNState');\n\nvar ATNState = ATNStates.ATNState;\nvar BasicState = ATNStates.BasicState;\nvar DecisionState = ATNStates.DecisionState;\nvar BlockStartState = ATNStates.BlockStartState;\nvar BlockEndState = ATNStates.BlockEndState;\nvar LoopEndState = ATNStates.LoopEndState;\nvar RuleStartState = ATNStates.RuleStartState;\nvar RuleStopState = ATNStates.RuleStopState;\nvar TokensStartState = ATNStates.TokensStartState;\nvar PlusLoopbackState = ATNStates.PlusLoopbackState;\nvar StarLoopbackState = ATNStates.StarLoopbackState;\nvar StarLoopEntryState = ATNStates.StarLoopEntryState;\nvar PlusBlockStartState = ATNStates.PlusBlockStartState;\nvar StarBlockStartState = ATNStates.StarBlockStartState;\nvar BasicBlockStartState = ATNStates.BasicBlockStartState;\n\nvar Transitions = require('./Transition');\n\nvar Transition = Transitions.Transition;\nvar AtomTransition = Transitions.AtomTransition;\nvar SetTransition = Transitions.SetTransition;\nvar NotSetTransition = Transitions.NotSetTransition;\nvar RuleTransition = Transitions.RuleTransition;\nvar RangeTransition = Transitions.RangeTransition;\nvar ActionTransition = Transitions.ActionTransition;\nvar EpsilonTransition = Transitions.EpsilonTransition;\nvar WildcardTransition = Transitions.WildcardTransition;\nvar PredicateTransition = Transitions.PredicateTransition;\nvar PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;\n\nvar IntervalSet = require('./../IntervalSet').IntervalSet;\n\nvar Interval = require('./../IntervalSet').Interval;\n\nvar ATNDeserializationOptions = require('./ATNDeserializationOptions').ATNDeserializationOptions;\n\nvar LexerActions = require('./LexerAction');\n\nvar LexerActionType = LexerActions.LexerActionType;\nvar LexerSkipAction = LexerActions.LexerSkipAction;\nvar LexerChannelAction = LexerActions.LexerChannelAction;\nvar LexerCustomAction = LexerActions.LexerCustomAction;\nvar LexerMoreAction = LexerActions.LexerMoreAction;\nvar LexerTypeAction = LexerActions.LexerTypeAction;\nvar LexerPushModeAction = LexerActions.LexerPushModeAction;\nvar LexerPopModeAction = LexerActions.LexerPopModeAction;\nvar LexerModeAction = LexerActions.LexerModeAction; // This is the earliest supported serialized UUID.\n// stick to serialized version for now, we don't need a UUID instance\n\nvar BASE_SERIALIZED_UUID = \"AADB8D7E-AEEF-4415-AD2B-8204D6CF042E\"; //\n// This UUID indicates the serialized ATN contains two sets of\n// IntervalSets, where the second set's values are encoded as\n// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.\n//\n\nvar ADDED_UNICODE_SMP = \"59627784-3BE5-417A-B9EB-8131A7286089\"; // This list contains all of the currently supported UUIDs, ordered by when\n// the feature first appeared in this branch.\n\nvar SUPPORTED_UUIDS = [BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP];\nvar SERIALIZED_VERSION = 3; // This is the current serialized UUID.\n\nvar SERIALIZED_UUID = ADDED_UNICODE_SMP;\n\nfunction initArray(length, value) {\n  var tmp = [];\n  tmp[length - 1] = value;\n  return tmp.map(function (i) {\n    return value;\n  });\n}\n\nfunction ATNDeserializer(options) {\n  if (options === undefined || options === null) {\n    options = ATNDeserializationOptions.defaultOptions;\n  }\n\n  this.deserializationOptions = options;\n  this.stateFactories = null;\n  this.actionFactories = null;\n  return this;\n} // Determines if a particular serialized representation of an ATN supports\n// a particular feature, identified by the {@link UUID} used for serializing\n// the ATN at the time the feature was first introduced.\n//\n// @param feature The {@link UUID} marking the first time the feature was\n// supported in the serialized ATN.\n// @param actualUuid The {@link UUID} of the actual serialized ATN which is\n// currently being deserialized.\n// @return {@code true} if the {@code actualUuid} value represents a\n// serialized ATN at or after the feature identified by {@code feature} was\n// introduced; otherwise, {@code false}.\n\n\nATNDeserializer.prototype.isFeatureSupported = function (feature, actualUuid) {\n  var idx1 = SUPPORTED_UUIDS.indexOf(feature);\n\n  if (idx1 < 0) {\n    return false;\n  }\n\n  var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);\n  return idx2 >= idx1;\n};\n\nATNDeserializer.prototype.deserialize = function (data) {\n  this.reset(data);\n  this.checkVersion();\n  this.checkUUID();\n  var atn = this.readATN();\n  this.readStates(atn);\n  this.readRules(atn);\n  this.readModes(atn);\n  var sets = []; // First, deserialize sets with 16-bit arguments <= U+FFFF.\n\n  this.readSets(atn, sets, this.readInt.bind(this)); // Next, if the ATN was serialized with the Unicode SMP feature,\n  // deserialize sets with 32-bit arguments <= U+10FFFF.\n\n  if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {\n    this.readSets(atn, sets, this.readInt32.bind(this));\n  }\n\n  this.readEdges(atn, sets);\n  this.readDecisions(atn);\n  this.readLexerActions(atn);\n  this.markPrecedenceDecisions(atn);\n  this.verifyATN(atn);\n\n  if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER) {\n    this.generateRuleBypassTransitions(atn); // re-verify after modification\n\n    this.verifyATN(atn);\n  }\n\n  return atn;\n};\n\nATNDeserializer.prototype.reset = function (data) {\n  var adjust = function (c) {\n    var v = c.charCodeAt(0);\n    return v > 1 ? v - 2 : v + 65534;\n  };\n\n  var temp = data.split(\"\").map(adjust); // don't adjust the first value since that's the version number\n\n  temp[0] = data.charCodeAt(0);\n  this.data = temp;\n  this.pos = 0;\n};\n\nATNDeserializer.prototype.checkVersion = function () {\n  var version = this.readInt();\n\n  if (version !== SERIALIZED_VERSION) {\n    throw \"Could not deserialize ATN with version \" + version + \" (expected \" + SERIALIZED_VERSION + \").\";\n  }\n};\n\nATNDeserializer.prototype.checkUUID = function () {\n  var uuid = this.readUUID();\n\n  if (SUPPORTED_UUIDS.indexOf(uuid) < 0) {\n    throw \"Could not deserialize ATN with UUID: \" + uuid + \" (expected \" + SERIALIZED_UUID + \" or a legacy UUID).\", uuid, SERIALIZED_UUID;\n  }\n\n  this.uuid = uuid;\n};\n\nATNDeserializer.prototype.readATN = function () {\n  var grammarType = this.readInt();\n  var maxTokenType = this.readInt();\n  return new ATN(grammarType, maxTokenType);\n};\n\nATNDeserializer.prototype.readStates = function (atn) {\n  var j, pair, stateNumber;\n  var loopBackStateNumbers = [];\n  var endStateNumbers = [];\n  var nstates = this.readInt();\n\n  for (var i = 0; i < nstates; i++) {\n    var stype = this.readInt(); // ignore bad type of states\n\n    if (stype === ATNState.INVALID_TYPE) {\n      atn.addState(null);\n      continue;\n    }\n\n    var ruleIndex = this.readInt();\n\n    if (ruleIndex === 0xFFFF) {\n      ruleIndex = -1;\n    }\n\n    var s = this.stateFactory(stype, ruleIndex);\n\n    if (stype === ATNState.LOOP_END) {\n      // special case\n      var loopBackStateNumber = this.readInt();\n      loopBackStateNumbers.push([s, loopBackStateNumber]);\n    } else if (s instanceof BlockStartState) {\n      var endStateNumber = this.readInt();\n      endStateNumbers.push([s, endStateNumber]);\n    }\n\n    atn.addState(s);\n  } // delay the assignment of loop back and end states until we know all the\n  // state instances have been initialized\n\n\n  for (j = 0; j < loopBackStateNumbers.length; j++) {\n    pair = loopBackStateNumbers[j];\n    pair[0].loopBackState = atn.states[pair[1]];\n  }\n\n  for (j = 0; j < endStateNumbers.length; j++) {\n    pair = endStateNumbers[j];\n    pair[0].endState = atn.states[pair[1]];\n  }\n\n  var numNonGreedyStates = this.readInt();\n\n  for (j = 0; j < numNonGreedyStates; j++) {\n    stateNumber = this.readInt();\n    atn.states[stateNumber].nonGreedy = true;\n  }\n\n  var numPrecedenceStates = this.readInt();\n\n  for (j = 0; j < numPrecedenceStates; j++) {\n    stateNumber = this.readInt();\n    atn.states[stateNumber].isPrecedenceRule = true;\n  }\n};\n\nATNDeserializer.prototype.readRules = function (atn) {\n  var i;\n  var nrules = this.readInt();\n\n  if (atn.grammarType === ATNType.LEXER) {\n    atn.ruleToTokenType = initArray(nrules, 0);\n  }\n\n  atn.ruleToStartState = initArray(nrules, 0);\n\n  for (i = 0; i < nrules; i++) {\n    var s = this.readInt();\n    var startState = atn.states[s];\n    atn.ruleToStartState[i] = startState;\n\n    if (atn.grammarType === ATNType.LEXER) {\n      var tokenType = this.readInt();\n\n      if (tokenType === 0xFFFF) {\n        tokenType = Token.EOF;\n      }\n\n      atn.ruleToTokenType[i] = tokenType;\n    }\n  }\n\n  atn.ruleToStopState = initArray(nrules, 0);\n\n  for (i = 0; i < atn.states.length; i++) {\n    var state = atn.states[i];\n\n    if (!(state instanceof RuleStopState)) {\n      continue;\n    }\n\n    atn.ruleToStopState[state.ruleIndex] = state;\n    atn.ruleToStartState[state.ruleIndex].stopState = state;\n  }\n};\n\nATNDeserializer.prototype.readModes = function (atn) {\n  var nmodes = this.readInt();\n\n  for (var i = 0; i < nmodes; i++) {\n    var s = this.readInt();\n    atn.modeToStartState.push(atn.states[s]);\n  }\n};\n\nATNDeserializer.prototype.readSets = function (atn, sets, readUnicode) {\n  var m = this.readInt();\n\n  for (var i = 0; i < m; i++) {\n    var iset = new IntervalSet();\n    sets.push(iset);\n    var n = this.readInt();\n    var containsEof = this.readInt();\n\n    if (containsEof !== 0) {\n      iset.addOne(-1);\n    }\n\n    for (var j = 0; j < n; j++) {\n      var i1 = readUnicode();\n      var i2 = readUnicode();\n      iset.addRange(i1, i2);\n    }\n  }\n};\n\nATNDeserializer.prototype.readEdges = function (atn, sets) {\n  var i, j, state, trans, target;\n  var nedges = this.readInt();\n\n  for (i = 0; i < nedges; i++) {\n    var src = this.readInt();\n    var trg = this.readInt();\n    var ttype = this.readInt();\n    var arg1 = this.readInt();\n    var arg2 = this.readInt();\n    var arg3 = this.readInt();\n    trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n    var srcState = atn.states[src];\n    srcState.addTransition(trans);\n  } // edges for rule stop states can be derived, so they aren't serialized\n\n\n  for (i = 0; i < atn.states.length; i++) {\n    state = atn.states[i];\n\n    for (j = 0; j < state.transitions.length; j++) {\n      var t = state.transitions[j];\n\n      if (!(t instanceof RuleTransition)) {\n        continue;\n      }\n\n      var outermostPrecedenceReturn = -1;\n\n      if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {\n        if (t.precedence === 0) {\n          outermostPrecedenceReturn = t.target.ruleIndex;\n        }\n      }\n\n      trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);\n      atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n    }\n  }\n\n  for (i = 0; i < atn.states.length; i++) {\n    state = atn.states[i];\n\n    if (state instanceof BlockStartState) {\n      // we need to know the end state to set its start state\n      if (state.endState === null) {\n        throw \"IllegalState\";\n      } // block end states can only be associated to a single block start\n      // state\n\n\n      if (state.endState.startState !== null) {\n        throw \"IllegalState\";\n      }\n\n      state.endState.startState = state;\n    }\n\n    if (state instanceof PlusLoopbackState) {\n      for (j = 0; j < state.transitions.length; j++) {\n        target = state.transitions[j].target;\n\n        if (target instanceof PlusBlockStartState) {\n          target.loopBackState = state;\n        }\n      }\n    } else if (state instanceof StarLoopbackState) {\n      for (j = 0; j < state.transitions.length; j++) {\n        target = state.transitions[j].target;\n\n        if (target instanceof StarLoopEntryState) {\n          target.loopBackState = state;\n        }\n      }\n    }\n  }\n};\n\nATNDeserializer.prototype.readDecisions = function (atn) {\n  var ndecisions = this.readInt();\n\n  for (var i = 0; i < ndecisions; i++) {\n    var s = this.readInt();\n    var decState = atn.states[s];\n    atn.decisionToState.push(decState);\n    decState.decision = i;\n  }\n};\n\nATNDeserializer.prototype.readLexerActions = function (atn) {\n  if (atn.grammarType === ATNType.LEXER) {\n    var count = this.readInt();\n    atn.lexerActions = initArray(count, null);\n\n    for (var i = 0; i < count; i++) {\n      var actionType = this.readInt();\n      var data1 = this.readInt();\n\n      if (data1 === 0xFFFF) {\n        data1 = -1;\n      }\n\n      var data2 = this.readInt();\n\n      if (data2 === 0xFFFF) {\n        data2 = -1;\n      }\n\n      var lexerAction = this.lexerActionFactory(actionType, data1, data2);\n      atn.lexerActions[i] = lexerAction;\n    }\n  }\n};\n\nATNDeserializer.prototype.generateRuleBypassTransitions = function (atn) {\n  var i;\n  var count = atn.ruleToStartState.length;\n\n  for (i = 0; i < count; i++) {\n    atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n  }\n\n  for (i = 0; i < count; i++) {\n    this.generateRuleBypassTransition(atn, i);\n  }\n};\n\nATNDeserializer.prototype.generateRuleBypassTransition = function (atn, idx) {\n  var i, state;\n  var bypassStart = new BasicBlockStartState();\n  bypassStart.ruleIndex = idx;\n  atn.addState(bypassStart);\n  var bypassStop = new BlockEndState();\n  bypassStop.ruleIndex = idx;\n  atn.addState(bypassStop);\n  bypassStart.endState = bypassStop;\n  atn.defineDecisionState(bypassStart);\n  bypassStop.startState = bypassStart;\n  var excludeTransition = null;\n  var endState = null;\n\n  if (atn.ruleToStartState[idx].isPrecedenceRule) {\n    // wrap from the beginning of the rule to the StarLoopEntryState\n    endState = null;\n\n    for (i = 0; i < atn.states.length; i++) {\n      state = atn.states[i];\n\n      if (this.stateIsEndStateFor(state, idx)) {\n        endState = state;\n        excludeTransition = state.loopBackState.transitions[0];\n        break;\n      }\n    }\n\n    if (excludeTransition === null) {\n      throw \"Couldn't identify final state of the precedence rule prefix section.\";\n    }\n  } else {\n    endState = atn.ruleToStopState[idx];\n  } // all non-excluded transitions that currently target end state need to\n  // target blockEnd instead\n\n\n  for (i = 0; i < atn.states.length; i++) {\n    state = atn.states[i];\n\n    for (var j = 0; j < state.transitions.length; j++) {\n      var transition = state.transitions[j];\n\n      if (transition === excludeTransition) {\n        continue;\n      }\n\n      if (transition.target === endState) {\n        transition.target = bypassStop;\n      }\n    }\n  } // all transitions leaving the rule start state need to leave blockStart\n  // instead\n\n\n  var ruleToStartState = atn.ruleToStartState[idx];\n  var count = ruleToStartState.transitions.length;\n\n  while (count > 0) {\n    bypassStart.addTransition(ruleToStartState.transitions[count - 1]);\n    ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);\n  } // link the new states\n\n\n  atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));\n  bypassStop.addTransition(new EpsilonTransition(endState));\n  var matchState = new BasicState();\n  atn.addState(matchState);\n  matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));\n  bypassStart.addTransition(new EpsilonTransition(matchState));\n};\n\nATNDeserializer.prototype.stateIsEndStateFor = function (state, idx) {\n  if (state.ruleIndex !== idx) {\n    return null;\n  }\n\n  if (!(state instanceof StarLoopEntryState)) {\n    return null;\n  }\n\n  var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n\n  if (!(maybeLoopEndState instanceof LoopEndState)) {\n    return null;\n  }\n\n  if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {\n    return state;\n  } else {\n    return null;\n  }\n}; //\n// Analyze the {@link StarLoopEntryState} states in the specified ATN to set\n// the {@link StarLoopEntryState//isPrecedenceDecision} field to the\n// correct value.\n//\n// @param atn The ATN.\n//\n\n\nATNDeserializer.prototype.markPrecedenceDecisions = function (atn) {\n  for (var i = 0; i < atn.states.length; i++) {\n    var state = atn.states[i];\n\n    if (!(state instanceof StarLoopEntryState)) {\n      continue;\n    } // We analyze the ATN to determine if this ATN decision state is the\n    // decision for the closure block that determines whether a\n    // precedence rule should continue or complete.\n    //\n\n\n    if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n      var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n\n      if (maybeLoopEndState instanceof LoopEndState) {\n        if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {\n          state.isPrecedenceDecision = true;\n        }\n      }\n    }\n  }\n};\n\nATNDeserializer.prototype.verifyATN = function (atn) {\n  if (!this.deserializationOptions.verifyATN) {\n    return;\n  } // verify assumptions\n\n\n  for (var i = 0; i < atn.states.length; i++) {\n    var state = atn.states[i];\n\n    if (state === null) {\n      continue;\n    }\n\n    this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n\n    if (state instanceof PlusBlockStartState) {\n      this.checkCondition(state.loopBackState !== null);\n    } else if (state instanceof StarLoopEntryState) {\n      this.checkCondition(state.loopBackState !== null);\n      this.checkCondition(state.transitions.length === 2);\n\n      if (state.transitions[0].target instanceof StarBlockStartState) {\n        this.checkCondition(state.transitions[1].target instanceof LoopEndState);\n        this.checkCondition(!state.nonGreedy);\n      } else if (state.transitions[0].target instanceof LoopEndState) {\n        this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);\n        this.checkCondition(state.nonGreedy);\n      } else {\n        throw \"IllegalState\";\n      }\n    } else if (state instanceof StarLoopbackState) {\n      this.checkCondition(state.transitions.length === 1);\n      this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);\n    } else if (state instanceof LoopEndState) {\n      this.checkCondition(state.loopBackState !== null);\n    } else if (state instanceof RuleStartState) {\n      this.checkCondition(state.stopState !== null);\n    } else if (state instanceof BlockStartState) {\n      this.checkCondition(state.endState !== null);\n    } else if (state instanceof BlockEndState) {\n      this.checkCondition(state.startState !== null);\n    } else if (state instanceof DecisionState) {\n      this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n    } else {\n      this.checkCondition(state.transitions.length <= 1 || state instanceof RuleStopState);\n    }\n  }\n};\n\nATNDeserializer.prototype.checkCondition = function (condition, message) {\n  if (!condition) {\n    if (message === undefined || message === null) {\n      message = \"IllegalState\";\n    }\n\n    throw message;\n  }\n};\n\nATNDeserializer.prototype.readInt = function () {\n  return this.data[this.pos++];\n};\n\nATNDeserializer.prototype.readInt32 = function () {\n  var low = this.readInt();\n  var high = this.readInt();\n  return low | high << 16;\n};\n\nATNDeserializer.prototype.readLong = function () {\n  var low = this.readInt32();\n  var high = this.readInt32();\n  return low & 0x00000000FFFFFFFF | high << 32;\n};\n\nfunction createByteToHex() {\n  var bth = [];\n\n  for (var i = 0; i < 256; i++) {\n    bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();\n  }\n\n  return bth;\n}\n\nvar byteToHex = createByteToHex();\n\nATNDeserializer.prototype.readUUID = function () {\n  var bb = [];\n\n  for (var i = 7; i >= 0; i--) {\n    var int = this.readInt();\n    /* jshint bitwise: false */\n\n    bb[2 * i + 1] = int & 0xFF;\n    bb[2 * i] = int >> 8 & 0xFF;\n  }\n\n  return byteToHex[bb[0]] + byteToHex[bb[1]] + byteToHex[bb[2]] + byteToHex[bb[3]] + '-' + byteToHex[bb[4]] + byteToHex[bb[5]] + '-' + byteToHex[bb[6]] + byteToHex[bb[7]] + '-' + byteToHex[bb[8]] + byteToHex[bb[9]] + '-' + byteToHex[bb[10]] + byteToHex[bb[11]] + byteToHex[bb[12]] + byteToHex[bb[13]] + byteToHex[bb[14]] + byteToHex[bb[15]];\n};\n\nATNDeserializer.prototype.edgeFactory = function (atn, type, src, trg, arg1, arg2, arg3, sets) {\n  var target = atn.states[trg];\n\n  switch (type) {\n    case Transition.EPSILON:\n      return new EpsilonTransition(target);\n\n    case Transition.RANGE:\n      return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);\n\n    case Transition.RULE:\n      return new RuleTransition(atn.states[arg1], arg2, arg3, target);\n\n    case Transition.PREDICATE:\n      return new PredicateTransition(target, arg1, arg2, arg3 !== 0);\n\n    case Transition.PRECEDENCE:\n      return new PrecedencePredicateTransition(target, arg1);\n\n    case Transition.ATOM:\n      return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);\n\n    case Transition.ACTION:\n      return new ActionTransition(target, arg1, arg2, arg3 !== 0);\n\n    case Transition.SET:\n      return new SetTransition(target, sets[arg1]);\n\n    case Transition.NOT_SET:\n      return new NotSetTransition(target, sets[arg1]);\n\n    case Transition.WILDCARD:\n      return new WildcardTransition(target);\n\n    default:\n      throw \"The specified transition type: \" + type + \" is not valid.\";\n  }\n};\n\nATNDeserializer.prototype.stateFactory = function (type, ruleIndex) {\n  if (this.stateFactories === null) {\n    var sf = [];\n    sf[ATNState.INVALID_TYPE] = null;\n\n    sf[ATNState.BASIC] = function () {\n      return new BasicState();\n    };\n\n    sf[ATNState.RULE_START] = function () {\n      return new RuleStartState();\n    };\n\n    sf[ATNState.BLOCK_START] = function () {\n      return new BasicBlockStartState();\n    };\n\n    sf[ATNState.PLUS_BLOCK_START] = function () {\n      return new PlusBlockStartState();\n    };\n\n    sf[ATNState.STAR_BLOCK_START] = function () {\n      return new StarBlockStartState();\n    };\n\n    sf[ATNState.TOKEN_START] = function () {\n      return new TokensStartState();\n    };\n\n    sf[ATNState.RULE_STOP] = function () {\n      return new RuleStopState();\n    };\n\n    sf[ATNState.BLOCK_END] = function () {\n      return new BlockEndState();\n    };\n\n    sf[ATNState.STAR_LOOP_BACK] = function () {\n      return new StarLoopbackState();\n    };\n\n    sf[ATNState.STAR_LOOP_ENTRY] = function () {\n      return new StarLoopEntryState();\n    };\n\n    sf[ATNState.PLUS_LOOP_BACK] = function () {\n      return new PlusLoopbackState();\n    };\n\n    sf[ATNState.LOOP_END] = function () {\n      return new LoopEndState();\n    };\n\n    this.stateFactories = sf;\n  }\n\n  if (type > this.stateFactories.length || this.stateFactories[type] === null) {\n    throw \"The specified state type \" + type + \" is not valid.\";\n  } else {\n    var s = this.stateFactories[type]();\n\n    if (s !== null) {\n      s.ruleIndex = ruleIndex;\n      return s;\n    }\n  }\n};\n\nATNDeserializer.prototype.lexerActionFactory = function (type, data1, data2) {\n  if (this.actionFactories === null) {\n    var af = [];\n\n    af[LexerActionType.CHANNEL] = function (data1, data2) {\n      return new LexerChannelAction(data1);\n    };\n\n    af[LexerActionType.CUSTOM] = function (data1, data2) {\n      return new LexerCustomAction(data1, data2);\n    };\n\n    af[LexerActionType.MODE] = function (data1, data2) {\n      return new LexerModeAction(data1);\n    };\n\n    af[LexerActionType.MORE] = function (data1, data2) {\n      return LexerMoreAction.INSTANCE;\n    };\n\n    af[LexerActionType.POP_MODE] = function (data1, data2) {\n      return LexerPopModeAction.INSTANCE;\n    };\n\n    af[LexerActionType.PUSH_MODE] = function (data1, data2) {\n      return new LexerPushModeAction(data1);\n    };\n\n    af[LexerActionType.SKIP] = function (data1, data2) {\n      return LexerSkipAction.INSTANCE;\n    };\n\n    af[LexerActionType.TYPE] = function (data1, data2) {\n      return new LexerTypeAction(data1);\n    };\n\n    this.actionFactories = af;\n  }\n\n  if (type > this.actionFactories.length || this.actionFactories[type] === null) {\n    throw \"The specified lexer action type \" + type + \" is not valid.\";\n  } else {\n    return this.actionFactories[type](data1, data2);\n  }\n};\n\nexports.ATNDeserializer = ATNDeserializer;","map":null,"metadata":{},"sourceType":"script"}