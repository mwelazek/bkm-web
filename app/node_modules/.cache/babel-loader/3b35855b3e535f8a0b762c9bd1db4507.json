{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CreateEditUser = CreateEditUser;\nexports.practitionerUpdater = exports.getPractitionerRole = exports.getPractitioner = exports.getGroup = exports.createEditPractitionerRoleResource = exports.createEditGroupResource = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _userManagement = require(\"@opensrp/user-management\");\n\nvar _constants = require(\"../../constants\");\n\nvar _reactUtils = require(\"@opensrp/react-utils\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _uuid = require(\"uuid\");\n\nvar _notifications = require(\"@opensrp/notifications\");\n\nvar _connectedReducerRegistry = require(\"@onaio/connected-reducer-registry\");\n\nvar _fhirTeamManagement = require(\"@opensrp/fhir-team-management\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2[\"default\"])(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar getPractitioner = function getPractitioner(baseUrl, userId) {\n  var serve = new _reactUtils.FHIRServiceClass(baseUrl, _constants.practitionerResourceType);\n  return serve.list({\n    identifier: userId\n  }).then(function (res) {\n    return (0, _reactUtils.getResourcesFromBundle)(res)[0];\n  });\n};\n\nexports.getPractitioner = getPractitioner;\n\nvar getGroup = function getGroup(baseUrl, userId) {\n  var serve = new _reactUtils.FHIRServiceClass(baseUrl, _constants.groupResourceType);\n  return serve.list({\n    identifier: userId\n  }).then(function (res) {\n    return (0, _reactUtils.getResourcesFromBundle)(res)[0];\n  });\n};\n\nexports.getGroup = getGroup;\n\nvar getPractitionerRole = function getPractitionerRole(baseUrl, userId) {\n  var serve = new _reactUtils.FHIRServiceClass(baseUrl, _constants.practitionerRoleResourceType);\n  return serve.list({\n    identifier: userId\n  }).then(function (res) {\n    return (0, _reactUtils.getResourcesFromBundle)(res)[0];\n  });\n};\n\nexports.getPractitionerRole = getPractitionerRole;\n\nvar createEditGroupResource = function createEditGroupResource(keycloakUserEnabled, keycloakID, keycloakUserName, practitionerID, baseUrl, existingGroupID) {\n  var newGroupResourceID = (0, _uuid.v4)();\n  var payload = {\n    resourceType: _constants.groupResourceType,\n    id: existingGroupID !== null && existingGroupID !== void 0 ? existingGroupID : newGroupResourceID,\n    identifier: [{\n      use: _reactUtils.IdentifierUseCodes.OFFICIAL,\n      value: existingGroupID !== null && existingGroupID !== void 0 ? existingGroupID : newGroupResourceID\n    }, {\n      use: _reactUtils.IdentifierUseCodes.SECONDARY,\n      value: keycloakID\n    }],\n    active: keycloakUserEnabled,\n    type: 'practitioner',\n    actual: true,\n    code: {\n      coding: [{\n        system: 'http://snomed.info/sct',\n        code: _userManagement.PRACTITIONER_USER_TYPE_CODE,\n        display: 'Assigned practitioner'\n      }]\n    },\n    name: keycloakUserName,\n    member: [{\n      entity: {\n        reference: \"Practitioner/\".concat(practitionerID)\n      }\n    }]\n  };\n  var serve = new _reactUtils.FHIRServiceClass(baseUrl, _constants.groupResourceType);\n  return serve.update(payload);\n};\n\nexports.createEditGroupResource = createEditGroupResource;\n\nvar createEditPractitionerRoleResource = function createEditPractitionerRoleResource(userType, keycloakID, keycloakUserEnabled, practitionerID, practitionerName, baseUrl, existingPractitionerRoleID) {\n  var newPractitionerRoleResourceID = (0, _uuid.v4)();\n  var practitionerRoleResourceCode = [{\n    coding: [{\n      system: 'http://snomed.info/sct',\n      code: _userManagement.PRACTITIONER_USER_TYPE_CODE,\n      display: 'Assigned practitioner'\n    }]\n  }];\n\n  if (userType === 'supervisor') {\n    practitionerRoleResourceCode = [{\n      coding: [{\n        system: 'http://snomed.info/sct',\n        code: _userManagement.SUPERVISOR_USER_TYPE_CODE,\n        display: 'Supervisor (occupation)'\n      }]\n    }];\n  }\n\n  var practitionerDisplayName = (0, _reactUtils.getObjLike)(practitionerName, 'use', _fhirTeamManagement.HumanNameUseCodes.OFFICIAL, true)[0];\n  var payload = {\n    resourceType: _constants.practitionerRoleResourceType,\n    id: existingPractitionerRoleID !== null && existingPractitionerRoleID !== void 0 ? existingPractitionerRoleID : newPractitionerRoleResourceID,\n    identifier: [{\n      use: _reactUtils.IdentifierUseCodes.OFFICIAL,\n      value: existingPractitionerRoleID !== null && existingPractitionerRoleID !== void 0 ? existingPractitionerRoleID : newPractitionerRoleResourceID\n    }, {\n      use: _reactUtils.IdentifierUseCodes.SECONDARY,\n      value: keycloakID\n    }],\n    active: keycloakUserEnabled,\n    practitioner: {\n      reference: \"Practitioner/\".concat(practitionerID),\n      display: (0, _reactUtils.parseFhirHumanName)(practitionerDisplayName)\n    },\n    code: practitionerRoleResourceCode\n  };\n  var serve = new _reactUtils.FHIRServiceClass(baseUrl, _constants.practitionerRoleResourceType);\n  return serve.update(payload);\n};\n\nexports.createEditPractitionerRoleResource = createEditPractitionerRoleResource;\n\nvar practitionerUpdater = function practitionerUpdater(baseUrl) {\n  return function () {\n    var _ref = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee(values, userId) {\n      var _values$enabled;\n\n      var t,\n          isEditMode,\n          group,\n          practitionerSuccessMessage,\n          practitionerErrorMessage,\n          groupSuccessMessage,\n          groupErrorMessage,\n          practitionerRoleSuccessMessage,\n          practitionerRoleErrorMessage,\n          officialIdentifier,\n          secondaryIdentifier,\n          currentIdentifiers,\n          payload,\n          serve,\n          _args = arguments;\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              t = _args.length > 2 && _args[2] !== undefined ? _args[2] : function (str) {\n                return str;\n              };\n              isEditMode = !!values.practitioner;\n\n              if (!isEditMode) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 5;\n              return getGroup(baseUrl, userId);\n\n            case 5:\n              group = _context.sent;\n\n            case 6:\n              practitionerSuccessMessage = isEditMode ? t('Practitioner updated successfully') : t('Practitioner created successfully');\n              practitionerErrorMessage = isEditMode ? t('Failed to update practitioner') : t('Failed to create practitioner');\n              groupSuccessMessage = group ? t('Group resource updated successfully') : t('Group resource created successfully');\n              groupErrorMessage = group ? t('Failed to update group resource') : t('Failed to create group resource');\n              practitionerRoleSuccessMessage = isEditMode ? t('PractitionerRole updated successfully') : t('PractitionerRole created successfully');\n              practitionerRoleErrorMessage = isEditMode ? t('Failed to update practitionerRole') : t('Failed to create practitionerRole');\n\n              if (values.practitioner) {\n                currentIdentifiers = values.practitioner.identifier;\n                officialIdentifier = (0, _reactUtils.getObjLike)(currentIdentifiers, 'use', _reactUtils.IdentifierUseCodes.OFFICIAL)[0];\n                secondaryIdentifier = (0, _reactUtils.getObjLike)(currentIdentifiers, 'use', _reactUtils.IdentifierUseCodes.SECONDARY)[0];\n              }\n\n              if (!officialIdentifier) {\n                officialIdentifier = {\n                  use: _reactUtils.IdentifierUseCodes.OFFICIAL,\n                  value: (0, _uuid.v4)()\n                };\n              }\n\n              if (!secondaryIdentifier) {\n                secondaryIdentifier = {\n                  use: _reactUtils.IdentifierUseCodes.SECONDARY,\n                  value: userId\n                };\n              }\n\n              payload = {\n                resourceType: _constants.practitionerResourceType,\n                id: officialIdentifier.value,\n                identifier: [officialIdentifier, secondaryIdentifier],\n                active: (_values$enabled = values.enabled) !== null && _values$enabled !== void 0 ? _values$enabled : false,\n                name: [{\n                  use: _reactUtils.IdentifierUseCodes.OFFICIAL,\n                  family: values.lastName,\n                  given: [values.firstName, '']\n                }],\n                telecom: [{\n                  system: 'email',\n                  value: values.email\n                }]\n              };\n              serve = new _reactUtils.FHIRServiceClass(baseUrl, _constants.practitionerResourceType);\n              return _context.abrupt(\"return\", serve.update(payload).then(function (res) {\n                (0, _notifications.sendSuccessNotification)(practitionerSuccessMessage);\n                return res;\n              }).then(function (res) {\n                var _res$identifier$find$, _res$identifier, _res$identifier$find, _values$enabled2, _group, _values$enabled3, _res$name, _values$practitionerR;\n\n                var practitionerID = (_res$identifier$find$ = (_res$identifier = res.identifier) === null || _res$identifier === void 0 ? void 0 : (_res$identifier$find = _res$identifier.find(function (identifier) {\n                  return identifier.use === 'official';\n                })) === null || _res$identifier$find === void 0 ? void 0 : _res$identifier$find.value) !== null && _res$identifier$find$ !== void 0 ? _res$identifier$find$ : payload.id;\n                createEditGroupResource((_values$enabled2 = values.enabled) !== null && _values$enabled2 !== void 0 ? _values$enabled2 : false, userId, \"\".concat(values.firstName, \" \").concat(values.lastName), practitionerID !== null && practitionerID !== void 0 ? practitionerID : '', baseUrl, (_group = group) === null || _group === void 0 ? void 0 : _group.id).then(function () {\n                  return (0, _notifications.sendSuccessNotification)(groupSuccessMessage);\n                })[\"catch\"](function () {\n                  return (0, _notifications.sendErrorNotification)(groupErrorMessage);\n                });\n                createEditPractitionerRoleResource(values.userType, userId, (_values$enabled3 = values.enabled) !== null && _values$enabled3 !== void 0 ? _values$enabled3 : false, practitionerID !== null && practitionerID !== void 0 ? practitionerID : '', (_res$name = res.name) !== null && _res$name !== void 0 ? _res$name : [], baseUrl, (_values$practitionerR = values.practitionerRole) === null || _values$practitionerR === void 0 ? void 0 : _values$practitionerR.id).then(function () {\n                  return (0, _notifications.sendSuccessNotification)(practitionerRoleSuccessMessage);\n                })[\"catch\"](function () {\n                  return (0, _notifications.sendErrorNotification)(practitionerRoleErrorMessage);\n                });\n              })[\"catch\"](function () {\n                return (0, _notifications.sendErrorNotification)(practitionerErrorMessage);\n              })[\"finally\"](function () {\n                if (!isEditMode) {\n                  _connectedReducerRegistry.history.push(\"\".concat(_userManagement.URL_USER_CREDENTIALS, \"/\").concat(userId, \"/\").concat(values.username));\n                }\n              }));\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexports.practitionerUpdater = practitionerUpdater;\n\nfunction CreateEditUser(props) {\n  var baseCompProps = _objectSpread(_objectSpread({}, props), {}, {\n    getPractitionerFun: getPractitioner,\n    getPractitionerRoleFun: getPractitionerRole,\n    postPutPractitionerFactory: practitionerUpdater\n  });\n\n  return _react[\"default\"].createElement(_userManagement.ConnectedCreateEditUser, baseCompProps);\n}","map":null,"metadata":{},"sourceType":"script"}