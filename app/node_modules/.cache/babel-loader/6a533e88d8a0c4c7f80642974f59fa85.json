{"ast":null,"code":"import _defineProperty from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { Label } from './../../atoms/label';\nimport { Spinner } from './../spinner';\nimport ValidationError from './../../molecules/form/validation-error';\nimport toolkitstyles from './styles.module.scss';\nexport var SafeTextarea = /*#__PURE__*/function (_React$Component) {\n  _inherits(SafeTextarea, _React$Component);\n\n  var _super = _createSuper(SafeTextarea);\n\n  function SafeTextarea(props) {\n    var _this;\n\n    _classCallCheck(this, SafeTextarea);\n\n    _this = _super.call(this, props);\n\n    _this.setSize = function (props) {\n      var size = props.size,\n          maxlength = props.maxlength;\n\n      if (size) {\n        _this.setState({\n          size: size\n        });\n      } else if (maxlength) {\n        if (maxlength < 250) {\n          _this.setState({\n            size: 'small'\n          });\n        } else if (maxlength < 500) {\n          _this.setState({\n            size: 'medium'\n          });\n        } else {\n          _this.setState({\n            size: 'large'\n          });\n        }\n      } else {\n        _this.setState({\n          size: 'medium'\n        });\n      }\n    };\n\n    _this.validator = function (value) {\n      var overMaxlength = _this.isValueOverMaxLength(value);\n\n      var underMinlength = _this.isValueUnderMinLength(value);\n\n      if (overMaxlength || underMinlength) {\n        return false;\n      } else if (_this.props.validator) {\n        return _this.props.validator(value);\n      } else {\n        return true;\n      }\n    };\n\n    _this.isValueOverMaxLength = function (value) {\n      return _this.props.maxlength && value ? value.replace(/(\\r\\n|\\n|\\r)/g, '-').length > _this.props.maxlength : false;\n    };\n\n    _this.isValueUnderMinLength = function (value) {\n      return _this.props.minlength && value ? value.length < _this.props.minlength : false;\n    };\n\n    _this.validate = function (value) {\n      return new Promise(function (resolve) {\n        var validatedCB = function validatedCB() {\n          resolve();\n        };\n\n        _this.setState({\n          valid: _this.validator(value) && _this.isValidIfRequired(value)\n        }, validatedCB);\n      });\n    };\n\n    _this.onBlur = function (event) {\n      var target = event.target;\n\n      _this.setState({\n        focused: false,\n        blurred: true,\n        valid: _this.validator(target.value),\n        validated: true\n      });\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event);\n      }\n    };\n\n    _this.onChange = function (event) {\n      var target = event.target;\n\n      _this.handleOnChange(target.value, function () {\n        if (_this.props.onChange) _this.props.onChange(event);\n      });\n    };\n\n    _this.handleOnChange = function (value, notify) {\n      _this.setState({\n        value: value,\n        valid: _this.validator(value),\n        validated: _this.isValueOverMaxLength(value) ? true : _this.state.validated\n      });\n\n      if (notify) {\n        notify();\n      }\n    };\n\n    _this.notifyValidated = function () {\n      if (_this.props.onValidated) {\n        _this.props.onValidated(_this.state.valid);\n      }\n    };\n\n    _this.validateField = function () {\n      _this.setState({\n        validated: true\n      });\n\n      return _this.validate(_this.state.value);\n    };\n\n    _this.isValidIfRequired = function (value) {\n      if (_this.props.isRequired) {\n        return value !== null && value !== undefined && value.toString().trim() !== '';\n      }\n\n      return true;\n    };\n\n    _this.isValid = function () {\n      return _this.state.valid;\n    };\n\n    _this.onFocus = function (event) {\n      _this.setState({\n        focused: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n    };\n\n    _this.focus = function () {\n      if (_this.textareaRef.current) {\n        _this.textareaRef.current.focus();\n      }\n    };\n\n    _this.createMarkupForFancyDescription = function (html) {\n      var content = '';\n\n      if (html !== null && html !== undefined) {\n        content = html;\n      }\n\n      return {\n        __html: content\n      };\n    };\n\n    _this.renderSubLabel = function () {\n      var _a;\n\n      if (_this.props.subLabel) {\n        return _this.props.subLabel;\n      } else if (_this.props.maxlength && !_this.props.hideLengthLabel) {\n        return ((_a = _this.props.maxLengthText) === null || _a === void 0 ? void 0 : _a.replace('{0}', _this.props.maxlength.toString())) || \"Maksimum \".concat(_this.props.maxlength, \" tegn\");\n      }\n\n      return undefined;\n    };\n\n    _this.renderLabel = function () {\n      var _this$props = _this.props,\n          id = _this$props.id,\n          helpButton = _this$props.helpButton,\n          label = _this$props.label,\n          showLabel = _this$props.showLabel,\n          isRequired = _this$props.isRequired,\n          requiredLabel = _this$props.requiredLabel,\n          showRequiredLabel = _this$props.showRequiredLabel,\n          optionalLabel = _this$props.optionalLabel,\n          showOptionalLabel = _this$props.showOptionalLabel;\n\n      if (!showLabel || !id) {\n        return null;\n      }\n\n      var reqLabel = isRequired && requiredLabel && showRequiredLabel ? React.createElement(\"em\", null, \" \", requiredLabel) : '';\n      var optLabel = !isRequired && optionalLabel && showOptionalLabel ? React.createElement(\"em\", null, \" \", optionalLabel) : '';\n      var labelText = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n        dangerouslySetInnerHTML: _this.createMarkupForFancyDescription(label)\n      }), reqLabel, optLabel);\n      return React.createElement(Label, {\n        htmlFor: id,\n        labelText: labelText,\n        sublabelText: _this.renderSubLabel(),\n        helpButton: helpButton\n      });\n    };\n\n    _this.renderHelp = function () {\n      if (_this.props.helpElement) {\n        return _this.props.helpElement;\n      }\n    };\n\n    _this.renderErrorMessage = function () {\n      var _this$props2 = _this.props,\n          isRequired = _this$props2.isRequired,\n          requiredErrorMessage = _this$props2.requiredErrorMessage,\n          errorMessage = _this$props2.errorMessage;\n      var _this$state = _this.state,\n          valid = _this$state.valid,\n          validated = _this$state.validated,\n          value = _this$state.value;\n\n      if (!validated) {\n        return null;\n      }\n\n      var error;\n\n      if (!valid) {\n        if (isRequired && !_this.isValidIfRequired(value) && requiredErrorMessage) {\n          error = typeof requiredErrorMessage === 'string' ? requiredErrorMessage : requiredErrorMessage(value);\n        } else if (errorMessage) {\n          error = typeof errorMessage === 'string' ? errorMessage : errorMessage(value);\n        } else {\n          error = 'Ugyldig verdi';\n        }\n\n        if (_this.isValueOverMaxLength(value)) {\n          error = _this.props.stringOverMaxLengthError ? _this.props.stringOverMaxLengthError : 'Du har skrevet for mange tegn. GjÃ¸r teksten kortere.';\n        }\n      }\n\n      if (!error) {\n        return null;\n      }\n\n      return React.createElement(ValidationError, {\n        isValid: valid,\n        error: error\n      });\n    };\n\n    _this.textareaRef = React.createRef();\n    _this.state = {\n      focused: false,\n      value: undefined,\n      blurred: false,\n      valid: true,\n      validated: false\n    };\n    return _this;\n  }\n\n  _createClass(SafeTextarea, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this.setSize(this.props);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var value = this.props.value;\n      this.setState({\n        value: value\n      }, function () {\n        if (value === '' || value === null || value === undefined) {\n          return;\n        } else {\n          _this2.validateField();\n        }\n      });\n\n      if (this.props.autoFocus) {\n        var position = this.props.value ? this.props.value.length : 0;\n\n        if (this.textareaRef.current && typeof this.textareaRef.current.setSelectionRange === 'function') {\n          this.textareaRef.current.setSelectionRange(position, position);\n        }\n      }\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var _a;\n\n      if (!this.state.focused) {\n        this.setState({\n          value: nextProps.value\n        });\n      }\n\n      if (this.props.size !== nextProps.size || this.props.maxlength !== nextProps.maxlength) {\n        this.setSize(nextProps);\n      }\n\n      if (this.props.validateOnExternalUpdate && nextProps.value !== this.props.value) {\n        this.handleOnChange((_a = nextProps.value) !== null && _a !== void 0 ? _a : '');\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_prevProps, prevState) {\n      if (prevState.valid !== this.state.valid) {\n        this.notifyValidated();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames2;\n\n      var _this$props3 = this.props,\n          maxlength = _this$props3.maxlength,\n          loading = _this$props3.loading,\n          isRequired = _this$props3.isRequired,\n          minlength = _this$props3.minlength,\n          id = _this$props3.id,\n          rows = _this$props3.rows,\n          placeholder = _this$props3.placeholder,\n          autoFocus = _this$props3.autoFocus,\n          disabled = _this$props3.disabled,\n          ariaLabel = _this$props3.ariaLabel,\n          readOnly = _this$props3.readOnly,\n          children = _this$props3.children,\n          wrapperClasses = _this$props3.wrapperClasses,\n          charCounterClasses = _this$props3.charCounterClasses;\n      var _this$state2 = this.state,\n          value = _this$state2.value,\n          valid = _this$state2.valid,\n          validated = _this$state2.validated,\n          size = _this$state2.size;\n      var counterPrefixText = '/';\n      var counterInfixText = 'av';\n      var counterSuffixText = ' tegn brukt';\n      var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n      var isChrome = !!window.chrome;\n      var isWeird = isSafari || isChrome;\n      var counter;\n\n      if (!!maxlength) {\n        var _classNames;\n\n        var length = 0;\n\n        if (value) {\n          length = isWeird ? value.replace(/(\\r\\n|\\n|\\r)/g, '-').length : value.length;\n        }\n\n        var progress = 0;\n\n        if (maxlength) {\n          progress = length / maxlength;\n        }\n\n        var ariaLevel = progress > 0.75 ? 'polite' : 'off';\n        var lengthClasses = classNames((_classNames = {}, _defineProperty(_classNames, toolkitstyles['safetextarea__char-counter__length'], true), _defineProperty(_classNames, toolkitstyles['safetextarea__char-counter__length--invalid'], !!maxlength && length > maxlength), _classNames));\n        counter = React.createElement(\"div\", {\n          className: \"\".concat(toolkitstyles['safetextarea__char-counter']).concat(!!charCounterClasses ? \" \".concat(charCounterClasses) : ''),\n          \"aria-live\": ariaLevel,\n          \"aria-atomic\": \"true\"\n        }, React.createElement(\"span\", {\n          className: lengthClasses\n        }, length), React.createElement(\"span\", {\n          \"aria-hidden\": \"true\"\n        }, counterPrefixText), React.createElement(\"span\", {\n          className: toolkitstyles['safetextarea__char-counter__hidden-text']\n        }, counterInfixText), maxlength, React.createElement(\"span\", {\n          className: toolkitstyles['safetextarea__char-counter__hidden-text']\n        }, counterSuffixText));\n      }\n\n      var spinner = null;\n\n      if (loading) {\n        spinner = React.createElement(Spinner, {\n          inline: true,\n          mini: true\n        });\n      }\n\n      var required = false;\n\n      if (isRequired) {\n        required = isRequired;\n      }\n\n      var textAreaClasses = classNames((_classNames2 = {}, _defineProperty(_classNames2, toolkitstyles.safetextarea__textarea, true), _defineProperty(_classNames2, toolkitstyles['safetextarea__textarea--state_validationerror'], !valid && validated), _defineProperty(_classNames2, toolkitstyles['safetextarea__textarea--small'], size === 'small'), _defineProperty(_classNames2, toolkitstyles['safetextarea__textarea--medium'], size === 'medium'), _defineProperty(_classNames2, toolkitstyles['safetextarea__textarea--large'], size === 'large'), _classNames2));\n      var classes = classNames('mol_validation', {\n        'mol_validation--active': !valid && validated\n      }, wrapperClasses);\n      var ariaInvalid = {};\n\n      if (validated) {\n        ariaInvalid['aria-invalid'] = !valid;\n      }\n\n      return React.createElement(\"div\", {\n        className: classes,\n        id: \"\".concat(id, \"-wrapper\")\n      }, this.renderErrorMessage(), this.renderLabel(), this.renderHelp(), React.createElement(\"textarea\", Object.assign({\n        id: id,\n        ref: this.textareaRef,\n        value: value || '',\n        className: textAreaClasses,\n        style: {\n          resize: 'none'\n        },\n        minLength: minlength,\n        rows: rows,\n        placeholder: placeholder,\n        onChange: this.onChange,\n        onBlur: this.onBlur,\n        onFocus: this.onFocus,\n        autoFocus: autoFocus,\n        disabled: disabled,\n        required: required,\n        \"aria-required\": required,\n        \"aria-label\": ariaLabel,\n        \"data-testid\": this.props.testId,\n        readOnly: readOnly\n      }, ariaInvalid)), React.createElement(\"div\", {\n        className: toolkitstyles['safetextarea__printable-textarea-content']\n      }, value), spinner, counter, children);\n    }\n  }]);\n\n  return SafeTextarea;\n}(React.Component);\nSafeTextarea.hnFormComponent = true;\nexport default SafeTextarea;","map":null,"metadata":{},"sourceType":"module"}