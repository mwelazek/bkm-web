{"ast":null,"code":"import _defineProperty from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport jssGlobal from 'jss-plugin-global';\nimport { create as createJss } from 'jss';\nimport { log } from '@helsenorge/core-utils/logger';\nimport aria from '@helsenorge/core-utils/aria-hidden';\nimport RenderToBody from '@helsenorge/core-utils/hoc/render-to-body';\nimport keyCode from '@helsenorge/core-utils/constants/key-code';\nimport { handleIOSSafariUA } from '@helsenorge/core-utils/user-agents-utils';\nimport TrapFocus from '@helsenorge/core-utils/trapfocus';\nimport Close from '../../icons/Close';\nimport Alert from '../../icons/Alert';\nimport { ActionButton } from '../../atoms/buttons/action-button';\nimport { FunctionButton } from '../../atoms/buttons/function-button';\nimport toolkitstyles from './styles.module.scss';\nimport './styles.scss';\nvar lightboxes = [];\nvar lightboxCount = 0;\nvar jss = createJss({\n  plugins: [jssGlobal()]\n});\nvar printSheet = jss.createStyleSheet({\n  '@global body > *:not(.toolkit-lightbox)': {\n    display: 'none'\n  }\n}, {\n  media: 'print'\n});\nexport var Lightbox = /*#__PURE__*/function (_React$Component) {\n  _inherits(Lightbox, _React$Component);\n\n  var _super = _createSuper(Lightbox);\n\n  function Lightbox(props) {\n    var _this;\n\n    _classCallCheck(this, Lightbox);\n\n    _this = _super.call(this, props);\n\n    _this.close = function (evt) {\n      if (evt) {\n        evt.stopPropagation();\n        evt.nativeEvent && evt.nativeEvent.stopImmediatePropagation();\n      }\n\n      if (_this.props.onClose) {\n        _this.props.onClose();\n      }\n    };\n\n    _this.addPreventScrollToParentLightbox = function () {\n      if (_this.containerRef.current) {\n        var parent = _this.containerRef.current.parentElement;\n\n        while (parent) {\n          if (parent.classList.contains('toolkit-lightbox')) {\n            parent.classList.add('preventscroll');\n            break;\n          }\n\n          parent = parent.parentElement;\n        }\n      }\n    };\n\n    _this.focusOnLightboxContainer = function () {\n      if (_this.props.isVisible) {\n        _this.setState({\n          containerTabIndex: 0\n        }, function () {\n          if (_this.containerRef.current) {\n            _this.containerRef.current.focus();\n\n            _this.prevAriaHiddens = aria.setAriaHidden(_this.containerRef.current);\n            _this.trapFocus = new TrapFocus(_this.containerRef.current);\n          }\n        });\n      }\n    };\n\n    _this.mount = function () {\n      var _a;\n\n      if (document.body.classList.contains('preventscroll')) {\n        _this.addPreventScrollToParentLightbox();\n      } else {\n        document.body.classList.add('preventscroll');\n      }\n\n      _this.focusOnLightboxContainer();\n\n      (_a = _this.containerRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener('click', _this.clickListener, false);\n      document.addEventListener('keydown', _this.keyListener);\n      handleIOSSafariUA();\n      lightboxes.push(_this.lightboxId);\n      _this.props.printable && printSheet.attach();\n\n      _this.setState({\n        containerTabIndex: _this.props.isVisible ? 0 : -1\n      });\n    };\n\n    _this.unMount = function () {\n      var _a;\n\n      if (_this.prevAriaHiddens !== undefined) {\n        aria.resetAriaHidden(_this.prevAriaHiddens);\n      }\n\n      setTimeout(function () {\n        if (document.body.classList.contains('preventscroll') && document.querySelectorAll('.toolkit-lightbox').length === 0) {\n          document.body.classList.remove('preventscroll');\n        }\n      }, 50);\n\n      if (_this.trapFocus !== undefined && _this.trapFocus !== null) {\n        _this.trapFocus.deactivate();\n\n        _this.trapFocus = undefined;\n      }\n\n      (_a = _this.containerRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('click', _this.clickListener, false);\n      document.removeEventListener('keydown', _this.keyListener);\n      var lightbox = document.querySelector('.toolkit-lightbox');\n\n      if (lightbox) {\n        lightbox.classList.remove('preventscroll');\n      }\n\n      var removed = lightboxes.pop();\n\n      if (removed !== _this.lightboxId) {\n        log('Lightbox stack is corrupted');\n      }\n\n      _this.props.printable && printSheet.detach();\n    };\n\n    _this.clickListener = function (evt) {\n      if (evt.target && _this.containerRef.current === evt.target && !_this.props.noAbort) {\n        evt.stopPropagation();\n\n        _this.close();\n      }\n    };\n\n    _this.keyListener = function (e) {\n      if (e.keyCode === keyCode.ESC && !_this.props.noAbort) {\n        e.stopPropagation();\n\n        if (lightboxes[lightboxes.length - 1] === _this.lightboxId) {\n          _this.close();\n        }\n      }\n    };\n\n    _this.onContainerBlur = function () {\n      _this.setState({\n        containerTabIndex: -1\n      });\n    };\n\n    _this.lightboxId = lightboxCount++;\n    _this.overlayRef = React.createRef();\n    _this.containerRef = React.createRef();\n    _this.state = {\n      containerTabIndex: 0\n    };\n    return _this;\n  }\n\n  _createClass(Lightbox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.isVisible) {\n        this.mount();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.isVisible && !this.props.isVisible) {\n        this.unMount();\n      } else if (!prevProps.isVisible && this.props.isVisible) {\n        this.mount();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unMount();\n    }\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(scrollPosition) {\n      if (this.containerRef.current) {\n        this.containerRef.current.scrollTop = scrollPosition;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames, _classNames2, _classNames3;\n\n      var _this$props = this.props,\n          wrapperClassName = _this$props.wrapperClassName,\n          contentClassName = _this$props.contentClassName,\n          buttonWrapperClassName = _this$props.buttonWrapperClassName,\n          closeButtonClassName = _this$props.closeButtonClassName,\n          buttonWrapperContent = _this$props.buttonWrapperContent,\n          isProsessHjelpenAvailable = _this$props.isProsessHjelpenAvailable,\n          actionCancelButton = _this$props.actionCancelButton,\n          noCloseButton = _this$props.noCloseButton,\n          hasAlertIcon = _this$props.hasAlertIcon,\n          isVisible = _this$props.isVisible,\n          isContentHidden = _this$props.isContentHidden,\n          small = _this$props.small,\n          medium = _this$props.medium,\n          large = _this$props.large,\n          noPadding = _this$props.noPadding,\n          noAbort = _this$props.noAbort,\n          printable = _this$props.printable,\n          energize = _this$props.energize,\n          children = _this$props.children,\n          lightboxTestId = _this$props.lightboxTestId,\n          actionButtonTestId = _this$props.actionButtonTestId,\n          functionButtonTestId = _this$props.functionButtonTestId,\n          ariaLabel = _this$props.ariaLabel,\n          ariaLabelledBy = _this$props.ariaLabelledBy;\n      var closeText = 'Lukk';\n      var lightboxContainerClasses = classNames((_classNames = {\n        'toolkit-lightbox': true\n      }, _defineProperty(_classNames, \"\".concat(toolkitstyles.lightbox__container), true), _defineProperty(_classNames, \"\".concat(toolkitstyles['lightbox__container--lowerzindex']), isProsessHjelpenAvailable), _classNames), wrapperClassName);\n      var lightboxContentClasses = classNames((_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(toolkitstyles.lightbox__content), true), _defineProperty(_classNames2, \"\".concat(toolkitstyles['lightbox__content--small']), small), _defineProperty(_classNames2, \"\".concat(toolkitstyles['lightbox__content--medium']), medium), _defineProperty(_classNames2, \"\".concat(toolkitstyles['lightbox__content--large']), large), _defineProperty(_classNames2, \"\".concat(toolkitstyles['lightbox__content--nopadding']), noPadding), _classNames2), contentClassName);\n      var placeholderClasses = classNames((_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(toolkitstyles.lightbox__closebuttonplaceholder), true), _defineProperty(_classNames3, \"\".concat(toolkitstyles['lightbox__closebuttonplaceholder--smaller']), !noPadding && (small || medium || large)), _defineProperty(_classNames3, \"\".concat(toolkitstyles['lightbox__closebuttonplaceholder--larger']), noPadding && (small || medium || large)), _classNames3), wrapperClassName);\n      var actionButton = null;\n      var closeButton = null;\n\n      if (!noCloseButton) {\n        actionButton = React.createElement(ActionButton, {\n          onClick: this.close,\n          className: toolkitstyles.lightbox__buttonwrapper__actionbutton,\n          tertiary: !!actionCancelButton,\n          testId: actionButtonTestId\n        }, closeText);\n      }\n\n      if (!noAbort) {\n        closeButton = React.createElement(FunctionButton, {\n          className: \"\".concat(toolkitstyles.lightbox__closebutton, \" \").concat(closeButtonClassName ? closeButtonClassName : ''),\n          onClick: this.close,\n          svgIcon: React.createElement(Close, null),\n          secondary: true,\n          ariaLabel: closeText,\n          testId: functionButtonTestId\n        });\n      }\n\n      var hideStyle;\n\n      if (isContentHidden) {\n        hideStyle = {\n          display: 'none'\n        };\n      }\n\n      var content = isVisible ? React.createElement(\"div\", {\n        className: \"toolkit-lightbox\",\n        \"data-testid\": lightboxTestId\n      }, React.createElement(\"div\", {\n        className: \"\".concat(toolkitstyles.lightbox__overlay, \" \").concat(isProsessHjelpenAvailable ? toolkitstyles['lightbox__overlay--lowerzindex'] : ''),\n        ref: this.overlayRef\n      }), React.createElement(\"div\", {\n        className: lightboxContainerClasses,\n        style: hideStyle,\n        ref: this.containerRef\n      }, React.createElement(\"div\", {\n        role: \"dialog\",\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        tabIndex: this.state.containerTabIndex,\n        \"aria-hidden\": !isVisible,\n        className: lightboxContentClasses,\n        onBlur: this.onContainerBlur\n      }, hasAlertIcon && React.createElement(Alert, {\n        tabIndex: -1,\n        size: 'large',\n        className: toolkitstyles.lightbox__alerticon\n      }), !noAbort ? React.createElement(\"div\", {\n        className: placeholderClasses\n      }) : null, closeButton, children, (actionButton || buttonWrapperContent) && React.createElement(\"div\", {\n        className: \"\".concat(toolkitstyles['lightbox__buttonwrapper'], \" \").concat(buttonWrapperClassName ? buttonWrapperClassName : '')\n      }, actionButton, buttonWrapperContent)))) : null;\n      return energize || printable ? React.createElement(RenderToBody, {\n        printable: printable\n      }, content) : content;\n    }\n  }]);\n\n  return Lightbox;\n}(React.Component);","map":null,"metadata":{},"sourceType":"module"}