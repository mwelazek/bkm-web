{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/teboho/opensrp-fhir-web-source/fhir-web/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.packArray = packArray;\nexports.unpackArray = unpackArray;\n/**\n * This file provides functions to reduce the size of an array of objects of the same structure in JSON.\n */\n\nvar pushFn = Array.prototype.push;\n\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Makes human readable config used to pack/unpack array of objects of the same structure to store with packed data.\n * @param {Object} refObj - reference item of array of objects of the same structure\n * @returns {Array}\n */\n\n\nfunction createConfig(refObj) {\n  return Object.keys(refObj).reduce(function (config, key) {\n    if (isObject(refObj[key])) {\n      pushFn.apply(config, createConfig(refObj[key]).map(function (keyTail) {\n        return [key].concat(_toConsumableArray([].concat(keyTail)));\n      }));\n    } else {\n      config.push(key);\n    }\n\n    return config;\n  }, []);\n}\n/**\n * Prepares config created with createConfig function to use in packItem/unpackItem functions.\n * @param {Array} config\n * @returns {Array}\n */\n\n\nfunction prepareConfig(config) {\n  return config.map(function (key) {\n    return Array.isArray(key) ? key : [key];\n  });\n}\n/**\n * Converts an object to an array of values in the order of keys from configuration array.\n * @param {Array} config - configuration array\n * @param {Object} item - input object\n * @returns {Array}\n */\n\n\nfunction packItem(config, item) {\n  if (config.join() !== prepareConfig(createConfig(item)).join()) {\n    throw new Error('Object of unusual structure');\n  }\n\n  return config.map(function (keyArr) {\n    var place = item;\n    keyArr.forEach(function (key) {\n      place = place[key];\n\n      if (place === undefined) {\n        throw new Error('Object of unusual structure');\n      }\n    });\n    return place;\n  });\n}\n/**\n * Performs the reverse of packItem function.\n * @param {Array} config - configuration array\n * @param {Array} item - input object\n * @returns {Object}\n */\n\n\nfunction unpackItem(config, item) {\n  var result = {};\n  config.forEach(function (keyArr, i) {\n    var place = result;\n\n    for (var _i = 0; _i < keyArr.length - 1; _i++) {\n      place = place[keyArr[_i]] = place[keyArr[_i]] || {};\n    }\n\n    place[keyArr[keyArr.length - 1]] = item[i];\n  });\n  return result;\n}\n/**\n * Reduces size of an array of objects of the same structure before serialize it to JSON\n * @param {Array} arr\n * @returns {Object}\n */\n\n\nfunction packArray(arr) {\n  if (arr && arr.length) {\n    var config = createConfig(arr[0]),\n        _config = prepareConfig(config);\n\n    if (config.length) {\n      return {\n        config: config,\n        data: arr.map(packItem.bind(null, _config))\n      };\n    }\n  }\n\n  return {\n    config: [],\n    data: arr\n  };\n}\n/**\n * Restores an array of objects of the same structure after deserializing this object from JSON\n * @param {Object} obj\n * @returns {Array}\n */\n\n\nfunction unpackArray(obj) {\n  var config = obj && obj.config;\n\n  if (config) {\n    if (config.length && obj.data) {\n      var _config = prepareConfig(config);\n\n      return obj.data.map(unpackItem.bind(null, _config));\n    } else {\n      return obj.data;\n    }\n  }\n\n  return obj;\n}","map":null,"metadata":{},"sourceType":"script"}