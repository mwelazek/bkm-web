{"ast":null,"code":"/* eslint-disable no-console */\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\nexport var LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\n  LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n  LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n  LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\n  LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n  LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n  LogLevel[LogLevel[\"Off\"] = 6] = \"Off\";\n})(LogLevel || (LogLevel = {}));\n/**\n * Lager en event listener pÃ¥ errors og logger error til serveren\n */\n\n\nexport var captureErrors = function captureErrors() {\n  window.addEventListener('error', function (e) {\n    var message = e.message;\n    var error = e.error;\n\n    if (error) {\n      message = error;\n      var stack = error.stack;\n\n      if (stack) {\n        message = stack;\n      }\n    } else {\n      message = message + '. Access to error information is restricted on this domain!';\n\n      if (e.filename) {\n        message = message + ' Filename:' + e.filename;\n      }\n    }\n  });\n};\n/**\n * Lager en console.assert\n * @param test - test som sendes til console assert\n * @param message - message som sendes til console assert\n * @param optionalParams params som sendes til console assert\n */\n\nexport var assert = function assert(test, message) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var _len = arguments.length, optionalParams = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      optionalParams[_key - 2] = arguments[_key];\n    }\n\n    console.assert(test, message, optionalParams);\n  }\n};\n/**\n * Lager en console.clear\n */\n\nexport var clear = function clear() {\n  if (process.env.NODE_ENV !== 'production') {\n    console.clear();\n  }\n};\n/**\n * Lager en console.count\n * @param countTitle - string som sendes i console.count\n */\n\nexport var count = function count(countTitle) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.count(countTitle);\n  }\n};\n/**\n * Lager en console.debug og logger til serveren\n * @param message - string som sendes i console.debug og logges til serveren\n * @param optionalParams params som sendes til console.debug og logges til serveren\n */\n\nexport var debug = function debug(message) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var _len2 = arguments.length, optionalParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      optionalParams[_key2 - 1] = arguments[_key2];\n    }\n\n    console.debug(message, optionalParams);\n  }\n};\n/**\n * Lager en console.dir\n * @param value - string som sendes i console.dir og logges til serveren\n * @param optionalParams params som sendes til console.dir og logges til serveren\n */\n\nexport var dir = function dir(value) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var _len3 = arguments.length, optionalParams = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      optionalParams[_key3 - 1] = arguments[_key3];\n    }\n\n    console.dir(value, optionalParams);\n  }\n};\n/**\n * Lager en console.dirxml\n * @param value - string som sendes i console.dirxml og logges til serveren\n */\n\nexport var dirxml = function dirxml(value) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.dirxml(value);\n  }\n};\n/**\n * Lager en console.error og logger til serveren\n * @param message - string som sendes i console.error og logges til serveren\n * @param optionalParams params som sendes til console.error og logges til serveren\n */\n\nexport var error = function error(message) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var _len4 = arguments.length, optionalParams = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      optionalParams[_key4 - 1] = arguments[_key4];\n    }\n\n    console.error(message, optionalParams);\n  }\n};\n/**\n * Lager en console.exception og logger til serveren\n * @param message - string som sendes i console.exception og logges til serveren\n * @param optionalParams params som sendes til console.exception og logges til serveren\n */\n\nexport var exception = function exception(message) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var _len5 = arguments.length, optionalParams = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      optionalParams[_key5 - 1] = arguments[_key5];\n    }\n\n    console.exception(message, optionalParams);\n  }\n};\n/**\n * Lager en console.group\n * @param groupTitle - string som sendes i console.group\n */\n\nexport var group = function group(groupTitle) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.group(groupTitle);\n  }\n};\n/**\n * Lager en console.groupCollapsed\n * @param groupTitle - string som sendes i console.groupCollapsed\n */\n\nexport var groupCollapsed = function groupCollapsed(groupTitle) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.groupCollapsed(groupTitle);\n  }\n};\n/**\n * Lager en console.groupEnd\n */\n\nexport var groupEnd = function groupEnd() {\n  if (process.env.NODE_ENV !== 'production') {\n    console.groupEnd();\n  }\n};\n/**\n * Lager en console.info og logger til serveren\n * @param message - string som sendes i console.info og logges til serveren\n * @param optionalParams params som sendes til console.info og logges til serveren\n */\n\nexport var info = function info(message) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var _len6 = arguments.length, optionalParams = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      optionalParams[_key6 - 1] = arguments[_key6];\n    }\n\n    console.info(message, optionalParams);\n  }\n};\n/**\n * Lager en console.log\n * @param message - string som sendes i console.log\n * @param optionalParams params som sendes til console.log\n */\n\nexport var log = function log(message) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var _len7 = arguments.length, optionalParams = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      optionalParams[_key7 - 1] = arguments[_key7];\n    }\n\n    if (optionalParams && optionalParams.length > 0) {\n      console.log(message, optionalParams);\n    } else {\n      console.log(message);\n    }\n  }\n};\n/**\n * Lager en console.profile\n * @param reportName - string som sendes i console.groupCollapsed\n */\n\nexport var profile = function profile(reportName) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.profile(reportName);\n  }\n};\n/**\n * Lager en console.profileEnd\n */\n\nexport var profileEnd = function profileEnd() {\n  if (process.env.NODE_ENV !== 'production') {\n    console.profileEnd();\n  }\n};\n/**\n * Lager en console.table\n * @param data - array av ukjent data som sendes videre til console.table\n */\n\nexport var table = function table() {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var _len8 = arguments.length, data = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      data[_key8] = arguments[_key8];\n    }\n\n    console.table(data);\n  }\n};\n/**\n * Lager en console.time\n * @param timerName - string som sendes videre til console.time\n */\n\nexport var time = function time(timerName) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.time(timerName);\n  }\n};\n/**\n * Lager en console.timeEnd\n * @param timerName - string som sendes videre til console.timeEnd\n */\n\nexport var timeEnd = function timeEnd(timerName) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.timeEnd(timerName);\n  }\n};\n/**\n * Lager en console.trace og logger til serveren\n * @param message - string som sendes i console.trace og til serveren\n * @param optionalParams params som sendes til console.trace og til serveren\n */\n\nexport var trace = function trace(message) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var _len9 = arguments.length, optionalParams = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n      optionalParams[_key9 - 1] = arguments[_key9];\n    }\n\n    console.trace(message, optionalParams);\n  }\n};\n/**\n * Lager en console.warn og logger til serveren\n * @param message - string som sendes i console.warn og til serveren\n * @param optionalParams params som sendes til console.warn og til serveren\n */\n\nexport var warn = function warn(message) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var _len10 = arguments.length, optionalParams = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n      optionalParams[_key10 - 1] = arguments[_key10];\n    }\n\n    console.warn(message, optionalParams);\n  }\n}; // This wrapping is necessary for being able to Mock function in jest-tests\n\nvar exportFunctions = {\n  assert: assert,\n  clear: clear,\n  count: count,\n  debug: debug,\n  dir: dir,\n  dirxml: dirxml,\n  error: error,\n  exception: exception,\n  group: group,\n  groupCollapsed: groupCollapsed,\n  groupEnd: groupEnd,\n  info: info,\n  log: log,\n  profile: profile,\n  profileEnd: profileEnd,\n  table: table,\n  time: time,\n  timeEnd: timeEnd,\n  trace: trace,\n  warn: warn\n};\nexport default exportFunctions;","map":null,"metadata":{},"sourceType":"module"}