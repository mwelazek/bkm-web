{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport { CheckBox } from '../checkbox';\nimport ValidationError from './../../molecules/form/validation-error';\nimport { Sublabel } from '../label/sublabel';\nexport default class CheckBoxGroup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validate = validated => {\n      if (this.props.isRequired && validated && !this.props.checkboxes.some(el => el.checked === true)) {\n        return false;\n      } else if (this.props.max && this.props.checkboxes.filter(el => el.checked === true).length > this.props.max) {\n        return false;\n      } else if (this.props.min && validated && this.props.checkboxes.filter(el => el.checked === true).length < this.props.min) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.notifyValidated = () => {\n      if (this.props.onValidated) {\n        this.props.onValidated(this.state.valid);\n      }\n    };\n\n    this.state = {\n      valid: true,\n      validated: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.checkboxes !== this.props.checkboxes) {\n      this.setState({\n        valid: this.validate(this.state.validated)\n      }, this.notifyValidated);\n    }\n  }\n\n  validateField() {\n    const valid = this.validate(true);\n    return new Promise(resolve => {\n      this.setState({\n        validated: true,\n        valid\n      }, () => {\n        this.notifyValidated();\n        resolve();\n      });\n    });\n  }\n\n  isValid() {\n    return this.state.valid;\n  }\n\n  renderHelp() {\n    if (this.props.helpElement) {\n      return this.props.helpElement;\n    }\n  }\n\n  renderLegend() {\n    const {\n      legend,\n      legendClassName,\n      isRequired,\n      requiredLabel,\n      optionalLabel,\n      showRequiredLabel,\n      showOptionalLabel,\n      helpButton,\n      subLabel\n    } = this.props;\n\n    if (!legend) {\n      return null;\n    }\n\n    return React.createElement(\"legend\", {\n      className: legendClassName\n    }, legend, isRequired && requiredLabel && showRequiredLabel ? React.createElement(\"em\", null, \" \", requiredLabel) : '', !isRequired && optionalLabel && showOptionalLabel ? React.createElement(\"em\", null, \" \", optionalLabel) : '', helpButton, subLabel && React.createElement(Sublabel, {\n      sublabelText: subLabel\n    }));\n  }\n\n  render() {\n    const {\n      validateOnExternalUpdate\n    } = this.props;\n    const checkboxes = this.props.checkboxes.map(el => {\n      return React.createElement(CheckBox, {\n        label: el.label,\n        labelSuffixDangerousHtml: el.labelSuffixDangerousHtml,\n        key: el.id,\n        id: `${this.props.id}-${el.id}`,\n        checked: el.checked,\n        onChange: () => this.props.handleChange(el.id),\n        helpButton: el.hjelpetrigger,\n        disabled: el.disabled,\n        validateOnExternalUpdate: validateOnExternalUpdate,\n        checkboxTestId: `${this.props.checkboxTestId}-${el.id}`,\n        isStyleBlue: this.props.isStyleBlue\n      });\n    });\n    const classes = classNames({\n      'mol_validation--active': !this.state.valid\n    }, this.props.className);\n    return React.createElement(\"div\", {\n      className: `mol_validation ${classes}`,\n      id: `${this.props.id}-wrapper`\n    }, React.createElement(ValidationError, {\n      isValid: this.state.valid,\n      error: this.props.errorMessage ? this.props.errorMessage : '',\n      testId: this.props.validationTestId\n    }), React.createElement(\"fieldset\", {\n      className: this.props.fieldsetClassName,\n      \"data-testid\": this.props.checkboxTestId\n    }, this.renderLegend(), this.renderHelp(), this.props.hasInnerWrapper ? React.createElement(\"div\", {\n      className: \"atom_checkboxgroup__innerwrap\"\n    }, checkboxes) : checkboxes));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}