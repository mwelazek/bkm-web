{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst classnames_1 = __importDefault(require(\"classnames\"));\n\nconst react_collapse_1 = require(\"react-collapse\");\n\nconst HelpTrigger_1 = __importDefault(require(\"@helsenorge/toolkit/components/icons/HelpTrigger\"));\n\nconst itemcontrol_1 = __importDefault(require(\"../constants/itemcontrol\"));\n\nconst itemType_1 = __importDefault(require(\"../constants/itemType\"));\n\nconst help_1 = require(\"../util/help\");\n\nconst index_1 = require(\"../util/index\");\n\nconst skjemautfyller_core_1 = require(\"../util/skjemautfyller-core\");\n\nconst delete_button_1 = __importDefault(require(\"./formcomponents/repeat/delete-button\"));\n\nconst repeat_button_1 = __importDefault(require(\"./formcomponents/repeat/repeat-button\"));\n\nconst help_button_1 = __importDefault(require(\"./help-button/help-button\"));\n\nfunction withCommonFunctions(WrappedComponent) {\n  return class WithCommonFunctions extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.renderDeleteButton = className => {\n        if (!this.props.visibleDeleteButton) {\n          return undefined;\n        }\n\n        let mustShowConfirm = this.hasAnwer(this.props.answer);\n\n        if (!mustShowConfirm && this.props.responseItem && this.props.responseItem.item) {\n          mustShowConfirm = this.props.responseItem.item.some(item => item ? this.hasAnwer(item.answer) : false);\n        }\n\n        return React.createElement(\"div\", {\n          className: \"page_skjemautfyller__deletebutton-wrapper\"\n        }, React.createElement(delete_button_1.default, {\n          className: className,\n          item: this.props.item,\n          path: this.props.path,\n          resources: this.props.resources,\n          mustShowConfirm: mustShowConfirm,\n          onAnswerChange: this.props.onAnswerChange,\n          renderContext: this.props.renderContext\n        }));\n      };\n\n      this.renderRepeatButton = (item, index, path, response) => {\n        if (!item.repeats || !index_1.shouldRenderRepeatButton(item, response, index)) {\n          return undefined;\n        }\n\n        return React.createElement(\"div\", {\n          className: \"page_skjemautfyller__repeatbutton-wrapper\"\n        }, React.createElement(repeat_button_1.default, {\n          key: `item_${item.linkId}_add_repeat_item`,\n          resources: this.props.resources,\n          item: item,\n          responseItems: response,\n          parentPath: path,\n          renderContext: this.props.renderContext\n        }));\n      };\n\n      this.toggleHelp = isOpen => {\n        this.setState({\n          isHelpVisible: isOpen\n        });\n      };\n\n      this.renderHelpButton = () => {\n        const {\n          item,\n          onRequestHelpButton\n        } = this.props;\n        if (!item) return;\n        const qItem = item;\n        const helpItem = help_1.findHelpItem(qItem);\n        if (!helpItem) return;\n        const helpItemType = help_1.getHelpItemType(helpItem) || itemcontrol_1.default.HELP;\n\n        if (onRequestHelpButton) {\n          return React.createElement(help_button_1.default, {\n            item: helpItem,\n            callback: this.toggleHelp\n          }, onRequestHelpButton(qItem, helpItem, helpItemType, index_1.getText(helpItem), this.state.isHelpVisible));\n        }\n\n        return React.createElement(help_button_1.default, {\n          item: helpItem,\n          callback: this.toggleHelp\n        }, React.createElement(HelpTrigger_1.default, null));\n      };\n\n      this.renderHelpElement = () => {\n        const {\n          item,\n          onRequestHelpElement\n        } = this.props;\n\n        if (!item) {\n          return;\n        }\n\n        const qItem = item;\n        const helpItem = help_1.findHelpItem(qItem);\n\n        if (!helpItem) {\n          return;\n        }\n\n        const helpItemType = help_1.getHelpItemType(helpItem) || itemcontrol_1.default.HELP;\n\n        if (onRequestHelpElement) {\n          return onRequestHelpElement(qItem, helpItem, helpItemType, index_1.getText(helpItem), this.state.isHelpVisible);\n        }\n\n        const collapseClasses = classnames_1.default({\n          page_skjemautfyller__helpComponent: true,\n          'page_skjemautfyller__helpComponent--open': this.state.isHelpVisible\n        });\n        return React.createElement(react_collapse_1.Collapse, {\n          isOpened: this.state.isHelpVisible\n        }, React.createElement(\"div\", {\n          className: collapseClasses,\n          dangerouslySetInnerHTML: {\n            __html: `${index_1.getText(helpItem)}`\n          }\n        }));\n      };\n\n      this.renderItem = (item, renderContext) => {\n        const {\n          resources,\n          containedResources,\n          responseItem,\n          pdf,\n          path,\n          headerTag,\n          promptLoginMessage,\n          onRenderMarkdown\n        } = this.props;\n        if (help_1.isHelpItem(item)) return [];\n        if (index_1.isHiddenItem(item)) return [];\n        const Comp = index_1.getComponentForItem(item.type);\n\n        if (!Comp) {\n          return [];\n        }\n\n        let response;\n\n        if (responseItem) {\n          const childItem = responseItem.item;\n          const childAnswer = responseItem.answer;\n          const linkId = item.linkId;\n\n          if (childItem) {\n            response = skjemautfyller_core_1.getItemWithIdFromResponseItemArray(linkId, childItem);\n          } else if (childAnswer) {\n            response = skjemautfyller_core_1.getItemWithIdFromResponseItemArray(linkId, childAnswer[0].item);\n          }\n        }\n\n        const renderedItems = [];\n\n        if (response && response.length > 0) {\n          response.forEach((responseItem, index) => {\n            renderedItems.push(React.createElement(Comp, {\n              key: 'item_' + responseItem.linkId + skjemautfyller_core_1.createIdSuffix(path, index, item.repeats),\n              pdf: pdf,\n              language: this.props.language,\n              includeSkipLink: this.props.includeSkipLink,\n              promptLoginMessage: promptLoginMessage,\n              id: 'item_' + responseItem.linkId + skjemautfyller_core_1.createIdSuffix(path, index, item.repeats),\n              item: item,\n              responseItem: responseItem,\n              answer: skjemautfyller_core_1.getAnswerFromResponseItem(responseItem),\n              resources: resources,\n              containedResources: containedResources,\n              path: skjemautfyller_core_1.createPathForItem(path, item, responseItem, index),\n              headerTag: index_1.getChildHeaderTag(this.props.item, headerTag),\n              onValidated: this.props.onValidated,\n              validateScriptInjection: this.props.validateScriptInjection,\n              addFormComponent: this.props.addFormComponent,\n              removeFormComponent: this.props.removeFormComponent,\n              optionalLabel: this.props.optionalLabel,\n              requiredLabel: this.props.requiredLabel,\n              showOptionalLabel: this.props.showOptionalLabel,\n              showRequiredLabel: this.props.showRequiredLabel,\n              visibleDeleteButton: skjemautfyller_core_1.shouldRenderDeleteButton(item, index),\n              repeatButton: this.renderRepeatButton(item, index, path, response),\n              onRequestAttachmentLink: this.props.onRequestAttachmentLink,\n              onOpenAttachment: this.props.onOpenAttachment,\n              onDeleteAttachment: this.props.onDeleteAttachment,\n              uploadAttachment: this.props.uploadAttachment,\n              onRequestHelpButton: this.props.onRequestHelpButton,\n              onRequestHelpElement: this.props.onRequestHelpElement,\n              attachmentErrorMessage: this.props.attachmentErrorMessage,\n              attachmentMaxFileSize: this.props.attachmentMaxFileSize,\n              attachmentValidTypes: this.props.attachmentValidTypes,\n              onAnswerChange: this.props.onAnswerChange,\n              renderContext: renderContext,\n              onRenderMarkdown: onRenderMarkdown,\n              fetchValueSet: this.props.fetchValueSet,\n              autoSuggestProps: this.props.autoSuggestProps\n            }));\n          });\n        }\n\n        return renderedItems;\n      };\n\n      this.renderChildrenItems = renderContext => {\n        const {\n          item\n        } = this.props;\n\n        if (!item || !item.item) {\n          return undefined;\n        }\n\n        if (item.type === itemType_1.default.GROUP && renderContext.RenderChildren) {\n          return renderContext.RenderChildren(item.item, this.renderItem);\n        }\n\n        const renderedItems = [];\n        item.item.forEach(i => renderedItems.push(...this.renderItem(i, renderContext)));\n        return renderedItems;\n      };\n\n      this.state = {\n        childComponents: [],\n        isHelpVisible: false\n      };\n    }\n\n    hasAnwer(answer) {\n      return !!answer && Object.keys(answer).length > 0;\n    }\n\n    render() {\n      if (!this.props.enable) {\n        return null;\n      } else {\n        return React.createElement(WrappedComponent, Object.assign({\n          renderChildrenItems: this.renderChildrenItems,\n          renderDeleteButton: this.renderDeleteButton,\n          renderRepeatButton: this.renderRepeatButton,\n          renderHelpButton: this.renderHelpButton,\n          renderHelpElement: this.renderHelpElement,\n          isHelpOpen: this.state.isHelpVisible,\n          onRenderMarkdown: this.props.onRenderMarkdown\n        }, this.props), this.renderChildrenItems(this.props.renderContext));\n      }\n    }\n\n  };\n}\n\nexports.default = withCommonFunctions;","map":null,"metadata":{},"sourceType":"script"}